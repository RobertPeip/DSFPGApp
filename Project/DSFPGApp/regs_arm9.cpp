#include "regs_arm9.h";

REGS_Arm9 Regs_Arm9;


RegSect_display9::RegSect_display9()
{
    A_DISPCNT = DSReg(0x0000, 15, 0, 1, 0, "readwrite", "A_DISPCNT", Regs_Arm9.data);
    A_DISPCNT_BG_Mode = DSReg(0x0000, 2, 0, 1, 0, "readwrite", "A_DISPCNT_BG_Mode", Regs_Arm9.data);
    A_DISPCNT_BG0_2D_3D = DSReg(0x0000, 3, 3, 1, 0, "readwrite", "A_DISPCNT_BG0_2D_3D", Regs_Arm9.data);
    A_DISPCNT_Tile_OBJ_Mapping = DSReg(0x0000, 4, 4, 1, 0, "readwrite", "A_DISPCNT_Tile_OBJ_Mapping", Regs_Arm9.data);
    A_DISPCNT_Bitmap_OBJ_2D_Dim = DSReg(0x0000, 5, 5, 1, 0, "readwrite", "A_DISPCNT_Bitmap_OBJ_2D_Dim", Regs_Arm9.data);
    A_DISPCNT_Bitmap_OBJ_Mapping = DSReg(0x0000, 6, 6, 1, 0, "readwrite", "A_DISPCNT_Bitmap_OBJ_Mapping", Regs_Arm9.data);
    A_DISPCNT_Forced_Blank = DSReg(0x0000, 7, 7, 1, 0, "readwrite", "A_DISPCNT_Forced_Blank", Regs_Arm9.data);
    A_DISPCNT_Screen_Display_BG0 = DSReg(0x0000, 8, 8, 1, 0, "readwrite", "A_DISPCNT_Screen_Display_BG0", Regs_Arm9.data);
    A_DISPCNT_Screen_Display_BG1 = DSReg(0x0000, 9, 9, 1, 0, "readwrite", "A_DISPCNT_Screen_Display_BG1", Regs_Arm9.data);
    A_DISPCNT_Screen_Display_BG2 = DSReg(0x0000, 10, 10, 1, 0, "readwrite", "A_DISPCNT_Screen_Display_BG2", Regs_Arm9.data);
    A_DISPCNT_Screen_Display_BG3 = DSReg(0x0000, 11, 11, 1, 0, "readwrite", "A_DISPCNT_Screen_Display_BG3", Regs_Arm9.data);
    A_DISPCNT_Screen_Display_OBJ = DSReg(0x0000, 12, 12, 1, 0, "readwrite", "A_DISPCNT_Screen_Display_OBJ", Regs_Arm9.data);
    A_DISPCNT_Window_0_Display_Flag = DSReg(0x0000, 13, 13, 1, 0, "readwrite", "A_DISPCNT_Window_0_Display_Flag", Regs_Arm9.data);
    A_DISPCNT_Window_1_Display_Flag = DSReg(0x0000, 14, 14, 1, 0, "readwrite", "A_DISPCNT_Window_1_Display_Flag", Regs_Arm9.data);
    A_DISPCNT_OBJ_Wnd_Display_Flag = DSReg(0x0000, 15, 15, 1, 0, "readwrite", "A_DISPCNT_OBJ_Wnd_Display_Flag", Regs_Arm9.data);
    A_DISPCNT_Display_Mode = DSReg(0x0000, 17, 16, 1, 0, "readwrite", "A_DISPCNT_Display_Mode", Regs_Arm9.data);
    A_DISPCNT_VRAM_block = DSReg(0x0000, 19, 18, 1, 0, "readwrite", "A_DISPCNT_VRAM_block", Regs_Arm9.data);
    A_DISPCNT_Tile_OBJ_1D_Boundary = DSReg(0x0000, 21, 20, 1, 0, "readwrite", "A_DISPCNT_Tile_OBJ_1D_Boundary", Regs_Arm9.data);
    A_DISPCNT_Bitmap_OBJ_1D_Boundary = DSReg(0x0000, 22, 22, 1, 0, "readwrite", "A_DISPCNT_Bitmap_OBJ_1D_Boundary", Regs_Arm9.data);
    A_DISPCNT_OBJ_Process_H_Blank = DSReg(0x0000, 23, 23, 1, 0, "readwrite", "A_DISPCNT_OBJ_Process_H_Blank", Regs_Arm9.data);
    A_DISPCNT_Character_Base = DSReg(0x0000, 26, 24, 1, 0, "readwrite", "A_DISPCNT_Character_Base", Regs_Arm9.data);
    A_DISPCNT_Screen_Base = DSReg(0x0000, 29, 27, 1, 0, "readwrite", "A_DISPCNT_Screen_Base", Regs_Arm9.data);
    A_DISPCNT_BG_Extended_Palettes = DSReg(0x0000, 30, 30, 1, 0, "readwrite", "A_DISPCNT_BG_Extended_Palettes", Regs_Arm9.data);
    A_DISPCNT_OBJ_Extended_Palettes = DSReg(0x0000, 31, 31, 1, 0, "readwrite", "A_DISPCNT_OBJ_Extended_Palettes", Regs_Arm9.data);
    DISPSTAT = DSReg(0x0004, 15, 0, 1, 0x0004, "readwrite", "DISPSTAT", Regs_Arm9.data);
    DISPSTAT_V_Blank_flag = DSReg(0x0004, 0, 0, 1, 0, "readonly", "DISPSTAT_V_Blank_flag", Regs_Arm9.data);
    DISPSTAT_H_Blank_flag = DSReg(0x0004, 1, 1, 1, 0, "readonly", "DISPSTAT_H_Blank_flag", Regs_Arm9.data);
    DISPSTAT_V_Counter_flag = DSReg(0x0004, 2, 2, 1, 0, "readonly", "DISPSTAT_V_Counter_flag", Regs_Arm9.data);
    DISPSTAT_V_Blank_IRQ_Enable = DSReg(0x0004, 3, 3, 1, 0, "readwrite", "DISPSTAT_V_Blank_IRQ_Enable", Regs_Arm9.data);
    DISPSTAT_H_Blank_IRQ_Enable = DSReg(0x0004, 4, 4, 1, 0, "readwrite", "DISPSTAT_H_Blank_IRQ_Enable", Regs_Arm9.data);
    DISPSTAT_V_Counter_IRQ_Enable = DSReg(0x0004, 5, 5, 1, 0, "readwrite", "DISPSTAT_V_Counter_IRQ_Enable", Regs_Arm9.data);
    DISPSTAT_V_Count_Setting8 = DSReg(0x0004, 7, 7, 1, 0, "readwrite", "DISPSTAT_V_Count_Setting8", Regs_Arm9.data);
    DISPSTAT_V_Count_Setting = DSReg(0x0004, 15, 8, 1, 0, "readwrite", "DISPSTAT_V_Count_Setting", Regs_Arm9.data);
    VCOUNT = DSReg(0x0004, 31, 16, 1, 0, "readwrite", "VCOUNT", Regs_Arm9.data);
    A_BG0CNT = DSReg(0x0008, 15, 0, 1, 0, "writeonly", "A_BG0CNT", Regs_Arm9.data);
    A_BG0CNT_BG_Priority = DSReg(0x0008, 1, 0, 1, 0, "readwrite", "A_BG0CNT_BG_Priority", Regs_Arm9.data);
    A_BG0CNT_Character_Base_Block = DSReg(0x0008, 5, 2, 1, 0, "readwrite", "A_BG0CNT_Character_Base_Block", Regs_Arm9.data);
    A_BG0CNT_Mosaic = DSReg(0x0008, 6, 6, 1, 0, "readwrite", "A_BG0CNT_Mosaic", Regs_Arm9.data);
    A_BG0CNT_Colors_Palettes = DSReg(0x0008, 7, 7, 1, 0, "readwrite", "A_BG0CNT_Colors_Palettes", Regs_Arm9.data);
    A_BG0CNT_Screen_Base_Block = DSReg(0x0008, 12, 8, 1, 0, "readwrite", "A_BG0CNT_Screen_Base_Block", Regs_Arm9.data);
    A_BG0CNT_Ext_Palette_Slot = DSReg(0x0008, 13, 13, 1, 0, "readwrite", "A_BG0CNT_Ext_Palette_Slot", Regs_Arm9.data);
    A_BG0CNT_Screen_Size = DSReg(0x0008, 15, 14, 1, 0, "readwrite", "A_BG0CNT_Screen_Size", Regs_Arm9.data);
    A_BG1CNT = DSReg(0x0008, 31, 16, 1, 0, "writeonly", "A_BG1CNT", Regs_Arm9.data);
    A_BG1CNT_BG_Priority = DSReg(0x0008, 17, 16, 1, 0, "readwrite", "A_BG1CNT_BG_Priority", Regs_Arm9.data);
    A_BG1CNT_Character_Base_Block = DSReg(0x0008, 21, 18, 1, 0, "readwrite", "A_BG1CNT_Character_Base_Block", Regs_Arm9.data);
    A_BG1CNT_Mosaic = DSReg(0x0008, 22, 22, 1, 0, "readwrite", "A_BG1CNT_Mosaic", Regs_Arm9.data);
    A_BG1CNT_Colors_Palettes = DSReg(0x0008, 23, 23, 1, 0, "readwrite", "A_BG1CNT_Colors_Palettes", Regs_Arm9.data);
    A_BG1CNT_Screen_Base_Block = DSReg(0x0008, 28, 24, 1, 0, "readwrite", "A_BG1CNT_Screen_Base_Block", Regs_Arm9.data);
    A_BG1CNT_Ext_Palette_Slot = DSReg(0x0008, 29, 29, 1, 0, "readwrite", "A_BG1CNT_Ext_Palette_Slot", Regs_Arm9.data);
    A_BG1CNT_Screen_Size = DSReg(0x0008, 31, 30, 1, 0, "readwrite", "A_BG1CNT_Screen_Size", Regs_Arm9.data);
    A_BG2CNT = DSReg(0x000C, 15, 0, 1, 0, "readwrite", "A_BG2CNT", Regs_Arm9.data);
    A_BG2CNT_BG_Priority = DSReg(0x000C, 1, 0, 1, 0, "readwrite", "A_BG2CNT_BG_Priority", Regs_Arm9.data);
    A_BG2CNT_Character_Base_Block = DSReg(0x000C, 5, 2, 1, 0, "readwrite", "A_BG2CNT_Character_Base_Block", Regs_Arm9.data);
    A_BG2CNT_Mosaic = DSReg(0x000C, 6, 6, 1, 0, "readwrite", "A_BG2CNT_Mosaic", Regs_Arm9.data);
    A_BG2CNT_Colors_Palettes = DSReg(0x000C, 7, 7, 1, 0, "readwrite", "A_BG2CNT_Colors_Palettes", Regs_Arm9.data);
    A_BG2CNT_Screen_Base_Block = DSReg(0x000C, 12, 8, 1, 0, "readwrite", "A_BG2CNT_Screen_Base_Block", Regs_Arm9.data);
    A_BG2CNT_Display_Area_Overflow = DSReg(0x000C, 13, 13, 1, 0, "readwrite", "A_BG2CNT_Display_Area_Overflow", Regs_Arm9.data);
    A_BG2CNT_Screen_Size = DSReg(0x000C, 15, 14, 1, 0, "readwrite", "A_BG2CNT_Screen_Size", Regs_Arm9.data);
    A_BG3CNT = DSReg(0x000C, 31, 16, 1, 0, "readwrite", "A_BG3CNT", Regs_Arm9.data);
    A_BG3CNT_BG_Priority = DSReg(0x000C, 17, 16, 1, 0, "readwrite", "A_BG3CNT_BG_Priority", Regs_Arm9.data);
    A_BG3CNT_Character_Base_Block = DSReg(0x000C, 21, 18, 1, 0, "readwrite", "A_BG3CNT_Character_Base_Block", Regs_Arm9.data);
    A_BG3CNT_Mosaic = DSReg(0x000C, 22, 22, 1, 0, "readwrite", "A_BG3CNT_Mosaic", Regs_Arm9.data);
    A_BG3CNT_Colors_Palettes = DSReg(0x000C, 23, 23, 1, 0, "readwrite", "A_BG3CNT_Colors_Palettes", Regs_Arm9.data);
    A_BG3CNT_Screen_Base_Block = DSReg(0x000C, 28, 24, 1, 0, "readwrite", "A_BG3CNT_Screen_Base_Block", Regs_Arm9.data);
    A_BG3CNT_Display_Area_Overflow = DSReg(0x000C, 29, 29, 1, 0, "readwrite", "A_BG3CNT_Display_Area_Overflow", Regs_Arm9.data);
    A_BG3CNT_Screen_Size = DSReg(0x000C, 31, 30, 1, 0, "readwrite", "A_BG3CNT_Screen_Size", Regs_Arm9.data);
    A_BG0HOFS = DSReg(0x0010, 15, 0, 1, 0, "writeonly", "A_BG0HOFS", Regs_Arm9.data);
    A_BG0VOFS = DSReg(0x0010, 31, 16, 1, 0, "writeonly", "A_BG0VOFS", Regs_Arm9.data);
    A_BG1HOFS = DSReg(0x0014, 15, 0, 1, 0, "writeonly", "A_BG1HOFS", Regs_Arm9.data);
    A_BG1VOFS = DSReg(0x0014, 31, 16, 1, 0, "writeonly", "A_BG1VOFS", Regs_Arm9.data);
    A_BG2HOFS = DSReg(0x0018, 15, 0, 1, 0, "writeonly", "A_BG2HOFS", Regs_Arm9.data);
    A_BG2VOFS = DSReg(0x0018, 31, 16, 1, 0, "writeonly", "A_BG2VOFS", Regs_Arm9.data);
    A_BG3HOFS = DSReg(0x001C, 15, 0, 1, 0, "writeonly", "A_BG3HOFS", Regs_Arm9.data);
    A_BG3VOFS = DSReg(0x001C, 31, 16, 1, 0, "writeonly", "A_BG3VOFS", Regs_Arm9.data);
    A_BG2RotScaleParDX = DSReg(0x0020, 15, 0, 1, 256, "writeonly", "A_BG2RotScaleParDX", Regs_Arm9.data);
    A_BG2RotScaleParDMX = DSReg(0x0020, 31, 16, 1, 0, "writeonly", "A_BG2RotScaleParDMX", Regs_Arm9.data);
    A_BG2RotScaleParDY = DSReg(0x0024, 15, 0, 1, 0, "writeonly", "A_BG2RotScaleParDY", Regs_Arm9.data);
    A_BG2RotScaleParDMY = DSReg(0x0024, 31, 16, 1, 256, "writeonly", "A_BG2RotScaleParDMY", Regs_Arm9.data);
    A_BG2RefX = DSReg(0x0028, 27, 0, 1, 0, "writeonly", "A_BG2RefX", Regs_Arm9.data);
    A_BG2RefY = DSReg(0x002C, 27, 0, 1, 0, "writeonly", "A_BG2RefY", Regs_Arm9.data);
    A_BG3RotScaleParDX = DSReg(0x0030, 15, 0, 1, 256, "writeonly", "A_BG3RotScaleParDX", Regs_Arm9.data);
    A_BG3RotScaleParDMX = DSReg(0x0030, 31, 16, 1, 0, "writeonly", "A_BG3RotScaleParDMX", Regs_Arm9.data);
    A_BG3RotScaleParDY = DSReg(0x0034, 15, 0, 1, 0, "writeonly", "A_BG3RotScaleParDY", Regs_Arm9.data);
    A_BG3RotScaleParDMY = DSReg(0x0034, 31, 16, 1, 256, "writeonly", "A_BG3RotScaleParDMY", Regs_Arm9.data);
    A_BG3RefX = DSReg(0x0038, 27, 0, 1, 0, "writeonly", "A_BG3RefX", Regs_Arm9.data);
    A_BG3RefY = DSReg(0x003C, 27, 0, 1, 0, "writeonly", "A_BG3RefY", Regs_Arm9.data);
    A_WIN0H = DSReg(0x0040, 15, 0, 1, 0, "writeonly", "A_WIN0H", Regs_Arm9.data);
    A_WIN0H_X2 = DSReg(0x0040, 7, 0, 1, 0, "writeonly", "A_WIN0H_X2", Regs_Arm9.data);
    A_WIN0H_X1 = DSReg(0x0040, 15, 8, 1, 0, "writeonly", "A_WIN0H_X1", Regs_Arm9.data);
    A_WIN1H = DSReg(0x0040, 31, 16, 1, 0, "writeonly", "A_WIN1H", Regs_Arm9.data);
    A_WIN1H_X2 = DSReg(0x0040, 23, 16, 1, 0, "writeonly", "A_WIN1H_X2", Regs_Arm9.data);
    A_WIN1H_X1 = DSReg(0x0040, 31, 24, 1, 0, "writeonly", "A_WIN1H_X1", Regs_Arm9.data);
    A_WIN0V = DSReg(0x0044, 15, 0, 1, 0, "writeonly", "A_WIN0V", Regs_Arm9.data);
    A_WIN0V_Y2 = DSReg(0x0044, 7, 0, 1, 0, "writeonly", "A_WIN0V_Y2", Regs_Arm9.data);
    A_WIN0V_Y1 = DSReg(0x0044, 15, 8, 1, 0, "writeonly", "A_WIN0V_Y1", Regs_Arm9.data);
    A_WIN1V = DSReg(0x0044, 31, 16, 1, 0, "writeonly", "A_WIN1V", Regs_Arm9.data);
    A_WIN1V_Y2 = DSReg(0x0044, 23, 16, 1, 0, "writeonly", "A_WIN1V_Y2", Regs_Arm9.data);
    A_WIN1V_Y1 = DSReg(0x0044, 31, 24, 1, 0, "writeonly", "A_WIN1V_Y1", Regs_Arm9.data);
    A_WININ = DSReg(0x0048, 15, 0, 1, 0, "writeonly", "A_WININ", Regs_Arm9.data);
    A_WININ_Window_0_BG0_Enable = DSReg(0x0048, 0, 0, 1, 0, "readwrite", "A_WININ_Window_0_BG0_Enable", Regs_Arm9.data);
    A_WININ_Window_0_BG1_Enable = DSReg(0x0048, 1, 1, 1, 0, "readwrite", "A_WININ_Window_0_BG1_Enable", Regs_Arm9.data);
    A_WININ_Window_0_BG2_Enable = DSReg(0x0048, 2, 2, 1, 0, "readwrite", "A_WININ_Window_0_BG2_Enable", Regs_Arm9.data);
    A_WININ_Window_0_BG3_Enable = DSReg(0x0048, 3, 3, 1, 0, "readwrite", "A_WININ_Window_0_BG3_Enable", Regs_Arm9.data);
    A_WININ_Window_0_OBJ_Enable = DSReg(0x0048, 4, 4, 1, 0, "readwrite", "A_WININ_Window_0_OBJ_Enable", Regs_Arm9.data);
    A_WININ_Window_0_Special_Effect = DSReg(0x0048, 5, 5, 1, 0, "readwrite", "A_WININ_Window_0_Special_Effect", Regs_Arm9.data);
    A_WININ_Window_1_BG0_Enable = DSReg(0x0048, 8, 8, 1, 0, "readwrite", "A_WININ_Window_1_BG0_Enable", Regs_Arm9.data);
    A_WININ_Window_1_BG1_Enable = DSReg(0x0048, 9, 9, 1, 0, "readwrite", "A_WININ_Window_1_BG1_Enable", Regs_Arm9.data);
    A_WININ_Window_1_BG2_Enable = DSReg(0x0048, 10, 10, 1, 0, "readwrite", "A_WININ_Window_1_BG2_Enable", Regs_Arm9.data);
    A_WININ_Window_1_BG3_Enable = DSReg(0x0048, 11, 11, 1, 0, "readwrite", "A_WININ_Window_1_BG3_Enable", Regs_Arm9.data);
    A_WININ_Window_1_OBJ_Enable = DSReg(0x0048, 12, 12, 1, 0, "readwrite", "A_WININ_Window_1_OBJ_Enable", Regs_Arm9.data);
    A_WININ_Window_1_Special_Effect = DSReg(0x0048, 13, 13, 1, 0, "readwrite", "A_WININ_Window_1_Special_Effect", Regs_Arm9.data);
    A_WINOUT = DSReg(0x0048, 31, 16, 1, 0, "writeonly", "A_WINOUT", Regs_Arm9.data);
    A_WINOUT_Outside_BG0_Enable = DSReg(0x0048, 16, 16, 1, 0, "readwrite", "A_WINOUT_Outside_BG0_Enable", Regs_Arm9.data);
    A_WINOUT_Outside_BG1_Enable = DSReg(0x0048, 17, 17, 1, 0, "readwrite", "A_WINOUT_Outside_BG1_Enable", Regs_Arm9.data);
    A_WINOUT_Outside_BG2_Enable = DSReg(0x0048, 18, 18, 1, 0, "readwrite", "A_WINOUT_Outside_BG2_Enable", Regs_Arm9.data);
    A_WINOUT_Outside_BG3_Enable = DSReg(0x0048, 19, 19, 1, 0, "readwrite", "A_WINOUT_Outside_BG3_Enable", Regs_Arm9.data);
    A_WINOUT_Outside_OBJ_Enable = DSReg(0x0048, 20, 20, 1, 0, "readwrite", "A_WINOUT_Outside_OBJ_Enable", Regs_Arm9.data);
    A_WINOUT_Outside_Special_Effect = DSReg(0x0048, 21, 21, 1, 0, "readwrite", "A_WINOUT_Outside_Special_Effect", Regs_Arm9.data);
    A_WINOUT_Objwnd_BG0_Enable = DSReg(0x0048, 24, 24, 1, 0, "readwrite", "A_WINOUT_Objwnd_BG0_Enable", Regs_Arm9.data);
    A_WINOUT_Objwnd_BG1_Enable = DSReg(0x0048, 25, 25, 1, 0, "readwrite", "A_WINOUT_Objwnd_BG1_Enable", Regs_Arm9.data);
    A_WINOUT_Objwnd_BG2_Enable = DSReg(0x0048, 26, 26, 1, 0, "readwrite", "A_WINOUT_Objwnd_BG2_Enable", Regs_Arm9.data);
    A_WINOUT_Objwnd_BG3_Enable = DSReg(0x0048, 27, 27, 1, 0, "readwrite", "A_WINOUT_Objwnd_BG3_Enable", Regs_Arm9.data);
    A_WINOUT_Objwnd_OBJ_Enable = DSReg(0x0048, 28, 28, 1, 0, "readwrite", "A_WINOUT_Objwnd_OBJ_Enable", Regs_Arm9.data);
    A_WINOUT_Objwnd_Special_Effect = DSReg(0x0048, 29, 29, 1, 0, "readwrite", "A_WINOUT_Objwnd_Special_Effect", Regs_Arm9.data);
    A_MOSAIC = DSReg(0x004C, 15, 0, 1, 0, "writeonly", "A_MOSAIC", Regs_Arm9.data);
    A_MOSAIC_BG_Mosaic_H_Size = DSReg(0x004C, 3, 0, 1, 0, "writeonly", "A_MOSAIC_BG_Mosaic_H_Size", Regs_Arm9.data);
    A_MOSAIC_BG_Mosaic_V_Size = DSReg(0x004C, 7, 4, 1, 0, "writeonly", "A_MOSAIC_BG_Mosaic_V_Size", Regs_Arm9.data);
    A_MOSAIC_OBJ_Mosaic_H_Size = DSReg(0x004C, 11, 8, 1, 0, "writeonly", "A_MOSAIC_OBJ_Mosaic_H_Size", Regs_Arm9.data);
    A_MOSAIC_OBJ_Mosaic_V_Size = DSReg(0x004C, 15, 12, 1, 0, "writeonly", "A_MOSAIC_OBJ_Mosaic_V_Size", Regs_Arm9.data);
    A_BLDCNT = DSReg(0x0050, 13, 0, 1, 0, "readwrite", "A_BLDCNT", Regs_Arm9.data);
    A_BLDCNT_BG0_1st_Target_Pixel = DSReg(0x0050, 0, 0, 1, 0, "readwrite", "A_BLDCNT_BG0_1st_Target_Pixel", Regs_Arm9.data);
    A_BLDCNT_BG1_1st_Target_Pixel = DSReg(0x0050, 1, 1, 1, 0, "readwrite", "A_BLDCNT_BG1_1st_Target_Pixel", Regs_Arm9.data);
    A_BLDCNT_BG2_1st_Target_Pixel = DSReg(0x0050, 2, 2, 1, 0, "readwrite", "A_BLDCNT_BG2_1st_Target_Pixel", Regs_Arm9.data);
    A_BLDCNT_BG3_1st_Target_Pixel = DSReg(0x0050, 3, 3, 1, 0, "readwrite", "A_BLDCNT_BG3_1st_Target_Pixel", Regs_Arm9.data);
    A_BLDCNT_OBJ_1st_Target_Pixel = DSReg(0x0050, 4, 4, 1, 0, "readwrite", "A_BLDCNT_OBJ_1st_Target_Pixel", Regs_Arm9.data);
    A_BLDCNT_BD_1st_Target_Pixel = DSReg(0x0050, 5, 5, 1, 0, "readwrite", "A_BLDCNT_BD_1st_Target_Pixel", Regs_Arm9.data);
    A_BLDCNT_Color_Special_Effect = DSReg(0x0050, 7, 6, 1, 0, "readwrite", "A_BLDCNT_Color_Special_Effect", Regs_Arm9.data);
    A_BLDCNT_BG0_2nd_Target_Pixel = DSReg(0x0050, 8, 8, 1, 0, "readwrite", "A_BLDCNT_BG0_2nd_Target_Pixel", Regs_Arm9.data);
    A_BLDCNT_BG1_2nd_Target_Pixel = DSReg(0x0050, 9, 9, 1, 0, "readwrite", "A_BLDCNT_BG1_2nd_Target_Pixel", Regs_Arm9.data);
    A_BLDCNT_BG2_2nd_Target_Pixel = DSReg(0x0050, 10, 10, 1, 0, "readwrite", "A_BLDCNT_BG2_2nd_Target_Pixel", Regs_Arm9.data);
    A_BLDCNT_BG3_2nd_Target_Pixel = DSReg(0x0050, 11, 11, 1, 0, "readwrite", "A_BLDCNT_BG3_2nd_Target_Pixel", Regs_Arm9.data);
    A_BLDCNT_OBJ_2nd_Target_Pixel = DSReg(0x0050, 12, 12, 1, 0, "readwrite", "A_BLDCNT_OBJ_2nd_Target_Pixel", Regs_Arm9.data);
    A_BLDCNT_BD_2nd_Target_Pixel = DSReg(0x0050, 13, 13, 1, 0, "readwrite", "A_BLDCNT_BD_2nd_Target_Pixel", Regs_Arm9.data);
    A_BLDALPHA = DSReg(0x0050, 28, 16, 1, 0, "writeonly", "A_BLDALPHA", Regs_Arm9.data);
    A_BLDALPHA_EVA_Coefficient = DSReg(0x0050, 20, 16, 1, 0, "readwrite", "A_BLDALPHA_EVA_Coefficient", Regs_Arm9.data);
    A_BLDALPHA_EVB_Coefficient = DSReg(0x0050, 28, 24, 1, 0, "readwrite", "A_BLDALPHA_EVB_Coefficient", Regs_Arm9.data);
    A_BLDY = DSReg(0x0054, 4, 0, 1, 0, "writeonly", "A_BLDY", Regs_Arm9.data);
    DISP3DCNT = DSReg(0x0060, 14, 0, 1, 0, "readwrite", "DISP3DCNT", Regs_Arm9.data);
    DISP3DCNT_Texture_Mapping = DSReg(0x0060, 0, 0, 1, 0, "readwrite", "DISP3DCNT_Texture_Mapping", Regs_Arm9.data);
    DISP3DCNT_PolygonAttr_Shading = DSReg(0x0060, 1, 1, 1, 0, "readwrite", "DISP3DCNT_PolygonAttr_Shading", Regs_Arm9.data);
    DISP3DCNT_Alpha_Test = DSReg(0x0060, 2, 2, 1, 0, "readwrite", "DISP3DCNT_Alpha_Test", Regs_Arm9.data);
    DISP3DCNT_Alpha_Blending = DSReg(0x0060, 3, 3, 1, 0, "readwrite", "DISP3DCNT_Alpha_Blending", Regs_Arm9.data);
    DISP3DCNT_Anti_Aliasing = DSReg(0x0060, 4, 4, 1, 0, "readwrite", "DISP3DCNT_Anti_Aliasing", Regs_Arm9.data);
    DISP3DCNT_Edge_Marking = DSReg(0x0060, 5, 5, 1, 0, "readwrite", "DISP3DCNT_Edge_Marking", Regs_Arm9.data);
    DISP3DCNT_Fog_Color_Alpha = DSReg(0x0060, 6, 6, 1, 0, "readwrite", "DISP3DCNT_Fog_Color_Alpha", Regs_Arm9.data);
    DISP3DCNT_Fog_Master_Enable = DSReg(0x0060, 7, 7, 1, 0, "readwrite", "DISP3DCNT_Fog_Master_Enable", Regs_Arm9.data);
    DISP3DCNT_Fog_Depth_Shift = DSReg(0x0060, 11, 8, 1, 0, "readwrite", "DISP3DCNT_Fog_Depth_Shift", Regs_Arm9.data);
    DISP3DCNT_RDLINES_Underflow = DSReg(0x0060, 12, 12, 1, 0, "readwrite", "DISP3DCNT_RDLINES_Underflow", Regs_Arm9.data);
    DISP3DCNT_RAM_Overflow = DSReg(0x0060, 13, 13, 1, 0, "readwrite", "DISP3DCNT_RAM_Overflow", Regs_Arm9.data);
    DISP3DCNT_Rear_Plane_Mode = DSReg(0x0060, 14, 14, 1, 0, "readwrite", "DISP3DCNT_Rear_Plane_Mode", Regs_Arm9.data);
    DISPCAPCNT = DSReg(0x0064, 31, 0, 1, 0, "writeonly", "DISPCAPCNT", Regs_Arm9.data);
    DISPCAPCNT_EVA = DSReg(0x0064, 4, 0, 1, 0, "writeonly", "DISPCAPCNT_EVA", Regs_Arm9.data);
    DISPCAPCNT_EVB = DSReg(0x0064, 12, 8, 1, 0, "writeonly", "DISPCAPCNT_EVB", Regs_Arm9.data);
    DISPCAPCNT_VRAM_Write_Block = DSReg(0x0064, 17, 16, 1, 0, "writeonly", "DISPCAPCNT_VRAM_Write_Block", Regs_Arm9.data);
    DISPCAPCNT_VRAM_Write_Offset = DSReg(0x0064, 19, 18, 1, 0, "writeonly", "DISPCAPCNT_VRAM_Write_Offset", Regs_Arm9.data);
    DISPCAPCNT_Capture_Size = DSReg(0x0064, 21, 20, 1, 0, "writeonly", "DISPCAPCNT_Capture_Size", Regs_Arm9.data);
    DISPCAPCNT_Source_A = DSReg(0x0064, 24, 24, 1, 0, "writeonly", "DISPCAPCNT_Source_A", Regs_Arm9.data);
    DISPCAPCNT_Source_B = DSReg(0x0064, 25, 25, 1, 0, "writeonly", "DISPCAPCNT_Source_B", Regs_Arm9.data);
    DISPCAPCNT_VRAM_Read_Offset = DSReg(0x0064, 27, 26, 1, 0, "writeonly", "DISPCAPCNT_VRAM_Read_Offset", Regs_Arm9.data);
    DISPCAPCNT_Capture_Source = DSReg(0x0064, 30, 29, 1, 0, "writeonly", "DISPCAPCNT_Capture_Source", Regs_Arm9.data);
    DISPCAPCNT_Capture_Enable = DSReg(0x0064, 31, 31, 1, 0, "writeonly", "DISPCAPCNT_Capture_Enable", Regs_Arm9.data);
    DISP_MMEM_FIFO = DSReg(0x0068, 31, 0, 1, 0, "writeonly", "DISP_MMEM_FIFO", Regs_Arm9.data);
    A_MASTER_BRIGHT = DSReg(0x006C, 15, 0, 1, 0, "writeonly", "A_MASTER_BRIGHT", Regs_Arm9.data);
    A_MASTER_BRIGHT_Factor = DSReg(0x006C, 4, 0, 1, 0, "writeonly", "A_MASTER_BRIGHT_Factor", Regs_Arm9.data);
    A_MASTER_BRIGHT_Mode = DSReg(0x006C, 15, 14, 1, 0, "writeonly", "A_MASTER_BRIGHT_Mode", Regs_Arm9.data);
    B_DISPCNT = DSReg(0x1000, 15, 0, 1, 0, "readwrite", "B_DISPCNT", Regs_Arm9.data);
    B_DISPCNT_BG_Mode = DSReg(0x1000, 2, 0, 1, 0, "readwrite", "B_DISPCNT_BG_Mode", Regs_Arm9.data);
    B_DISPCNT_BG0_2D_3D = DSReg(0x1000, 3, 3, 1, 0, "readwrite", "B_DISPCNT_BG0_2D_3D", Regs_Arm9.data);
    B_DISPCNT_Tile_OBJ_Mapping = DSReg(0x1000, 4, 4, 1, 0, "readwrite", "B_DISPCNT_Tile_OBJ_Mapping", Regs_Arm9.data);
    B_DISPCNT_Bitmap_OBJ_2D_Dim = DSReg(0x1000, 5, 5, 1, 0, "readwrite", "B_DISPCNT_Bitmap_OBJ_2D_Dim", Regs_Arm9.data);
    B_DISPCNT_Bitmap_OBJ_Mapping = DSReg(0x1000, 6, 6, 1, 0, "readwrite", "B_DISPCNT_Bitmap_OBJ_Mapping", Regs_Arm9.data);
    B_DISPCNT_Forced_Blank = DSReg(0x1000, 7, 7, 1, 0, "readwrite", "B_DISPCNT_Forced_Blank", Regs_Arm9.data);
    B_DISPCNT_Screen_Display_BG0 = DSReg(0x1000, 8, 8, 1, 0, "readwrite", "B_DISPCNT_Screen_Display_BG0", Regs_Arm9.data);
    B_DISPCNT_Screen_Display_BG1 = DSReg(0x1000, 9, 9, 1, 0, "readwrite", "B_DISPCNT_Screen_Display_BG1", Regs_Arm9.data);
    B_DISPCNT_Screen_Display_BG2 = DSReg(0x1000, 10, 10, 1, 0, "readwrite", "B_DISPCNT_Screen_Display_BG2", Regs_Arm9.data);
    B_DISPCNT_Screen_Display_BG3 = DSReg(0x1000, 11, 11, 1, 0, "readwrite", "B_DISPCNT_Screen_Display_BG3", Regs_Arm9.data);
    B_DISPCNT_Screen_Display_OBJ = DSReg(0x1000, 12, 12, 1, 0, "readwrite", "B_DISPCNT_Screen_Display_OBJ", Regs_Arm9.data);
    B_DISPCNT_Window_0_Display_Flag = DSReg(0x1000, 13, 13, 1, 0, "readwrite", "B_DISPCNT_Window_0_Display_Flag", Regs_Arm9.data);
    B_DISPCNT_Window_1_Display_Flag = DSReg(0x1000, 14, 14, 1, 0, "readwrite", "B_DISPCNT_Window_1_Display_Flag", Regs_Arm9.data);
    B_DISPCNT_OBJ_Wnd_Display_Flag = DSReg(0x1000, 15, 15, 1, 0, "readwrite", "B_DISPCNT_OBJ_Wnd_Display_Flag", Regs_Arm9.data);
    B_DISPCNT_Display_Mode = DSReg(0x1000, 17, 16, 1, 0, "readwrite", "B_DISPCNT_Display_Mode", Regs_Arm9.data);
    B_DISPCNT_VRAM_block = DSReg(0x1000, 19, 18, 1, 0, "readwrite", "B_DISPCNT_VRAM_block", Regs_Arm9.data);
    B_DISPCNT_Tile_OBJ_1D_Boundary = DSReg(0x1000, 21, 20, 1, 0, "readwrite", "B_DISPCNT_Tile_OBJ_1D_Boundary", Regs_Arm9.data);
    B_DISPCNT_Bitmap_OBJ_1D_Boundary = DSReg(0x1000, 22, 22, 1, 0, "readwrite", "B_DISPCNT_Bitmap_OBJ_1D_Boundary", Regs_Arm9.data);
    B_DISPCNT_OBJ_Process_H_Blank = DSReg(0x1000, 23, 23, 1, 0, "readwrite", "B_DISPCNT_OBJ_Process_H_Blank", Regs_Arm9.data);
    B_DISPCNT_Character_Base = DSReg(0x1000, 26, 24, 1, 0, "readwrite", "B_DISPCNT_Character_Base", Regs_Arm9.data);
    B_DISPCNT_Screen_Base = DSReg(0x1000, 29, 27, 1, 0, "readwrite", "B_DISPCNT_Screen_Base", Regs_Arm9.data);
    B_DISPCNT_BG_Extended_Palettes = DSReg(0x1000, 30, 30, 1, 0, "readwrite", "B_DISPCNT_BG_Extended_Palettes", Regs_Arm9.data);
    B_DISPCNT_OBJ_Extended_Palettes = DSReg(0x1000, 31, 31, 1, 0, "readwrite", "B_DISPCNT_OBJ_Extended_Palettes", Regs_Arm9.data);
    B_BG0CNT = DSReg(0x1008, 15, 0, 1, 0, "writeonly", "B_BG0CNT", Regs_Arm9.data);
    B_BG0CNT_BG_Priority = DSReg(0x1008, 1, 0, 1, 0, "readwrite", "B_BG0CNT_BG_Priority", Regs_Arm9.data);
    B_BG0CNT_Character_Base_Block = DSReg(0x1008, 5, 2, 1, 0, "readwrite", "B_BG0CNT_Character_Base_Block", Regs_Arm9.data);
    B_BG0CNT_Mosaic = DSReg(0x1008, 6, 6, 1, 0, "readwrite", "B_BG0CNT_Mosaic", Regs_Arm9.data);
    B_BG0CNT_Colors_Palettes = DSReg(0x1008, 7, 7, 1, 0, "readwrite", "B_BG0CNT_Colors_Palettes", Regs_Arm9.data);
    B_BG0CNT_Screen_Base_Block = DSReg(0x1008, 12, 8, 1, 0, "readwrite", "B_BG0CNT_Screen_Base_Block", Regs_Arm9.data);
    B_BG0CNT_Ext_Palette_Slot = DSReg(0x1008, 13, 13, 1, 0, "readwrite", "B_BG0CNT_Ext_Palette_Slot", Regs_Arm9.data);
    B_BG0CNT_Screen_Size = DSReg(0x1008, 15, 14, 1, 0, "readwrite", "B_BG0CNT_Screen_Size", Regs_Arm9.data);
    B_BG1CNT = DSReg(0x1008, 31, 16, 1, 0, "writeonly", "B_BG1CNT", Regs_Arm9.data);
    B_BG1CNT_BG_Priority = DSReg(0x1008, 17, 16, 1, 0, "readwrite", "B_BG1CNT_BG_Priority", Regs_Arm9.data);
    B_BG1CNT_Character_Base_Block = DSReg(0x1008, 21, 18, 1, 0, "readwrite", "B_BG1CNT_Character_Base_Block", Regs_Arm9.data);
    B_BG1CNT_Mosaic = DSReg(0x1008, 22, 22, 1, 0, "readwrite", "B_BG1CNT_Mosaic", Regs_Arm9.data);
    B_BG1CNT_Colors_Palettes = DSReg(0x1008, 23, 23, 1, 0, "readwrite", "B_BG1CNT_Colors_Palettes", Regs_Arm9.data);
    B_BG1CNT_Screen_Base_Block = DSReg(0x1008, 28, 24, 1, 0, "readwrite", "B_BG1CNT_Screen_Base_Block", Regs_Arm9.data);
    B_BG1CNT_Ext_Palette_Slot = DSReg(0x1008, 29, 29, 1, 0, "readwrite", "B_BG1CNT_Ext_Palette_Slot", Regs_Arm9.data);
    B_BG1CNT_Screen_Size = DSReg(0x1008, 31, 30, 1, 0, "readwrite", "B_BG1CNT_Screen_Size", Regs_Arm9.data);
    B_BG2CNT = DSReg(0x100C, 15, 0, 1, 0, "readwrite", "B_BG2CNT", Regs_Arm9.data);
    B_BG2CNT_BG_Priority = DSReg(0x100C, 1, 0, 1, 0, "readwrite", "B_BG2CNT_BG_Priority", Regs_Arm9.data);
    B_BG2CNT_Character_Base_Block = DSReg(0x100C, 5, 2, 1, 0, "readwrite", "B_BG2CNT_Character_Base_Block", Regs_Arm9.data);
    B_BG2CNT_Mosaic = DSReg(0x100C, 6, 6, 1, 0, "readwrite", "B_BG2CNT_Mosaic", Regs_Arm9.data);
    B_BG2CNT_Colors_Palettes = DSReg(0x100C, 7, 7, 1, 0, "readwrite", "B_BG2CNT_Colors_Palettes", Regs_Arm9.data);
    B_BG2CNT_Screen_Base_Block = DSReg(0x100C, 12, 8, 1, 0, "readwrite", "B_BG2CNT_Screen_Base_Block", Regs_Arm9.data);
    B_BG2CNT_Display_Area_Overflow = DSReg(0x100C, 13, 13, 1, 0, "readwrite", "B_BG2CNT_Display_Area_Overflow", Regs_Arm9.data);
    B_BG2CNT_Screen_Size = DSReg(0x100C, 15, 14, 1, 0, "readwrite", "B_BG2CNT_Screen_Size", Regs_Arm9.data);
    B_BG3CNT = DSReg(0x100C, 31, 16, 1, 0, "readwrite", "B_BG3CNT", Regs_Arm9.data);
    B_BG3CNT_BG_Priority = DSReg(0x100C, 17, 16, 1, 0, "readwrite", "B_BG3CNT_BG_Priority", Regs_Arm9.data);
    B_BG3CNT_Character_Base_Block = DSReg(0x100C, 21, 18, 1, 0, "readwrite", "B_BG3CNT_Character_Base_Block", Regs_Arm9.data);
    B_BG3CNT_Mosaic = DSReg(0x100C, 22, 22, 1, 0, "readwrite", "B_BG3CNT_Mosaic", Regs_Arm9.data);
    B_BG3CNT_Colors_Palettes = DSReg(0x100C, 23, 23, 1, 0, "readwrite", "B_BG3CNT_Colors_Palettes", Regs_Arm9.data);
    B_BG3CNT_Screen_Base_Block = DSReg(0x100C, 28, 24, 1, 0, "readwrite", "B_BG3CNT_Screen_Base_Block", Regs_Arm9.data);
    B_BG3CNT_Display_Area_Overflow = DSReg(0x100C, 29, 29, 1, 0, "readwrite", "B_BG3CNT_Display_Area_Overflow", Regs_Arm9.data);
    B_BG3CNT_Screen_Size = DSReg(0x100C, 31, 30, 1, 0, "readwrite", "B_BG3CNT_Screen_Size", Regs_Arm9.data);
    B_BG0HOFS = DSReg(0x1010, 15, 0, 1, 0, "writeonly", "B_BG0HOFS", Regs_Arm9.data);
    B_BG0VOFS = DSReg(0x1010, 31, 16, 1, 0, "writeonly", "B_BG0VOFS", Regs_Arm9.data);
    B_BG1HOFS = DSReg(0x1014, 15, 0, 1, 0, "writeonly", "B_BG1HOFS", Regs_Arm9.data);
    B_BG1VOFS = DSReg(0x1014, 31, 16, 1, 0, "writeonly", "B_BG1VOFS", Regs_Arm9.data);
    B_BG2HOFS = DSReg(0x1018, 15, 0, 1, 0, "writeonly", "B_BG2HOFS", Regs_Arm9.data);
    B_BG2VOFS = DSReg(0x1018, 31, 16, 1, 0, "writeonly", "B_BG2VOFS", Regs_Arm9.data);
    B_BG3HOFS = DSReg(0x101C, 15, 0, 1, 0, "writeonly", "B_BG3HOFS", Regs_Arm9.data);
    B_BG3VOFS = DSReg(0x101C, 31, 16, 1, 0, "writeonly", "B_BG3VOFS", Regs_Arm9.data);
    B_BG2RotScaleParDX = DSReg(0x1020, 15, 0, 1, 256, "writeonly", "B_BG2RotScaleParDX", Regs_Arm9.data);
    B_BG2RotScaleParDMX = DSReg(0x1020, 31, 16, 1, 0, "writeonly", "B_BG2RotScaleParDMX", Regs_Arm9.data);
    B_BG2RotScaleParDY = DSReg(0x1024, 15, 0, 1, 0, "writeonly", "B_BG2RotScaleParDY", Regs_Arm9.data);
    B_BG2RotScaleParDMY = DSReg(0x1024, 31, 16, 1, 256, "writeonly", "B_BG2RotScaleParDMY", Regs_Arm9.data);
    B_BG2RefX = DSReg(0x1028, 27, 0, 1, 0, "writeonly", "B_BG2RefX", Regs_Arm9.data);
    B_BG2RefY = DSReg(0x102C, 27, 0, 1, 0, "writeonly", "B_BG2RefY", Regs_Arm9.data);
    B_BG3RotScaleParDX = DSReg(0x1030, 15, 0, 1, 256, "writeonly", "B_BG3RotScaleParDX", Regs_Arm9.data);
    B_BG3RotScaleParDMX = DSReg(0x1030, 31, 16, 1, 0, "writeonly", "B_BG3RotScaleParDMX", Regs_Arm9.data);
    B_BG3RotScaleParDY = DSReg(0x1034, 15, 0, 1, 0, "writeonly", "B_BG3RotScaleParDY", Regs_Arm9.data);
    B_BG3RotScaleParDMY = DSReg(0x1034, 31, 16, 1, 256, "writeonly", "B_BG3RotScaleParDMY", Regs_Arm9.data);
    B_BG3RefX = DSReg(0x1038, 27, 0, 1, 0, "writeonly", "B_BG3RefX", Regs_Arm9.data);
    B_BG3RefY = DSReg(0x103C, 27, 0, 1, 0, "writeonly", "B_BG3RefY", Regs_Arm9.data);
    B_WIN0H = DSReg(0x1040, 15, 0, 1, 0, "writeonly", "B_WIN0H", Regs_Arm9.data);
    B_WIN0H_X2 = DSReg(0x1040, 7, 0, 1, 0, "writeonly", "B_WIN0H_X2", Regs_Arm9.data);
    B_WIN0H_X1 = DSReg(0x1040, 15, 8, 1, 0, "writeonly", "B_WIN0H_X1", Regs_Arm9.data);
    B_WIN1H = DSReg(0x1040, 31, 16, 1, 0, "writeonly", "B_WIN1H", Regs_Arm9.data);
    B_WIN1H_X2 = DSReg(0x1040, 23, 16, 1, 0, "writeonly", "B_WIN1H_X2", Regs_Arm9.data);
    B_WIN1H_X1 = DSReg(0x1040, 31, 24, 1, 0, "writeonly", "B_WIN1H_X1", Regs_Arm9.data);
    B_WIN0V = DSReg(0x1044, 15, 0, 1, 0, "writeonly", "B_WIN0V", Regs_Arm9.data);
    B_WIN0V_Y2 = DSReg(0x1044, 7, 0, 1, 0, "writeonly", "B_WIN0V_Y2", Regs_Arm9.data);
    B_WIN0V_Y1 = DSReg(0x1044, 15, 8, 1, 0, "writeonly", "B_WIN0V_Y1", Regs_Arm9.data);
    B_WIN1V = DSReg(0x1044, 31, 16, 1, 0, "writeonly", "B_WIN1V", Regs_Arm9.data);
    B_WIN1V_Y2 = DSReg(0x1044, 23, 16, 1, 0, "writeonly", "B_WIN1V_Y2", Regs_Arm9.data);
    B_WIN1V_Y1 = DSReg(0x1044, 31, 24, 1, 0, "writeonly", "B_WIN1V_Y1", Regs_Arm9.data);
    B_WININ = DSReg(0x1048, 15, 0, 1, 0, "writeonly", "B_WININ", Regs_Arm9.data);
    B_WININ_Window_0_BG0_Enable = DSReg(0x1048, 0, 0, 1, 0, "readwrite", "B_WININ_Window_0_BG0_Enable", Regs_Arm9.data);
    B_WININ_Window_0_BG1_Enable = DSReg(0x1048, 1, 1, 1, 0, "readwrite", "B_WININ_Window_0_BG1_Enable", Regs_Arm9.data);
    B_WININ_Window_0_BG2_Enable = DSReg(0x1048, 2, 2, 1, 0, "readwrite", "B_WININ_Window_0_BG2_Enable", Regs_Arm9.data);
    B_WININ_Window_0_BG3_Enable = DSReg(0x1048, 3, 3, 1, 0, "readwrite", "B_WININ_Window_0_BG3_Enable", Regs_Arm9.data);
    B_WININ_Window_0_OBJ_Enable = DSReg(0x1048, 4, 4, 1, 0, "readwrite", "B_WININ_Window_0_OBJ_Enable", Regs_Arm9.data);
    B_WININ_Window_0_Special_Effect = DSReg(0x1048, 5, 5, 1, 0, "readwrite", "B_WININ_Window_0_Special_Effect", Regs_Arm9.data);
    B_WININ_Window_1_BG0_Enable = DSReg(0x1048, 8, 8, 1, 0, "readwrite", "B_WININ_Window_1_BG0_Enable", Regs_Arm9.data);
    B_WININ_Window_1_BG1_Enable = DSReg(0x1048, 9, 9, 1, 0, "readwrite", "B_WININ_Window_1_BG1_Enable", Regs_Arm9.data);
    B_WININ_Window_1_BG2_Enable = DSReg(0x1048, 10, 10, 1, 0, "readwrite", "B_WININ_Window_1_BG2_Enable", Regs_Arm9.data);
    B_WININ_Window_1_BG3_Enable = DSReg(0x1048, 11, 11, 1, 0, "readwrite", "B_WININ_Window_1_BG3_Enable", Regs_Arm9.data);
    B_WININ_Window_1_OBJ_Enable = DSReg(0x1048, 12, 12, 1, 0, "readwrite", "B_WININ_Window_1_OBJ_Enable", Regs_Arm9.data);
    B_WININ_Window_1_Special_Effect = DSReg(0x1048, 13, 13, 1, 0, "readwrite", "B_WININ_Window_1_Special_Effect", Regs_Arm9.data);
    B_WINOUT = DSReg(0x1048, 31, 16, 1, 0, "writeonly", "B_WINOUT", Regs_Arm9.data);
    B_WINOUT_Outside_BG0_Enable = DSReg(0x1048, 16, 16, 1, 0, "readwrite", "B_WINOUT_Outside_BG0_Enable", Regs_Arm9.data);
    B_WINOUT_Outside_BG1_Enable = DSReg(0x1048, 17, 17, 1, 0, "readwrite", "B_WINOUT_Outside_BG1_Enable", Regs_Arm9.data);
    B_WINOUT_Outside_BG2_Enable = DSReg(0x1048, 18, 18, 1, 0, "readwrite", "B_WINOUT_Outside_BG2_Enable", Regs_Arm9.data);
    B_WINOUT_Outside_BG3_Enable = DSReg(0x1048, 19, 19, 1, 0, "readwrite", "B_WINOUT_Outside_BG3_Enable", Regs_Arm9.data);
    B_WINOUT_Outside_OBJ_Enable = DSReg(0x1048, 20, 20, 1, 0, "readwrite", "B_WINOUT_Outside_OBJ_Enable", Regs_Arm9.data);
    B_WINOUT_Outside_Special_Effect = DSReg(0x1048, 21, 21, 1, 0, "readwrite", "B_WINOUT_Outside_Special_Effect", Regs_Arm9.data);
    B_WINOUT_Objwnd_BG0_Enable = DSReg(0x1048, 24, 24, 1, 0, "readwrite", "B_WINOUT_Objwnd_BG0_Enable", Regs_Arm9.data);
    B_WINOUT_Objwnd_BG1_Enable = DSReg(0x1048, 25, 25, 1, 0, "readwrite", "B_WINOUT_Objwnd_BG1_Enable", Regs_Arm9.data);
    B_WINOUT_Objwnd_BG2_Enable = DSReg(0x1048, 26, 26, 1, 0, "readwrite", "B_WINOUT_Objwnd_BG2_Enable", Regs_Arm9.data);
    B_WINOUT_Objwnd_BG3_Enable = DSReg(0x1048, 27, 27, 1, 0, "readwrite", "B_WINOUT_Objwnd_BG3_Enable", Regs_Arm9.data);
    B_WINOUT_Objwnd_OBJ_Enable = DSReg(0x1048, 28, 28, 1, 0, "readwrite", "B_WINOUT_Objwnd_OBJ_Enable", Regs_Arm9.data);
    B_WINOUT_Objwnd_Special_Effect = DSReg(0x1048, 29, 29, 1, 0, "readwrite", "B_WINOUT_Objwnd_Special_Effect", Regs_Arm9.data);
    B_MOSAIC = DSReg(0x104C, 15, 0, 1, 0, "writeonly", "B_MOSAIC", Regs_Arm9.data);
    B_MOSAIC_BG_Mosaic_H_Size = DSReg(0x104C, 3, 0, 1, 0, "writeonly", "B_MOSAIC_BG_Mosaic_H_Size", Regs_Arm9.data);
    B_MOSAIC_BG_Mosaic_V_Size = DSReg(0x104C, 7, 4, 1, 0, "writeonly", "B_MOSAIC_BG_Mosaic_V_Size", Regs_Arm9.data);
    B_MOSAIC_OBJ_Mosaic_H_Size = DSReg(0x104C, 11, 8, 1, 0, "writeonly", "B_MOSAIC_OBJ_Mosaic_H_Size", Regs_Arm9.data);
    B_MOSAIC_OBJ_Mosaic_V_Size = DSReg(0x104C, 15, 12, 1, 0, "writeonly", "B_MOSAIC_OBJ_Mosaic_V_Size", Regs_Arm9.data);
    B_BLDCNT = DSReg(0x1050, 13, 0, 1, 0, "readwrite", "B_BLDCNT", Regs_Arm9.data);
    B_BLDCNT_BG0_1st_Target_Pixel = DSReg(0x1050, 0, 0, 1, 0, "readwrite", "B_BLDCNT_BG0_1st_Target_Pixel", Regs_Arm9.data);
    B_BLDCNT_BG1_1st_Target_Pixel = DSReg(0x1050, 1, 1, 1, 0, "readwrite", "B_BLDCNT_BG1_1st_Target_Pixel", Regs_Arm9.data);
    B_BLDCNT_BG2_1st_Target_Pixel = DSReg(0x1050, 2, 2, 1, 0, "readwrite", "B_BLDCNT_BG2_1st_Target_Pixel", Regs_Arm9.data);
    B_BLDCNT_BG3_1st_Target_Pixel = DSReg(0x1050, 3, 3, 1, 0, "readwrite", "B_BLDCNT_BG3_1st_Target_Pixel", Regs_Arm9.data);
    B_BLDCNT_OBJ_1st_Target_Pixel = DSReg(0x1050, 4, 4, 1, 0, "readwrite", "B_BLDCNT_OBJ_1st_Target_Pixel", Regs_Arm9.data);
    B_BLDCNT_BD_1st_Target_Pixel = DSReg(0x1050, 5, 5, 1, 0, "readwrite", "B_BLDCNT_BD_1st_Target_Pixel", Regs_Arm9.data);
    B_BLDCNT_Color_Special_Effect = DSReg(0x1050, 7, 6, 1, 0, "readwrite", "B_BLDCNT_Color_Special_Effect", Regs_Arm9.data);
    B_BLDCNT_BG0_2nd_Target_Pixel = DSReg(0x1050, 8, 8, 1, 0, "readwrite", "B_BLDCNT_BG0_2nd_Target_Pixel", Regs_Arm9.data);
    B_BLDCNT_BG1_2nd_Target_Pixel = DSReg(0x1050, 9, 9, 1, 0, "readwrite", "B_BLDCNT_BG1_2nd_Target_Pixel", Regs_Arm9.data);
    B_BLDCNT_BG2_2nd_Target_Pixel = DSReg(0x1050, 10, 10, 1, 0, "readwrite", "B_BLDCNT_BG2_2nd_Target_Pixel", Regs_Arm9.data);
    B_BLDCNT_BG3_2nd_Target_Pixel = DSReg(0x1050, 11, 11, 1, 0, "readwrite", "B_BLDCNT_BG3_2nd_Target_Pixel", Regs_Arm9.data);
    B_BLDCNT_OBJ_2nd_Target_Pixel = DSReg(0x1050, 12, 12, 1, 0, "readwrite", "B_BLDCNT_OBJ_2nd_Target_Pixel", Regs_Arm9.data);
    B_BLDCNT_BD_2nd_Target_Pixel = DSReg(0x1050, 13, 13, 1, 0, "readwrite", "B_BLDCNT_BD_2nd_Target_Pixel", Regs_Arm9.data);
    B_BLDALPHA = DSReg(0x1050, 28, 16, 1, 0, "writeonly", "B_BLDALPHA", Regs_Arm9.data);
    B_BLDALPHA_EVA_Coefficient = DSReg(0x1050, 20, 16, 1, 0, "readwrite", "B_BLDALPHA_EVA_Coefficient", Regs_Arm9.data);
    B_BLDALPHA_EVB_Coefficient = DSReg(0x1050, 28, 24, 1, 0, "readwrite", "B_BLDALPHA_EVB_Coefficient", Regs_Arm9.data);
    B_BLDY = DSReg(0x1054, 4, 0, 1, 0, "writeonly", "B_BLDY", Regs_Arm9.data);
    B_MASTER_BRIGHT = DSReg(0x106C, 15, 0, 1, 0, "writeonly", "B_MASTER_BRIGHT", Regs_Arm9.data);
    B_MASTER_BRIGHT_Factor = DSReg(0x106C, 4, 0, 1, 0, "writeonly", "B_MASTER_BRIGHT_Factor", Regs_Arm9.data);
    B_MASTER_BRIGHT_Mode = DSReg(0x106C, 15, 14, 1, 0, "writeonly", "B_MASTER_BRIGHT_Mode", Regs_Arm9.data);
}

RegSect_dma9::RegSect_dma9()
{
    DMA0SAD = DSReg(0xB0, 31, 0, 1, 0, "readwrite", "DMA0SAD", Regs_Arm9.data);
    DMA0DAD = DSReg(0xB4, 31, 0, 1, 0, "readwrite", "DMA0DAD", Regs_Arm9.data);
    DMA0CNT_L = DSReg(0xB8, 20, 0, 1, 0, "readwrite", "DMA0CNT_L", Regs_Arm9.data);
    DMA0CNT_H = DSReg(0xB8, 31, 16, 1, 0, "readwrite", "DMA0CNT_H", Regs_Arm9.data);
    DMA0CNT_H_Dest_Addr_Control = DSReg(0xB8, 22, 21, 1, 0, "readwrite", "DMA0CNT_H_Dest_Addr_Control", Regs_Arm9.data);
    DMA0CNT_H_Source_Adr_Control = DSReg(0xB8, 24, 23, 1, 0, "readwrite", "DMA0CNT_H_Source_Adr_Control", Regs_Arm9.data);
    DMA0CNT_H_DMA_Repeat = DSReg(0xB8, 25, 25, 1, 0, "readwrite", "DMA0CNT_H_DMA_Repeat", Regs_Arm9.data);
    DMA0CNT_H_DMA_Transfer_Type = DSReg(0xB8, 26, 26, 1, 0, "readwrite", "DMA0CNT_H_DMA_Transfer_Type", Regs_Arm9.data);
    DMA0CNT_H_DMA_Start_Timing = DSReg(0xB8, 29, 27, 1, 0, "readwrite", "DMA0CNT_H_DMA_Start_Timing", Regs_Arm9.data);
    DMA0CNT_H_IRQ_on = DSReg(0xB8, 30, 30, 1, 0, "readwrite", "DMA0CNT_H_IRQ_on", Regs_Arm9.data);
    DMA0CNT_H_DMA_Enable = DSReg(0xB8, 31, 31, 1, 0, "readwrite", "DMA0CNT_H_DMA_Enable", Regs_Arm9.data);
    DMA1SAD = DSReg(0xBC, 31, 0, 1, 0, "readwrite", "DMA1SAD", Regs_Arm9.data);
    DMA1DAD = DSReg(0xC0, 31, 0, 1, 0, "readwrite", "DMA1DAD", Regs_Arm9.data);
    DMA1CNT_L = DSReg(0xC4, 20, 0, 1, 0, "readwrite", "DMA1CNT_L", Regs_Arm9.data);
    DMA1CNT_H = DSReg(0xC4, 31, 16, 1, 0, "readwrite", "DMA1CNT_H", Regs_Arm9.data);
    DMA1CNT_H_Dest_Addr_Control = DSReg(0xC4, 22, 21, 1, 0, "readwrite", "DMA1CNT_H_Dest_Addr_Control", Regs_Arm9.data);
    DMA1CNT_H_Source_Adr_Control = DSReg(0xC4, 24, 23, 1, 0, "readwrite", "DMA1CNT_H_Source_Adr_Control", Regs_Arm9.data);
    DMA1CNT_H_DMA_Repeat = DSReg(0xC4, 25, 25, 1, 0, "readwrite", "DMA1CNT_H_DMA_Repeat", Regs_Arm9.data);
    DMA1CNT_H_DMA_Transfer_Type = DSReg(0xC4, 26, 26, 1, 0, "readwrite", "DMA1CNT_H_DMA_Transfer_Type", Regs_Arm9.data);
    DMA1CNT_H_DMA_Start_Timing = DSReg(0xC4, 29, 27, 1, 0, "readwrite", "DMA1CNT_H_DMA_Start_Timing", Regs_Arm9.data);
    DMA1CNT_H_IRQ_on = DSReg(0xC4, 30, 30, 1, 0, "readwrite", "DMA1CNT_H_IRQ_on", Regs_Arm9.data);
    DMA1CNT_H_DMA_Enable = DSReg(0xC4, 31, 31, 1, 0, "readwrite", "DMA1CNT_H_DMA_Enable", Regs_Arm9.data);
    DMA2SAD = DSReg(0xC8, 31, 0, 1, 0, "readwrite", "DMA2SAD", Regs_Arm9.data);
    DMA2DAD = DSReg(0xCC, 31, 0, 1, 0, "readwrite", "DMA2DAD", Regs_Arm9.data);
    DMA2CNT_L = DSReg(0xD0, 20, 0, 1, 0, "readwrite", "DMA2CNT_L", Regs_Arm9.data);
    DMA2CNT_H = DSReg(0xD0, 31, 16, 1, 0, "readwrite", "DMA2CNT_H", Regs_Arm9.data);
    DMA2CNT_H_Dest_Addr_Control = DSReg(0xD0, 22, 21, 1, 0, "readwrite", "DMA2CNT_H_Dest_Addr_Control", Regs_Arm9.data);
    DMA2CNT_H_Source_Adr_Control = DSReg(0xD0, 24, 23, 1, 0, "readwrite", "DMA2CNT_H_Source_Adr_Control", Regs_Arm9.data);
    DMA2CNT_H_DMA_Repeat = DSReg(0xD0, 25, 25, 1, 0, "readwrite", "DMA2CNT_H_DMA_Repeat", Regs_Arm9.data);
    DMA2CNT_H_DMA_Transfer_Type = DSReg(0xD0, 26, 26, 1, 0, "readwrite", "DMA2CNT_H_DMA_Transfer_Type", Regs_Arm9.data);
    DMA2CNT_H_DMA_Start_Timing = DSReg(0xD0, 29, 27, 1, 0, "readwrite", "DMA2CNT_H_DMA_Start_Timing", Regs_Arm9.data);
    DMA2CNT_H_IRQ_on = DSReg(0xD0, 30, 30, 1, 0, "readwrite", "DMA2CNT_H_IRQ_on", Regs_Arm9.data);
    DMA2CNT_H_DMA_Enable = DSReg(0xD0, 31, 31, 1, 0, "readwrite", "DMA2CNT_H_DMA_Enable", Regs_Arm9.data);
    DMA3SAD = DSReg(0xD4, 31, 0, 1, 0, "readwrite", "DMA3SAD", Regs_Arm9.data);
    DMA3DAD = DSReg(0xD8, 31, 0, 1, 0, "readwrite", "DMA3DAD", Regs_Arm9.data);
    DMA3CNT_L = DSReg(0xDC, 20, 0, 1, 0, "readwrite", "DMA3CNT_L", Regs_Arm9.data);
    DMA3CNT_H = DSReg(0xDC, 31, 16, 1, 0, "readwrite", "DMA3CNT_H", Regs_Arm9.data);
    DMA3CNT_H_Dest_Addr_Control = DSReg(0xDC, 22, 21, 1, 0, "readwrite", "DMA3CNT_H_Dest_Addr_Control", Regs_Arm9.data);
    DMA3CNT_H_Source_Adr_Control = DSReg(0xDC, 24, 23, 1, 0, "readwrite", "DMA3CNT_H_Source_Adr_Control", Regs_Arm9.data);
    DMA3CNT_H_DMA_Repeat = DSReg(0xDC, 25, 25, 1, 0, "readwrite", "DMA3CNT_H_DMA_Repeat", Regs_Arm9.data);
    DMA3CNT_H_DMA_Transfer_Type = DSReg(0xDC, 26, 26, 1, 0, "readwrite", "DMA3CNT_H_DMA_Transfer_Type", Regs_Arm9.data);
    DMA3CNT_H_Game_Pak_DRQ = DSReg(0xDC, 27, 27, 1, 0, "readwrite", "DMA3CNT_H_Game_Pak_DRQ", Regs_Arm9.data);
    DMA3CNT_H_DMA_Start_Timing = DSReg(0xDC, 29, 27, 1, 0, "readwrite", "DMA3CNT_H_DMA_Start_Timing", Regs_Arm9.data);
    DMA3CNT_H_IRQ_on = DSReg(0xDC, 30, 30, 1, 0, "readwrite", "DMA3CNT_H_IRQ_on", Regs_Arm9.data);
    DMA3CNT_H_DMA_Enable = DSReg(0xDC, 31, 31, 1, 0, "readwrite", "DMA3CNT_H_DMA_Enable", Regs_Arm9.data);
    DMA0FILL = DSReg(0xE0, 31, 0, 1, 0, "readwrite", "DMA0FILL", Regs_Arm9.data);
    DMA1FILL = DSReg(0xE4, 31, 0, 1, 0, "readwrite", "DMA1FILL", Regs_Arm9.data);
    DMA2FILL = DSReg(0xE8, 31, 0, 1, 0, "readwrite", "DMA2FILL", Regs_Arm9.data);
    DMA3FILL = DSReg(0xEC, 31, 0, 1, 0, "readwrite", "DMA3FILL", Regs_Arm9.data);
}

RegSect_timer9::RegSect_timer9()
{
    TM0CNT_L = DSReg(0x100, 15, 0, 1, 0, "readwrite", "TM0CNT_L", Regs_Arm9.data);
    TM0CNT_H = DSReg(0x100, 31, 16, 1, 0, "readwrite", "TM0CNT_H", Regs_Arm9.data);
    TM0CNT_H_Prescaler = DSReg(0x100, 17, 16, 1, 0, "readwrite", "TM0CNT_H_Prescaler", Regs_Arm9.data);
    TM0CNT_H_Count_up = DSReg(0x100, 18, 18, 1, 0, "readwrite", "TM0CNT_H_Count_up", Regs_Arm9.data);
    TM0CNT_H_Timer_IRQ_Enable = DSReg(0x100, 22, 22, 1, 0, "readwrite", "TM0CNT_H_Timer_IRQ_Enable", Regs_Arm9.data);
    TM0CNT_H_Timer_Start_Stop = DSReg(0x100, 23, 23, 1, 0, "readwrite", "TM0CNT_H_Timer_Start_Stop", Regs_Arm9.data);
    TM1CNT_L = DSReg(0x104, 15, 0, 1, 0, "readwrite", "TM1CNT_L", Regs_Arm9.data);
    TM1CNT_H = DSReg(0x104, 31, 16, 1, 0, "readwrite", "TM1CNT_H", Regs_Arm9.data);
    TM1CNT_H_Prescaler = DSReg(0x104, 17, 16, 1, 0, "readwrite", "TM1CNT_H_Prescaler", Regs_Arm9.data);
    TM1CNT_H_Count_up = DSReg(0x104, 18, 18, 1, 0, "readwrite", "TM1CNT_H_Count_up", Regs_Arm9.data);
    TM1CNT_H_Timer_IRQ_Enable = DSReg(0x104, 22, 22, 1, 0, "readwrite", "TM1CNT_H_Timer_IRQ_Enable", Regs_Arm9.data);
    TM1CNT_H_Timer_Start_Stop = DSReg(0x104, 23, 23, 1, 0, "readwrite", "TM1CNT_H_Timer_Start_Stop", Regs_Arm9.data);
    TM2CNT_L = DSReg(0x108, 15, 0, 1, 0, "readwrite", "TM2CNT_L", Regs_Arm9.data);
    TM2CNT_H = DSReg(0x108, 31, 16, 1, 0, "readwrite", "TM2CNT_H", Regs_Arm9.data);
    TM2CNT_H_Prescaler = DSReg(0x108, 17, 16, 1, 0, "readwrite", "TM2CNT_H_Prescaler", Regs_Arm9.data);
    TM2CNT_H_Count_up = DSReg(0x108, 18, 18, 1, 0, "readwrite", "TM2CNT_H_Count_up", Regs_Arm9.data);
    TM2CNT_H_Timer_IRQ_Enable = DSReg(0x108, 22, 22, 1, 0, "readwrite", "TM2CNT_H_Timer_IRQ_Enable", Regs_Arm9.data);
    TM2CNT_H_Timer_Start_Stop = DSReg(0x108, 23, 23, 1, 0, "readwrite", "TM2CNT_H_Timer_Start_Stop", Regs_Arm9.data);
    TM3CNT_L = DSReg(0x10C, 15, 0, 1, 0, "readwrite", "TM3CNT_L", Regs_Arm9.data);
    TM3CNT_H = DSReg(0x10C, 31, 16, 1, 0, "readwrite", "TM3CNT_H", Regs_Arm9.data);
    TM3CNT_H_Prescaler = DSReg(0x10C, 17, 16, 1, 0, "readwrite", "TM3CNT_H_Prescaler", Regs_Arm9.data);
    TM3CNT_H_Count_up = DSReg(0x10C, 18, 18, 1, 0, "readwrite", "TM3CNT_H_Count_up", Regs_Arm9.data);
    TM3CNT_H_Timer_IRQ_Enable = DSReg(0x10C, 22, 22, 1, 0, "readwrite", "TM3CNT_H_Timer_IRQ_Enable", Regs_Arm9.data);
    TM3CNT_H_Timer_Start_Stop = DSReg(0x10C, 23, 23, 1, 0, "readwrite", "TM3CNT_H_Timer_Start_Stop", Regs_Arm9.data);
}

RegSect_keypad9::RegSect_keypad9()
{
    KEYINPUT = DSReg(0x130, 15, 0, 1, 0, "readonly", "KEYINPUT", Regs_Arm9.data);
    KEYCNT = DSReg(0x130, 31, 16, 1, 0, "readwrite", "KEYCNT", Regs_Arm9.data);
}

RegSect_system9::RegSect_system9()
{
    IPCSYNC = DSReg(0x180, 15, 0, 1, 0, "writeonly", "IPCSYNC", Regs_Arm9.data);
    IPCSYNC_Data_from_IPCSYNC = DSReg(0x180, 3, 0, 1, 0, "readonly", "IPCSYNC_Data_from_IPCSYNC", Regs_Arm9.data);
    IPCSYNC_Data_to_IPCSYNC = DSReg(0x180, 11, 8, 1, 0, "readwrite", "IPCSYNC_Data_to_IPCSYNC", Regs_Arm9.data);
    IPCSYNC_IRQ = DSReg(0x180, 13, 13, 1, 0, "readonly", "IPCSYNC_IRQ", Regs_Arm9.data);
    IPCSYNC_Ena_IRQ_from_remote_CPU = DSReg(0x180, 14, 14, 1, 0, "readwrite", "IPCSYNC_Ena_IRQ_from_remote_CPU", Regs_Arm9.data);
    IPCFIFOCNT = DSReg(0x184, 15, 0, 1, 0, "writeonly", "IPCFIFOCNT", Regs_Arm9.data);
    IPCFIFOCNT_Send_Fifo_Empty_Status = DSReg(0x184, 0, 0, 1, 0, "readonly", "IPCFIFOCNT_Send_Fifo_Empty_Status", Regs_Arm9.data);
    IPCFIFOCNT_Send_Fifo_Full_Status = DSReg(0x184, 1, 1, 1, 0, "readonly", "IPCFIFOCNT_Send_Fifo_Full_Status", Regs_Arm9.data);
    IPCFIFOCNT_Send_Fifo_Empty_IRQ = DSReg(0x184, 2, 2, 1, 0, "readwrite", "IPCFIFOCNT_Send_Fifo_Empty_IRQ", Regs_Arm9.data);
    IPCFIFOCNT_Send_Fifo_Clear = DSReg(0x184, 3, 3, 1, 0, "writeonly", "IPCFIFOCNT_Send_Fifo_Clear", Regs_Arm9.data);
    IPCFIFOCNT_Receive_Fifo_Empty = DSReg(0x184, 8, 8, 1, 0, "readonly", "IPCFIFOCNT_Receive_Fifo_Empty", Regs_Arm9.data);
    IPCFIFOCNT_Receive_Fifo_Full = DSReg(0x184, 9, 9, 1, 0, "readonly", "IPCFIFOCNT_Receive_Fifo_Full", Regs_Arm9.data);
    IPCFIFOCNT_Receive_Fifo_Not_Empty_IRQ = DSReg(0x184, 10, 10, 1, 0, "readwrite", "IPCFIFOCNT_Receive_Fifo_Not_Empty_IRQ", Regs_Arm9.data);
    IPCFIFOCNT_Error_Read_Empty_Send_Full = DSReg(0x184, 14, 14, 1, 0, "readwrite", "IPCFIFOCNT_Error_Read_Empty_Send_Full", Regs_Arm9.data);
    IPCFIFOCNT_Enable_Send_Receive_Fifo = DSReg(0x184, 15, 15, 1, 0, "readwrite", "IPCFIFOCNT_Enable_Send_Receive_Fifo", Regs_Arm9.data);
    IPCFIFOSEND = DSReg(0x188, 31, 0, 1, 0, "writeonly", "IPCFIFOSEND", Regs_Arm9.data);
    IPCFIFORECV = DSReg(0xFFF, 31, 0, 1, 0, "readonly", "IPCFIFORECV", Regs_Arm9.data);
    AUXSPICNT = DSReg(0x1A0, 23, 0, 1, 0, "writeonly", "AUXSPICNT", Regs_Arm9.data);
    AUXSPICNT_SPI_Baudrate = DSReg(0x1A0, 1, 0, 1, 0, "readwrite", "AUXSPICNT_SPI_Baudrate", Regs_Arm9.data);
    AUXSPICNT_SPI_Hold_Chipselect = DSReg(0x1A0, 6, 6, 1, 0, "readwrite", "AUXSPICNT_SPI_Hold_Chipselect", Regs_Arm9.data);
    AUXSPICNT_SPI_Busy = DSReg(0x1A0, 7, 7, 1, 0, "readonly", "AUXSPICNT_SPI_Busy", Regs_Arm9.data);
    AUXSPICNT_NDS_Slot_Mode = DSReg(0x1A0, 13, 13, 1, 0, "readwrite", "AUXSPICNT_NDS_Slot_Mode", Regs_Arm9.data);
    AUXSPICNT_Transfer_Ready_IRQ = DSReg(0x1A0, 14, 14, 1, 0, "readwrite", "AUXSPICNT_Transfer_Ready_IRQ", Regs_Arm9.data);
    AUXSPICNT_NDS_Slot_Enable = DSReg(0x1A0, 15, 15, 1, 0, "readwrite", "AUXSPICNT_NDS_Slot_Enable", Regs_Arm9.data);
    AUXSPIDATA = DSReg(0x1A0, 23, 16, 1, 0, "readwrite", "AUXSPIDATA", Regs_Arm9.data);
    ROMCTRL = DSReg(0x1A4, 31, 0, 1, 0, "writeonly", "ROMCTRL", Regs_Arm9.data);
    ROMCTRL_KEY1_gap1_length = DSReg(0x1A4, 12, 0, 1, 0, "readwrite", "ROMCTRL_KEY1_gap1_length", Regs_Arm9.data);
    ROMCTRL_KEY2_encrypt_data = DSReg(0x1A4, 13, 13, 1, 0, "readwrite", "ROMCTRL_KEY2_encrypt_data", Regs_Arm9.data);
    ROMCTRL_SE = DSReg(0x1A4, 14, 14, 1, 0, "readwrite", "ROMCTRL_SE", Regs_Arm9.data);
    ROMCTRL_KEY2_Apply_Seed = DSReg(0x1A4, 15, 15, 1, 0, "readwrite", "ROMCTRL_KEY2_Apply_Seed", Regs_Arm9.data);
    ROMCTRL_KEY1_gap2_length = DSReg(0x1A4, 21, 16, 1, 0, "readwrite", "ROMCTRL_KEY1_gap2_length", Regs_Arm9.data);
    ROMCTRL_KEY2_encrypt_cmd = DSReg(0x1A4, 22, 22, 1, 0, "readwrite", "ROMCTRL_KEY2_encrypt_cmd", Regs_Arm9.data);
    ROMCTRL_Data_Word_Status = DSReg(0x1A4, 23, 23, 1, 0, "readwrite", "ROMCTRL_Data_Word_Status", Regs_Arm9.data);
    ROMCTRL_Data_Block_size = DSReg(0x1A4, 26, 24, 1, 0, "readwrite", "ROMCTRL_Data_Block_size", Regs_Arm9.data);
    ROMCTRL_Transfer_CLK_rate = DSReg(0x1A4, 27, 27, 1, 0, "readwrite", "ROMCTRL_Transfer_CLK_rate", Regs_Arm9.data);
    ROMCTRL_KEY1_Gap_CLKs = DSReg(0x1A4, 28, 28, 1, 0, "readwrite", "ROMCTRL_KEY1_Gap_CLKs", Regs_Arm9.data);
    ROMCTRL_RESB_Release_Reset = DSReg(0x1A4, 29, 29, 1, 0, "readwrite", "ROMCTRL_RESB_Release_Reset", Regs_Arm9.data);
    ROMCTRL_WR = DSReg(0x1A4, 30, 30, 1, 0, "readwrite", "ROMCTRL_WR", Regs_Arm9.data);
    ROMCTRL_Block_Start_Status = DSReg(0x1A4, 31, 31, 1, 0, "readwrite", "ROMCTRL_Block_Start_Status", Regs_Arm9.data);
    Gamecard_bus_Command_1 = DSReg(0x1A8, 31, 0, 1, 0, "writeonly", "Gamecard_bus_Command_1", Regs_Arm9.data);
    Gamecard_bus_Command_2 = DSReg(0x1AC, 31, 0, 1, 0, "writeonly", "Gamecard_bus_Command_2", Regs_Arm9.data);
    Gamecard_bus_DataIn = DSReg(0xFFF, 31, 0, 1, 0, "readonly", "Gamecard_bus_DataIn", Regs_Arm9.data);
    Encryption_Seed_0_Lower = DSReg(0x1B0, 31, 0, 1, 0, "writeonly", "Encryption_Seed_0_Lower", Regs_Arm9.data);
    Encryption_Seed_1_Lower = DSReg(0x1B4, 31, 0, 1, 0, "writeonly", "Encryption_Seed_1_Lower", Regs_Arm9.data);
    Encryption_Seed_0_Upper = DSReg(0x1B8, 6, 0, 1, 0, "writeonly", "Encryption_Seed_0_Upper", Regs_Arm9.data);
    Encryption_Seed_1_Upper = DSReg(0x1B8, 22, 16, 1, 0, "writeonly", "Encryption_Seed_1_Upper", Regs_Arm9.data);
    EXMEMCNT = DSReg(0x204, 25, 0, 1, 0, "readwrite", "EXMEMCNT", Regs_Arm9.data);
    EXMEMCNT_GBASlot_SRAM_Access_Time = DSReg(0x204, 1, 0, 1, 0, "readwrite", "EXMEMCNT_GBASlot_SRAM_Access_Time", Regs_Arm9.data);
    EXMEMCNT_GBASlot_ROM_1st_Access_Time = DSReg(0x204, 3, 2, 1, 0, "readwrite", "EXMEMCNT_GBASlot_ROM_1st_Access_Time", Regs_Arm9.data);
    EXMEMCNT_GBASlot_ROM_2nd_Access_Time = DSReg(0x204, 4, 4, 1, 0, "readwrite", "EXMEMCNT_GBASlot_ROM_2nd_Access_Time", Regs_Arm9.data);
    EXMEMCNT_GBASlot_PHI_pin_out = DSReg(0x204, 6, 5, 1, 0, "readwrite", "EXMEMCNT_GBASlot_PHI_pin_out", Regs_Arm9.data);
    EXMEMCNT_GBASlot_Access_Rights = DSReg(0x204, 7, 7, 1, 0, "readwrite", "EXMEMCNT_GBASlot_Access_Rights", Regs_Arm9.data);
    EXMEMCNT_NDSSlot_Access_Rights = DSReg(0x204, 11, 11, 1, 0, "readwrite", "EXMEMCNT_NDSSlot_Access_Rights", Regs_Arm9.data);
    EXMEMCNT_SET = DSReg(0x204, 13, 13, 1, 0, "readwrite", "EXMEMCNT_SET", Regs_Arm9.data);
    EXMEMCNT_MainMem_Interface_Mode = DSReg(0x204, 14, 14, 1, 0, "readonly", "EXMEMCNT_MainMem_Interface_Mode", Regs_Arm9.data);
    EXMEMCNT_MainMem_Access_Priority = DSReg(0x204, 15, 15, 1, 0, "readwrite", "EXMEMCNT_MainMem_Access_Priority", Regs_Arm9.data);
    IME = DSReg(0x208, 31, 0, 1, 0, "readwrite", "IME", Regs_Arm9.data);
    IE = DSReg(0x210, 31, 0, 1, 0, "writeonly", "IE", Regs_Arm9.data);
    IE_LCD_V_Blank = DSReg(0x210, 0, 0, 1, 0, "readwrite", "IE_LCD_V_Blank", Regs_Arm9.data);
    IE_LCD_H_Blank = DSReg(0x210, 1, 1, 1, 0, "readwrite", "IE_LCD_H_Blank", Regs_Arm9.data);
    IE_LCD_V_Counter_Match = DSReg(0x210, 2, 2, 1, 0, "readwrite", "IE_LCD_V_Counter_Match", Regs_Arm9.data);
    IE_Timer_0 = DSReg(0x210, 3, 3, 1, 0, "readwrite", "IE_Timer_0", Regs_Arm9.data);
    IE_Timer_1 = DSReg(0x210, 4, 4, 1, 0, "readwrite", "IE_Timer_1", Regs_Arm9.data);
    IE_Timer_2 = DSReg(0x210, 5, 5, 1, 0, "readwrite", "IE_Timer_2", Regs_Arm9.data);
    IE_Timer_3 = DSReg(0x210, 6, 6, 1, 0, "readwrite", "IE_Timer_3", Regs_Arm9.data);
    IE_DMA_0 = DSReg(0x210, 8, 8, 1, 0, "readwrite", "IE_DMA_0", Regs_Arm9.data);
    IE_DMA_1 = DSReg(0x210, 9, 9, 1, 0, "readwrite", "IE_DMA_1", Regs_Arm9.data);
    IE_DMA_2 = DSReg(0x210, 10, 10, 1, 0, "readwrite", "IE_DMA_2", Regs_Arm9.data);
    IE_DMA_3 = DSReg(0x210, 11, 11, 1, 0, "readwrite", "IE_DMA_3", Regs_Arm9.data);
    IE_Keypad = DSReg(0x210, 12, 12, 1, 0, "readwrite", "IE_Keypad", Regs_Arm9.data);
    IE_GBA_Slot_external_IRQ = DSReg(0x210, 13, 13, 1, 0, "readwrite", "IE_GBA_Slot_external_IRQ", Regs_Arm9.data);
    IE_IPC_Sync = DSReg(0x210, 16, 16, 1, 0, "readwrite", "IE_IPC_Sync", Regs_Arm9.data);
    IE_IPC_Send_FIFO_Empty = DSReg(0x210, 17, 17, 1, 0, "readwrite", "IE_IPC_Send_FIFO_Empty", Regs_Arm9.data);
    IE_IPC_Recv_FIFO_Not_Empty = DSReg(0x210, 18, 18, 1, 0, "readwrite", "IE_IPC_Recv_FIFO_Not_Empty", Regs_Arm9.data);
    IE_NDS_Slot_Transfer_Complete = DSReg(0x210, 19, 19, 1, 0, "readwrite", "IE_NDS_Slot_Transfer_Complete", Regs_Arm9.data);
    IE_NDS_Slot_IREQ_MC = DSReg(0x210, 20, 20, 1, 0, "readwrite", "IE_NDS_Slot_IREQ_MC", Regs_Arm9.data);
    IE_Geometry_Command_FIFO = DSReg(0x210, 21, 21, 1, 0, "readwrite", "IE_Geometry_Command_FIFO", Regs_Arm9.data);
    IE_unused = DSReg(0x210, 31, 22, 1, 0, "readwrite", "IE_unused", Regs_Arm9.data);
    IF = DSReg(0x214, 21, 0, 1, 0, "writeonly", "IF", Regs_Arm9.data);
    IF_LCD_V_Blank = DSReg(0x214, 0, 0, 1, 0, "readwrite", "IF_LCD_V_Blank", Regs_Arm9.data);
    IF_LCD_H_Blank = DSReg(0x214, 1, 1, 1, 0, "readwrite", "IF_LCD_H_Blank", Regs_Arm9.data);
    IF_LCD_V_Counter_Match = DSReg(0x214, 2, 2, 1, 0, "readwrite", "IF_LCD_V_Counter_Match", Regs_Arm9.data);
    IF_Timer_0 = DSReg(0x214, 3, 3, 1, 0, "readwrite", "IF_Timer_0", Regs_Arm9.data);
    IF_Timer_1 = DSReg(0x214, 4, 4, 1, 0, "readwrite", "IF_Timer_1", Regs_Arm9.data);
    IF_Timer_2 = DSReg(0x214, 5, 5, 1, 0, "readwrite", "IF_Timer_2", Regs_Arm9.data);
    IF_Timer_3 = DSReg(0x214, 6, 6, 1, 0, "readwrite", "IF_Timer_3", Regs_Arm9.data);
    IF_DMA_0 = DSReg(0x214, 8, 8, 1, 0, "readwrite", "IF_DMA_0", Regs_Arm9.data);
    IF_DMA_1 = DSReg(0x214, 9, 9, 1, 0, "readwrite", "IF_DMA_1", Regs_Arm9.data);
    IF_DMA_2 = DSReg(0x214, 10, 10, 1, 0, "readwrite", "IF_DMA_2", Regs_Arm9.data);
    IF_DMA_3 = DSReg(0x214, 11, 11, 1, 0, "readwrite", "IF_DMA_3", Regs_Arm9.data);
    IF_Keypad = DSReg(0x214, 12, 12, 1, 0, "readwrite", "IF_Keypad", Regs_Arm9.data);
    IF_GBA_Slot_external_IRQ = DSReg(0x214, 13, 13, 1, 0, "readwrite", "IF_GBA_Slot_external_IRQ", Regs_Arm9.data);
    IF_IPC_Sync = DSReg(0x214, 16, 16, 1, 0, "readwrite", "IF_IPC_Sync", Regs_Arm9.data);
    IF_IPC_Send_FIFO_Empty = DSReg(0x214, 17, 17, 1, 0, "readwrite", "IF_IPC_Send_FIFO_Empty", Regs_Arm9.data);
    IF_IPC_Recv_FIFO_Not_Empty = DSReg(0x214, 18, 18, 1, 0, "readwrite", "IF_IPC_Recv_FIFO_Not_Empty", Regs_Arm9.data);
    IF_NDS_Slot_Transfer_Complete = DSReg(0x214, 19, 19, 1, 0, "readwrite", "IF_NDS_Slot_Transfer_Complete", Regs_Arm9.data);
    IF_NDS_Slot_IREQ_MC = DSReg(0x214, 20, 20, 1, 0, "readwrite", "IF_NDS_Slot_IREQ_MC", Regs_Arm9.data);
    IF_Geometry_Command_FIFO = DSReg(0x214, 21, 21, 1, 0, "readwrite", "IF_Geometry_Command_FIFO", Regs_Arm9.data);
    MemControl1 = DSReg(0x240, 31, 0, 1, 0, "writeonly", "MemControl1", Regs_Arm9.data);
    MemControl1_VRAM_A_MST = DSReg(0x240, 1, 0, 1, 0, "writeonly", "MemControl1_VRAM_A_MST", Regs_Arm9.data);
    MemControl1_VRAM_A_Offset = DSReg(0x240, 4, 3, 1, 0, "writeonly", "MemControl1_VRAM_A_Offset", Regs_Arm9.data);
    MemControl1_VRAM_A_Enable = DSReg(0x240, 7, 7, 1, 0, "writeonly", "MemControl1_VRAM_A_Enable", Regs_Arm9.data);
    MemControl1_VRAM_B_MST = DSReg(0x240, 9, 8, 1, 0, "writeonly", "MemControl1_VRAM_B_MST", Regs_Arm9.data);
    MemControl1_VRAM_B_Offset = DSReg(0x240, 12, 11, 1, 0, "writeonly", "MemControl1_VRAM_B_Offset", Regs_Arm9.data);
    MemControl1_VRAM_B_Enable = DSReg(0x240, 15, 15, 1, 0, "writeonly", "MemControl1_VRAM_B_Enable", Regs_Arm9.data);
    MemControl1_VRAM_C_MST = DSReg(0x240, 18, 16, 1, 0, "writeonly", "MemControl1_VRAM_C_MST", Regs_Arm9.data);
    MemControl1_VRAM_C_Offset = DSReg(0x240, 20, 19, 1, 0, "writeonly", "MemControl1_VRAM_C_Offset", Regs_Arm9.data);
    MemControl1_VRAM_C_Enable = DSReg(0x240, 23, 23, 1, 0, "writeonly", "MemControl1_VRAM_C_Enable", Regs_Arm9.data);
    MemControl1_VRAM_D_MST = DSReg(0x240, 26, 24, 1, 0, "writeonly", "MemControl1_VRAM_D_MST", Regs_Arm9.data);
    MemControl1_VRAM_D_Offset = DSReg(0x240, 28, 27, 1, 0, "writeonly", "MemControl1_VRAM_D_Offset", Regs_Arm9.data);
    MemControl1_VRAM_D_Enable = DSReg(0x240, 31, 31, 1, 0, "writeonly", "MemControl1_VRAM_D_Enable", Regs_Arm9.data);
    MemControl2 = DSReg(0x244, 25, 0, 1, 0, "writeonly", "MemControl2", Regs_Arm9.data);
    MemControl2_VRAM_E_MST = DSReg(0x244, 2, 0, 1, 0, "writeonly", "MemControl2_VRAM_E_MST", Regs_Arm9.data);
    MemControl2_VRAM_E_Offset = DSReg(0x244, 4, 3, 1, 0, "writeonly", "MemControl2_VRAM_E_Offset", Regs_Arm9.data);
    MemControl2_VRAM_E_Enable = DSReg(0x244, 7, 7, 1, 0, "writeonly", "MemControl2_VRAM_E_Enable", Regs_Arm9.data);
    MemControl2_VRAM_F_MST = DSReg(0x244, 10, 8, 1, 0, "writeonly", "MemControl2_VRAM_F_MST", Regs_Arm9.data);
    MemControl2_VRAM_F_Offset = DSReg(0x244, 12, 11, 1, 0, "writeonly", "MemControl2_VRAM_F_Offset", Regs_Arm9.data);
    MemControl2_VRAM_F_Enable = DSReg(0x244, 15, 15, 1, 0, "writeonly", "MemControl2_VRAM_F_Enable", Regs_Arm9.data);
    MemControl2_VRAM_G_MST = DSReg(0x244, 18, 16, 1, 0, "writeonly", "MemControl2_VRAM_G_MST", Regs_Arm9.data);
    MemControl2_VRAM_G_Offset = DSReg(0x244, 20, 19, 1, 0, "writeonly", "MemControl2_VRAM_G_Offset", Regs_Arm9.data);
    MemControl2_VRAM_G_Enable = DSReg(0x244, 23, 23, 1, 0, "writeonly", "MemControl2_VRAM_G_Enable", Regs_Arm9.data);
    MemControl2_WRAM = DSReg(0x244, 25, 24, 1, 3, "readwrite", "MemControl2_WRAM", Regs_Arm9.data);
    MemControl3 = DSReg(0x248, 15, 0, 1, 0, "writeonly", "MemControl3", Regs_Arm9.data);
    MemControl3_VRAM_H_MST = DSReg(0x248, 1, 0, 1, 0, "writeonly", "MemControl3_VRAM_H_MST", Regs_Arm9.data);
    MemControl3_VRAM_H_Offset = DSReg(0x248, 4, 3, 1, 0, "writeonly", "MemControl3_VRAM_H_Offset", Regs_Arm9.data);
    MemControl3_VRAM_H_Enable = DSReg(0x248, 7, 7, 1, 0, "writeonly", "MemControl3_VRAM_H_Enable", Regs_Arm9.data);
    MemControl3_VRAM_I_MST = DSReg(0x248, 9, 8, 1, 0, "writeonly", "MemControl3_VRAM_I_MST", Regs_Arm9.data);
    MemControl3_VRAM_I_Offset = DSReg(0x248, 12, 11, 1, 0, "writeonly", "MemControl3_VRAM_I_Offset", Regs_Arm9.data);
    MemControl3_VRAM_I_Enable = DSReg(0x248, 15, 15, 1, 0, "writeonly", "MemControl3_VRAM_I_Enable", Regs_Arm9.data);
    DIVCNT = DSReg(0x280, 31, 0, 1, 0, "writeonly", "DIVCNT", Regs_Arm9.data);
    DIVCNT_Division_Mode = DSReg(0x280, 1, 0, 1, 0, "readwrite", "DIVCNT_Division_Mode", Regs_Arm9.data);
    DIVCNT_Division_by_zero = DSReg(0x280, 14, 14, 1, 0, "readonly", "DIVCNT_Division_by_zero", Regs_Arm9.data);
    DIVCNT_Busy = DSReg(0x280, 15, 15, 1, 0, "readonly", "DIVCNT_Busy", Regs_Arm9.data);
    DIV_NUMER_Low = DSReg(0x290, 31, 0, 1, 0, "readwrite", "DIV_NUMER_Low", Regs_Arm9.data);
    DIV_NUMER_High = DSReg(0x294, 31, 0, 1, 0, "readwrite", "DIV_NUMER_High", Regs_Arm9.data);
    DIV_DENOM_Low = DSReg(0x298, 31, 0, 1, 0, "readwrite", "DIV_DENOM_Low", Regs_Arm9.data);
    DIV_DENOM_High = DSReg(0x29C, 31, 0, 1, 0, "readwrite", "DIV_DENOM_High", Regs_Arm9.data);
    DIV_RESULT_Low = DSReg(0x2A0, 31, 0, 1, 0, "readonly", "DIV_RESULT_Low", Regs_Arm9.data);
    DIV_RESULT_High = DSReg(0x2A4, 31, 0, 1, 0, "readonly", "DIV_RESULT_High", Regs_Arm9.data);
    DIVREM_RESULT_Low = DSReg(0x2A8, 31, 0, 1, 0, "readonly", "DIVREM_RESULT_Low", Regs_Arm9.data);
    DIVREM_RESULT_High = DSReg(0x2AC, 31, 0, 1, 0, "readonly", "DIVREM_RESULT_High", Regs_Arm9.data);
    SQRTCN = DSReg(0x2B0, 31, 0, 1, 0, "writeonly", "SQRTCN", Regs_Arm9.data);
    SQRTCN_Mode = DSReg(0x2B0, 0, 0, 1, 0, "readwrite", "SQRTCN_Mode", Regs_Arm9.data);
    SQRTCN_Busy = DSReg(0x2B0, 15, 15, 1, 0, "readonly", "SQRTCN_Busy", Regs_Arm9.data);
    SQRT_RESULT = DSReg(0x2B4, 31, 0, 1, 0, "readonly", "SQRT_RESULT", Regs_Arm9.data);
    SQRT_PARAM_Low = DSReg(0x2B8, 31, 0, 1, 0, "readwrite", "SQRT_PARAM_Low", Regs_Arm9.data);
    SQRT_PARAM_High = DSReg(0x2BC, 31, 0, 1, 0, "readwrite", "SQRT_PARAM_High", Regs_Arm9.data);
    POSTFLG = DSReg(0x300, 1, 0, 1, 0, "writeonly", "POSTFLG", Regs_Arm9.data);
    POSTFLG_Flag = DSReg(0x300, 0, 0, 1, 1, "readonly", "POSTFLG_Flag", Regs_Arm9.data);
    POSTFLG_RW = DSReg(0x300, 1, 1, 1, 0, "readwrite", "POSTFLG_RW", Regs_Arm9.data);
    POWCNT1 = DSReg(0x304, 15, 0, 1, 33295, "writeonly", "POWCNT1", Regs_Arm9.data);
    POWCNT1_Enable_Flag_for_both_LCDs = DSReg(0x304, 0, 0, 1, 0, "readwrite", "POWCNT1_Enable_Flag_for_both_LCDs", Regs_Arm9.data);
    POWCNT1_2D_Graphics_Engine_A = DSReg(0x304, 1, 1, 1, 0, "readwrite", "POWCNT1_2D_Graphics_Engine_A", Regs_Arm9.data);
    POWCNT1_3D_Rendering_Engine = DSReg(0x304, 2, 2, 1, 0, "readwrite", "POWCNT1_3D_Rendering_Engine", Regs_Arm9.data);
    POWCNT1_3D_Geometry_Engine = DSReg(0x304, 3, 3, 1, 0, "readwrite", "POWCNT1_3D_Geometry_Engine", Regs_Arm9.data);
    POWCNT1_2D_Graphics_Engine_B = DSReg(0x304, 9, 9, 1, 0, "readwrite", "POWCNT1_2D_Graphics_Engine_B", Regs_Arm9.data);
    POWCNT1_Display_Swap = DSReg(0x304, 15, 15, 1, 0, "readwrite", "POWCNT1_Display_Swap", Regs_Arm9.data);
}

RegSect_3D9::RegSect_3D9()
{
    CLEAR_COLOR = DSReg(0x0350, 29, 0, 1, 0, "Writeonly", "CLEAR_COLOR", Regs_Arm9.data);
    CLEAR_COLOR_Red = DSReg(0x0350, 4, 0, 1, 0, "Writeonly", "CLEAR_COLOR_Red", Regs_Arm9.data);
    CLEAR_COLOR_Green = DSReg(0x0350, 9, 5, 1, 0, "Writeonly", "CLEAR_COLOR_Green", Regs_Arm9.data);
    CLEAR_COLOR_Blue = DSReg(0x0350, 14, 10, 1, 0, "Writeonly", "CLEAR_COLOR_Blue", Regs_Arm9.data);
    CLEAR_COLOR_Fog = DSReg(0x0350, 15, 15, 1, 0, "Writeonly", "CLEAR_COLOR_Fog", Regs_Arm9.data);
    CLEAR_COLOR_Alpha = DSReg(0x0350, 20, 16, 1, 0, "Writeonly", "CLEAR_COLOR_Alpha", Regs_Arm9.data);
    CLEAR_COLOR_Clear_Polygon_ID = DSReg(0x0350, 29, 24, 1, 0, "Writeonly", "CLEAR_COLOR_Clear_Polygon_ID", Regs_Arm9.data);
    CLEAR_DEPTH = DSReg(0x0354, 31, 0, 1, 0, "Writeonly", "CLEAR_DEPTH", Regs_Arm9.data);
    CLEAR_DEPTH_DEPTH = DSReg(0x0354, 14, 0, 1, 0, "Writeonly", "CLEAR_DEPTH_DEPTH", Regs_Arm9.data);
    CLEAR_DEPTH_X_Offset = DSReg(0x0354, 23, 16, 1, 0, "Writeonly", "CLEAR_DEPTH_X_Offset", Regs_Arm9.data);
    CLEAR_DEPTH_Y_Offset = DSReg(0x0354, 31, 24, 1, 0, "Writeonly", "CLEAR_DEPTH_Y_Offset", Regs_Arm9.data);
    GXFIFO = DSReg(0x0400, 31, 0, 1, 0, "Writeonly", "GXFIFO", Regs_Arm9.data);
    GXSTAT = DSReg(0x0600, 31, 0, 1, 0x6000000, "Writeonly", "GXSTAT", Regs_Arm9.data);
    GXSTAT_TestBusy = DSReg(0x0600, 0, 0, 1, 0, "readonly", "GXSTAT_TestBusy", Regs_Arm9.data);
    GXSTAT_BoxTest_Result = DSReg(0x0600, 1, 1, 1, 0, "readonly", "GXSTAT_BoxTest_Result", Regs_Arm9.data);
    GXSTAT_PosVect_Matrix_Stack_Level = DSReg(0x0600, 12, 8, 1, 0, "readonly", "GXSTAT_PosVect_Matrix_Stack_Level", Regs_Arm9.data);
    GXSTAT_Proj_Matrix_Stack_Level = DSReg(0x0600, 13, 13, 1, 0, "readonly", "GXSTAT_Proj_Matrix_Stack_Level", Regs_Arm9.data);
    GXSTAT_Matrix_Stack_Busy = DSReg(0x0600, 14, 14, 1, 0, "readonly", "GXSTAT_Matrix_Stack_Busy", Regs_Arm9.data);
    GXSTAT_Matrix_Stack_Error = DSReg(0x0600, 15, 15, 1, 0, "readwrite", "GXSTAT_Matrix_Stack_Error", Regs_Arm9.data);
    GXSTAT_Command_FIFO_Entries = DSReg(0x0600, 24, 16, 1, 0, "readonly", "GXSTAT_Command_FIFO_Entries", Regs_Arm9.data);
    GXSTAT_Command_FIFO_Less_Half = DSReg(0x0600, 25, 25, 1, 0, "readonly", "GXSTAT_Command_FIFO_Less_Half", Regs_Arm9.data);
    GXSTAT_Command_FIFO_Empty = DSReg(0x0600, 26, 26, 1, 0, "readonly", "GXSTAT_Command_FIFO_Empty", Regs_Arm9.data);
    GXSTAT_Geometry_Engine_Busy = DSReg(0x0600, 27, 27, 1, 0, "readwrite", "GXSTAT_Geometry_Engine_Busy", Regs_Arm9.data);
    GXSTAT_Command_FIFO_IRQ = DSReg(0x0600, 31, 30, 1, 0, "readwrite", "GXSTAT_Command_FIFO_IRQ", Regs_Arm9.data);
}

void REGS_Arm9::reset()
{
      allregs[0] = Regs_Arm9.Sect_display9.A_DISPCNT;
      allregs[1] = Regs_Arm9.Sect_display9.A_DISPCNT_BG_Mode;
      allregs[2] = Regs_Arm9.Sect_display9.A_DISPCNT_BG0_2D_3D;
      allregs[3] = Regs_Arm9.Sect_display9.A_DISPCNT_Tile_OBJ_Mapping;
      allregs[4] = Regs_Arm9.Sect_display9.A_DISPCNT_Bitmap_OBJ_2D_Dim;
      allregs[5] = Regs_Arm9.Sect_display9.A_DISPCNT_Bitmap_OBJ_Mapping;
      allregs[6] = Regs_Arm9.Sect_display9.A_DISPCNT_Forced_Blank;
      allregs[7] = Regs_Arm9.Sect_display9.A_DISPCNT_Screen_Display_BG0;
      allregs[8] = Regs_Arm9.Sect_display9.A_DISPCNT_Screen_Display_BG1;
      allregs[9] = Regs_Arm9.Sect_display9.A_DISPCNT_Screen_Display_BG2;
      allregs[10] = Regs_Arm9.Sect_display9.A_DISPCNT_Screen_Display_BG3;
      allregs[11] = Regs_Arm9.Sect_display9.A_DISPCNT_Screen_Display_OBJ;
      allregs[12] = Regs_Arm9.Sect_display9.A_DISPCNT_Window_0_Display_Flag;
      allregs[13] = Regs_Arm9.Sect_display9.A_DISPCNT_Window_1_Display_Flag;
      allregs[14] = Regs_Arm9.Sect_display9.A_DISPCNT_OBJ_Wnd_Display_Flag;
      allregs[15] = Regs_Arm9.Sect_display9.A_DISPCNT_Display_Mode;
      allregs[16] = Regs_Arm9.Sect_display9.A_DISPCNT_VRAM_block;
      allregs[17] = Regs_Arm9.Sect_display9.A_DISPCNT_Tile_OBJ_1D_Boundary;
      allregs[18] = Regs_Arm9.Sect_display9.A_DISPCNT_Bitmap_OBJ_1D_Boundary;
      allregs[19] = Regs_Arm9.Sect_display9.A_DISPCNT_OBJ_Process_H_Blank;
      allregs[20] = Regs_Arm9.Sect_display9.A_DISPCNT_Character_Base;
      allregs[21] = Regs_Arm9.Sect_display9.A_DISPCNT_Screen_Base;
      allregs[22] = Regs_Arm9.Sect_display9.A_DISPCNT_BG_Extended_Palettes;
      allregs[23] = Regs_Arm9.Sect_display9.A_DISPCNT_OBJ_Extended_Palettes;
      allregs[24] = Regs_Arm9.Sect_display9.DISPSTAT;
      allregs[25] = Regs_Arm9.Sect_display9.DISPSTAT_V_Blank_flag;
      allregs[26] = Regs_Arm9.Sect_display9.DISPSTAT_H_Blank_flag;
      allregs[27] = Regs_Arm9.Sect_display9.DISPSTAT_V_Counter_flag;
      allregs[28] = Regs_Arm9.Sect_display9.DISPSTAT_V_Blank_IRQ_Enable;
      allregs[29] = Regs_Arm9.Sect_display9.DISPSTAT_H_Blank_IRQ_Enable;
      allregs[30] = Regs_Arm9.Sect_display9.DISPSTAT_V_Counter_IRQ_Enable;
      allregs[31] = Regs_Arm9.Sect_display9.DISPSTAT_V_Count_Setting8;
      allregs[32] = Regs_Arm9.Sect_display9.DISPSTAT_V_Count_Setting;
      allregs[33] = Regs_Arm9.Sect_display9.VCOUNT;
      allregs[34] = Regs_Arm9.Sect_display9.A_BG0CNT;
      allregs[35] = Regs_Arm9.Sect_display9.A_BG0CNT_BG_Priority;
      allregs[36] = Regs_Arm9.Sect_display9.A_BG0CNT_Character_Base_Block;
      allregs[37] = Regs_Arm9.Sect_display9.A_BG0CNT_Mosaic;
      allregs[38] = Regs_Arm9.Sect_display9.A_BG0CNT_Colors_Palettes;
      allregs[39] = Regs_Arm9.Sect_display9.A_BG0CNT_Screen_Base_Block;
      allregs[40] = Regs_Arm9.Sect_display9.A_BG0CNT_Ext_Palette_Slot;
      allregs[41] = Regs_Arm9.Sect_display9.A_BG0CNT_Screen_Size;
      allregs[42] = Regs_Arm9.Sect_display9.A_BG1CNT;
      allregs[43] = Regs_Arm9.Sect_display9.A_BG1CNT_BG_Priority;
      allregs[44] = Regs_Arm9.Sect_display9.A_BG1CNT_Character_Base_Block;
      allregs[45] = Regs_Arm9.Sect_display9.A_BG1CNT_Mosaic;
      allregs[46] = Regs_Arm9.Sect_display9.A_BG1CNT_Colors_Palettes;
      allregs[47] = Regs_Arm9.Sect_display9.A_BG1CNT_Screen_Base_Block;
      allregs[48] = Regs_Arm9.Sect_display9.A_BG1CNT_Ext_Palette_Slot;
      allregs[49] = Regs_Arm9.Sect_display9.A_BG1CNT_Screen_Size;
      allregs[50] = Regs_Arm9.Sect_display9.A_BG2CNT;
      allregs[51] = Regs_Arm9.Sect_display9.A_BG2CNT_BG_Priority;
      allregs[52] = Regs_Arm9.Sect_display9.A_BG2CNT_Character_Base_Block;
      allregs[53] = Regs_Arm9.Sect_display9.A_BG2CNT_Mosaic;
      allregs[54] = Regs_Arm9.Sect_display9.A_BG2CNT_Colors_Palettes;
      allregs[55] = Regs_Arm9.Sect_display9.A_BG2CNT_Screen_Base_Block;
      allregs[56] = Regs_Arm9.Sect_display9.A_BG2CNT_Display_Area_Overflow;
      allregs[57] = Regs_Arm9.Sect_display9.A_BG2CNT_Screen_Size;
      allregs[58] = Regs_Arm9.Sect_display9.A_BG3CNT;
      allregs[59] = Regs_Arm9.Sect_display9.A_BG3CNT_BG_Priority;
      allregs[60] = Regs_Arm9.Sect_display9.A_BG3CNT_Character_Base_Block;
      allregs[61] = Regs_Arm9.Sect_display9.A_BG3CNT_Mosaic;
      allregs[62] = Regs_Arm9.Sect_display9.A_BG3CNT_Colors_Palettes;
      allregs[63] = Regs_Arm9.Sect_display9.A_BG3CNT_Screen_Base_Block;
      allregs[64] = Regs_Arm9.Sect_display9.A_BG3CNT_Display_Area_Overflow;
      allregs[65] = Regs_Arm9.Sect_display9.A_BG3CNT_Screen_Size;
      allregs[66] = Regs_Arm9.Sect_display9.A_BG0HOFS;
      allregs[67] = Regs_Arm9.Sect_display9.A_BG0VOFS;
      allregs[68] = Regs_Arm9.Sect_display9.A_BG1HOFS;
      allregs[69] = Regs_Arm9.Sect_display9.A_BG1VOFS;
      allregs[70] = Regs_Arm9.Sect_display9.A_BG2HOFS;
      allregs[71] = Regs_Arm9.Sect_display9.A_BG2VOFS;
      allregs[72] = Regs_Arm9.Sect_display9.A_BG3HOFS;
      allregs[73] = Regs_Arm9.Sect_display9.A_BG3VOFS;
      allregs[74] = Regs_Arm9.Sect_display9.A_BG2RotScaleParDX;
      allregs[75] = Regs_Arm9.Sect_display9.A_BG2RotScaleParDMX;
      allregs[76] = Regs_Arm9.Sect_display9.A_BG2RotScaleParDY;
      allregs[77] = Regs_Arm9.Sect_display9.A_BG2RotScaleParDMY;
      allregs[78] = Regs_Arm9.Sect_display9.A_BG2RefX;
      allregs[79] = Regs_Arm9.Sect_display9.A_BG2RefY;
      allregs[80] = Regs_Arm9.Sect_display9.A_BG3RotScaleParDX;
      allregs[81] = Regs_Arm9.Sect_display9.A_BG3RotScaleParDMX;
      allregs[82] = Regs_Arm9.Sect_display9.A_BG3RotScaleParDY;
      allregs[83] = Regs_Arm9.Sect_display9.A_BG3RotScaleParDMY;
      allregs[84] = Regs_Arm9.Sect_display9.A_BG3RefX;
      allregs[85] = Regs_Arm9.Sect_display9.A_BG3RefY;
      allregs[86] = Regs_Arm9.Sect_display9.A_WIN0H;
      allregs[87] = Regs_Arm9.Sect_display9.A_WIN0H_X2;
      allregs[88] = Regs_Arm9.Sect_display9.A_WIN0H_X1;
      allregs[89] = Regs_Arm9.Sect_display9.A_WIN1H;
      allregs[90] = Regs_Arm9.Sect_display9.A_WIN1H_X2;
      allregs[91] = Regs_Arm9.Sect_display9.A_WIN1H_X1;
      allregs[92] = Regs_Arm9.Sect_display9.A_WIN0V;
      allregs[93] = Regs_Arm9.Sect_display9.A_WIN0V_Y2;
      allregs[94] = Regs_Arm9.Sect_display9.A_WIN0V_Y1;
      allregs[95] = Regs_Arm9.Sect_display9.A_WIN1V;
      allregs[96] = Regs_Arm9.Sect_display9.A_WIN1V_Y2;
      allregs[97] = Regs_Arm9.Sect_display9.A_WIN1V_Y1;
      allregs[98] = Regs_Arm9.Sect_display9.A_WININ;
      allregs[99] = Regs_Arm9.Sect_display9.A_WININ_Window_0_BG0_Enable;
      allregs[100] = Regs_Arm9.Sect_display9.A_WININ_Window_0_BG1_Enable;
      allregs[101] = Regs_Arm9.Sect_display9.A_WININ_Window_0_BG2_Enable;
      allregs[102] = Regs_Arm9.Sect_display9.A_WININ_Window_0_BG3_Enable;
      allregs[103] = Regs_Arm9.Sect_display9.A_WININ_Window_0_OBJ_Enable;
      allregs[104] = Regs_Arm9.Sect_display9.A_WININ_Window_0_Special_Effect;
      allregs[105] = Regs_Arm9.Sect_display9.A_WININ_Window_1_BG0_Enable;
      allregs[106] = Regs_Arm9.Sect_display9.A_WININ_Window_1_BG1_Enable;
      allregs[107] = Regs_Arm9.Sect_display9.A_WININ_Window_1_BG2_Enable;
      allregs[108] = Regs_Arm9.Sect_display9.A_WININ_Window_1_BG3_Enable;
      allregs[109] = Regs_Arm9.Sect_display9.A_WININ_Window_1_OBJ_Enable;
      allregs[110] = Regs_Arm9.Sect_display9.A_WININ_Window_1_Special_Effect;
      allregs[111] = Regs_Arm9.Sect_display9.A_WINOUT;
      allregs[112] = Regs_Arm9.Sect_display9.A_WINOUT_Outside_BG0_Enable;
      allregs[113] = Regs_Arm9.Sect_display9.A_WINOUT_Outside_BG1_Enable;
      allregs[114] = Regs_Arm9.Sect_display9.A_WINOUT_Outside_BG2_Enable;
      allregs[115] = Regs_Arm9.Sect_display9.A_WINOUT_Outside_BG3_Enable;
      allregs[116] = Regs_Arm9.Sect_display9.A_WINOUT_Outside_OBJ_Enable;
      allregs[117] = Regs_Arm9.Sect_display9.A_WINOUT_Outside_Special_Effect;
      allregs[118] = Regs_Arm9.Sect_display9.A_WINOUT_Objwnd_BG0_Enable;
      allregs[119] = Regs_Arm9.Sect_display9.A_WINOUT_Objwnd_BG1_Enable;
      allregs[120] = Regs_Arm9.Sect_display9.A_WINOUT_Objwnd_BG2_Enable;
      allregs[121] = Regs_Arm9.Sect_display9.A_WINOUT_Objwnd_BG3_Enable;
      allregs[122] = Regs_Arm9.Sect_display9.A_WINOUT_Objwnd_OBJ_Enable;
      allregs[123] = Regs_Arm9.Sect_display9.A_WINOUT_Objwnd_Special_Effect;
      allregs[124] = Regs_Arm9.Sect_display9.A_MOSAIC;
      allregs[125] = Regs_Arm9.Sect_display9.A_MOSAIC_BG_Mosaic_H_Size;
      allregs[126] = Regs_Arm9.Sect_display9.A_MOSAIC_BG_Mosaic_V_Size;
      allregs[127] = Regs_Arm9.Sect_display9.A_MOSAIC_OBJ_Mosaic_H_Size;
      allregs[128] = Regs_Arm9.Sect_display9.A_MOSAIC_OBJ_Mosaic_V_Size;
      allregs[129] = Regs_Arm9.Sect_display9.A_BLDCNT;
      allregs[130] = Regs_Arm9.Sect_display9.A_BLDCNT_BG0_1st_Target_Pixel;
      allregs[131] = Regs_Arm9.Sect_display9.A_BLDCNT_BG1_1st_Target_Pixel;
      allregs[132] = Regs_Arm9.Sect_display9.A_BLDCNT_BG2_1st_Target_Pixel;
      allregs[133] = Regs_Arm9.Sect_display9.A_BLDCNT_BG3_1st_Target_Pixel;
      allregs[134] = Regs_Arm9.Sect_display9.A_BLDCNT_OBJ_1st_Target_Pixel;
      allregs[135] = Regs_Arm9.Sect_display9.A_BLDCNT_BD_1st_Target_Pixel;
      allregs[136] = Regs_Arm9.Sect_display9.A_BLDCNT_Color_Special_Effect;
      allregs[137] = Regs_Arm9.Sect_display9.A_BLDCNT_BG0_2nd_Target_Pixel;
      allregs[138] = Regs_Arm9.Sect_display9.A_BLDCNT_BG1_2nd_Target_Pixel;
      allregs[139] = Regs_Arm9.Sect_display9.A_BLDCNT_BG2_2nd_Target_Pixel;
      allregs[140] = Regs_Arm9.Sect_display9.A_BLDCNT_BG3_2nd_Target_Pixel;
      allregs[141] = Regs_Arm9.Sect_display9.A_BLDCNT_OBJ_2nd_Target_Pixel;
      allregs[142] = Regs_Arm9.Sect_display9.A_BLDCNT_BD_2nd_Target_Pixel;
      allregs[143] = Regs_Arm9.Sect_display9.A_BLDALPHA;
      allregs[144] = Regs_Arm9.Sect_display9.A_BLDALPHA_EVA_Coefficient;
      allregs[145] = Regs_Arm9.Sect_display9.A_BLDALPHA_EVB_Coefficient;
      allregs[146] = Regs_Arm9.Sect_display9.A_BLDY;
      allregs[147] = Regs_Arm9.Sect_display9.DISP3DCNT;
      allregs[148] = Regs_Arm9.Sect_display9.DISP3DCNT_Texture_Mapping;
      allregs[149] = Regs_Arm9.Sect_display9.DISP3DCNT_PolygonAttr_Shading;
      allregs[150] = Regs_Arm9.Sect_display9.DISP3DCNT_Alpha_Test;
      allregs[151] = Regs_Arm9.Sect_display9.DISP3DCNT_Alpha_Blending;
      allregs[152] = Regs_Arm9.Sect_display9.DISP3DCNT_Anti_Aliasing;
      allregs[153] = Regs_Arm9.Sect_display9.DISP3DCNT_Edge_Marking;
      allregs[154] = Regs_Arm9.Sect_display9.DISP3DCNT_Fog_Color_Alpha;
      allregs[155] = Regs_Arm9.Sect_display9.DISP3DCNT_Fog_Master_Enable;
      allregs[156] = Regs_Arm9.Sect_display9.DISP3DCNT_Fog_Depth_Shift;
      allregs[157] = Regs_Arm9.Sect_display9.DISP3DCNT_RDLINES_Underflow;
      allregs[158] = Regs_Arm9.Sect_display9.DISP3DCNT_RAM_Overflow;
      allregs[159] = Regs_Arm9.Sect_display9.DISP3DCNT_Rear_Plane_Mode;
      allregs[160] = Regs_Arm9.Sect_display9.DISPCAPCNT;
      allregs[161] = Regs_Arm9.Sect_display9.DISPCAPCNT_EVA;
      allregs[162] = Regs_Arm9.Sect_display9.DISPCAPCNT_EVB;
      allregs[163] = Regs_Arm9.Sect_display9.DISPCAPCNT_VRAM_Write_Block;
      allregs[164] = Regs_Arm9.Sect_display9.DISPCAPCNT_VRAM_Write_Offset;
      allregs[165] = Regs_Arm9.Sect_display9.DISPCAPCNT_Capture_Size;
      allregs[166] = Regs_Arm9.Sect_display9.DISPCAPCNT_Source_A;
      allregs[167] = Regs_Arm9.Sect_display9.DISPCAPCNT_Source_B;
      allregs[168] = Regs_Arm9.Sect_display9.DISPCAPCNT_VRAM_Read_Offset;
      allregs[169] = Regs_Arm9.Sect_display9.DISPCAPCNT_Capture_Source;
      allregs[170] = Regs_Arm9.Sect_display9.DISPCAPCNT_Capture_Enable;
      allregs[171] = Regs_Arm9.Sect_display9.DISP_MMEM_FIFO;
      allregs[172] = Regs_Arm9.Sect_display9.A_MASTER_BRIGHT;
      allregs[173] = Regs_Arm9.Sect_display9.A_MASTER_BRIGHT_Factor;
      allregs[174] = Regs_Arm9.Sect_display9.A_MASTER_BRIGHT_Mode;
      allregs[175] = Regs_Arm9.Sect_display9.B_DISPCNT;
      allregs[176] = Regs_Arm9.Sect_display9.B_DISPCNT_BG_Mode;
      allregs[177] = Regs_Arm9.Sect_display9.B_DISPCNT_BG0_2D_3D;
      allregs[178] = Regs_Arm9.Sect_display9.B_DISPCNT_Tile_OBJ_Mapping;
      allregs[179] = Regs_Arm9.Sect_display9.B_DISPCNT_Bitmap_OBJ_2D_Dim;
      allregs[180] = Regs_Arm9.Sect_display9.B_DISPCNT_Bitmap_OBJ_Mapping;
      allregs[181] = Regs_Arm9.Sect_display9.B_DISPCNT_Forced_Blank;
      allregs[182] = Regs_Arm9.Sect_display9.B_DISPCNT_Screen_Display_BG0;
      allregs[183] = Regs_Arm9.Sect_display9.B_DISPCNT_Screen_Display_BG1;
      allregs[184] = Regs_Arm9.Sect_display9.B_DISPCNT_Screen_Display_BG2;
      allregs[185] = Regs_Arm9.Sect_display9.B_DISPCNT_Screen_Display_BG3;
      allregs[186] = Regs_Arm9.Sect_display9.B_DISPCNT_Screen_Display_OBJ;
      allregs[187] = Regs_Arm9.Sect_display9.B_DISPCNT_Window_0_Display_Flag;
      allregs[188] = Regs_Arm9.Sect_display9.B_DISPCNT_Window_1_Display_Flag;
      allregs[189] = Regs_Arm9.Sect_display9.B_DISPCNT_OBJ_Wnd_Display_Flag;
      allregs[190] = Regs_Arm9.Sect_display9.B_DISPCNT_Display_Mode;
      allregs[191] = Regs_Arm9.Sect_display9.B_DISPCNT_VRAM_block;
      allregs[192] = Regs_Arm9.Sect_display9.B_DISPCNT_Tile_OBJ_1D_Boundary;
      allregs[193] = Regs_Arm9.Sect_display9.B_DISPCNT_Bitmap_OBJ_1D_Boundary;
      allregs[194] = Regs_Arm9.Sect_display9.B_DISPCNT_OBJ_Process_H_Blank;
      allregs[195] = Regs_Arm9.Sect_display9.B_DISPCNT_Character_Base;
      allregs[196] = Regs_Arm9.Sect_display9.B_DISPCNT_Screen_Base;
      allregs[197] = Regs_Arm9.Sect_display9.B_DISPCNT_BG_Extended_Palettes;
      allregs[198] = Regs_Arm9.Sect_display9.B_DISPCNT_OBJ_Extended_Palettes;
      allregs[199] = Regs_Arm9.Sect_display9.B_BG0CNT;
      allregs[200] = Regs_Arm9.Sect_display9.B_BG0CNT_BG_Priority;
      allregs[201] = Regs_Arm9.Sect_display9.B_BG0CNT_Character_Base_Block;
      allregs[202] = Regs_Arm9.Sect_display9.B_BG0CNT_Mosaic;
      allregs[203] = Regs_Arm9.Sect_display9.B_BG0CNT_Colors_Palettes;
      allregs[204] = Regs_Arm9.Sect_display9.B_BG0CNT_Screen_Base_Block;
      allregs[205] = Regs_Arm9.Sect_display9.B_BG0CNT_Ext_Palette_Slot;
      allregs[206] = Regs_Arm9.Sect_display9.B_BG0CNT_Screen_Size;
      allregs[207] = Regs_Arm9.Sect_display9.B_BG1CNT;
      allregs[208] = Regs_Arm9.Sect_display9.B_BG1CNT_BG_Priority;
      allregs[209] = Regs_Arm9.Sect_display9.B_BG1CNT_Character_Base_Block;
      allregs[210] = Regs_Arm9.Sect_display9.B_BG1CNT_Mosaic;
      allregs[211] = Regs_Arm9.Sect_display9.B_BG1CNT_Colors_Palettes;
      allregs[212] = Regs_Arm9.Sect_display9.B_BG1CNT_Screen_Base_Block;
      allregs[213] = Regs_Arm9.Sect_display9.B_BG1CNT_Ext_Palette_Slot;
      allregs[214] = Regs_Arm9.Sect_display9.B_BG1CNT_Screen_Size;
      allregs[215] = Regs_Arm9.Sect_display9.B_BG2CNT;
      allregs[216] = Regs_Arm9.Sect_display9.B_BG2CNT_BG_Priority;
      allregs[217] = Regs_Arm9.Sect_display9.B_BG2CNT_Character_Base_Block;
      allregs[218] = Regs_Arm9.Sect_display9.B_BG2CNT_Mosaic;
      allregs[219] = Regs_Arm9.Sect_display9.B_BG2CNT_Colors_Palettes;
      allregs[220] = Regs_Arm9.Sect_display9.B_BG2CNT_Screen_Base_Block;
      allregs[221] = Regs_Arm9.Sect_display9.B_BG2CNT_Display_Area_Overflow;
      allregs[222] = Regs_Arm9.Sect_display9.B_BG2CNT_Screen_Size;
      allregs[223] = Regs_Arm9.Sect_display9.B_BG3CNT;
      allregs[224] = Regs_Arm9.Sect_display9.B_BG3CNT_BG_Priority;
      allregs[225] = Regs_Arm9.Sect_display9.B_BG3CNT_Character_Base_Block;
      allregs[226] = Regs_Arm9.Sect_display9.B_BG3CNT_Mosaic;
      allregs[227] = Regs_Arm9.Sect_display9.B_BG3CNT_Colors_Palettes;
      allregs[228] = Regs_Arm9.Sect_display9.B_BG3CNT_Screen_Base_Block;
      allregs[229] = Regs_Arm9.Sect_display9.B_BG3CNT_Display_Area_Overflow;
      allregs[230] = Regs_Arm9.Sect_display9.B_BG3CNT_Screen_Size;
      allregs[231] = Regs_Arm9.Sect_display9.B_BG0HOFS;
      allregs[232] = Regs_Arm9.Sect_display9.B_BG0VOFS;
      allregs[233] = Regs_Arm9.Sect_display9.B_BG1HOFS;
      allregs[234] = Regs_Arm9.Sect_display9.B_BG1VOFS;
      allregs[235] = Regs_Arm9.Sect_display9.B_BG2HOFS;
      allregs[236] = Regs_Arm9.Sect_display9.B_BG2VOFS;
      allregs[237] = Regs_Arm9.Sect_display9.B_BG3HOFS;
      allregs[238] = Regs_Arm9.Sect_display9.B_BG3VOFS;
      allregs[239] = Regs_Arm9.Sect_display9.B_BG2RotScaleParDX;
      allregs[240] = Regs_Arm9.Sect_display9.B_BG2RotScaleParDMX;
      allregs[241] = Regs_Arm9.Sect_display9.B_BG2RotScaleParDY;
      allregs[242] = Regs_Arm9.Sect_display9.B_BG2RotScaleParDMY;
      allregs[243] = Regs_Arm9.Sect_display9.B_BG2RefX;
      allregs[244] = Regs_Arm9.Sect_display9.B_BG2RefY;
      allregs[245] = Regs_Arm9.Sect_display9.B_BG3RotScaleParDX;
      allregs[246] = Regs_Arm9.Sect_display9.B_BG3RotScaleParDMX;
      allregs[247] = Regs_Arm9.Sect_display9.B_BG3RotScaleParDY;
      allregs[248] = Regs_Arm9.Sect_display9.B_BG3RotScaleParDMY;
      allregs[249] = Regs_Arm9.Sect_display9.B_BG3RefX;
      allregs[250] = Regs_Arm9.Sect_display9.B_BG3RefY;
      allregs[251] = Regs_Arm9.Sect_display9.B_WIN0H;
      allregs[252] = Regs_Arm9.Sect_display9.B_WIN0H_X2;
      allregs[253] = Regs_Arm9.Sect_display9.B_WIN0H_X1;
      allregs[254] = Regs_Arm9.Sect_display9.B_WIN1H;
      allregs[255] = Regs_Arm9.Sect_display9.B_WIN1H_X2;
      allregs[256] = Regs_Arm9.Sect_display9.B_WIN1H_X1;
      allregs[257] = Regs_Arm9.Sect_display9.B_WIN0V;
      allregs[258] = Regs_Arm9.Sect_display9.B_WIN0V_Y2;
      allregs[259] = Regs_Arm9.Sect_display9.B_WIN0V_Y1;
      allregs[260] = Regs_Arm9.Sect_display9.B_WIN1V;
      allregs[261] = Regs_Arm9.Sect_display9.B_WIN1V_Y2;
      allregs[262] = Regs_Arm9.Sect_display9.B_WIN1V_Y1;
      allregs[263] = Regs_Arm9.Sect_display9.B_WININ;
      allregs[264] = Regs_Arm9.Sect_display9.B_WININ_Window_0_BG0_Enable;
      allregs[265] = Regs_Arm9.Sect_display9.B_WININ_Window_0_BG1_Enable;
      allregs[266] = Regs_Arm9.Sect_display9.B_WININ_Window_0_BG2_Enable;
      allregs[267] = Regs_Arm9.Sect_display9.B_WININ_Window_0_BG3_Enable;
      allregs[268] = Regs_Arm9.Sect_display9.B_WININ_Window_0_OBJ_Enable;
      allregs[269] = Regs_Arm9.Sect_display9.B_WININ_Window_0_Special_Effect;
      allregs[270] = Regs_Arm9.Sect_display9.B_WININ_Window_1_BG0_Enable;
      allregs[271] = Regs_Arm9.Sect_display9.B_WININ_Window_1_BG1_Enable;
      allregs[272] = Regs_Arm9.Sect_display9.B_WININ_Window_1_BG2_Enable;
      allregs[273] = Regs_Arm9.Sect_display9.B_WININ_Window_1_BG3_Enable;
      allregs[274] = Regs_Arm9.Sect_display9.B_WININ_Window_1_OBJ_Enable;
      allregs[275] = Regs_Arm9.Sect_display9.B_WININ_Window_1_Special_Effect;
      allregs[276] = Regs_Arm9.Sect_display9.B_WINOUT;
      allregs[277] = Regs_Arm9.Sect_display9.B_WINOUT_Outside_BG0_Enable;
      allregs[278] = Regs_Arm9.Sect_display9.B_WINOUT_Outside_BG1_Enable;
      allregs[279] = Regs_Arm9.Sect_display9.B_WINOUT_Outside_BG2_Enable;
      allregs[280] = Regs_Arm9.Sect_display9.B_WINOUT_Outside_BG3_Enable;
      allregs[281] = Regs_Arm9.Sect_display9.B_WINOUT_Outside_OBJ_Enable;
      allregs[282] = Regs_Arm9.Sect_display9.B_WINOUT_Outside_Special_Effect;
      allregs[283] = Regs_Arm9.Sect_display9.B_WINOUT_Objwnd_BG0_Enable;
      allregs[284] = Regs_Arm9.Sect_display9.B_WINOUT_Objwnd_BG1_Enable;
      allregs[285] = Regs_Arm9.Sect_display9.B_WINOUT_Objwnd_BG2_Enable;
      allregs[286] = Regs_Arm9.Sect_display9.B_WINOUT_Objwnd_BG3_Enable;
      allregs[287] = Regs_Arm9.Sect_display9.B_WINOUT_Objwnd_OBJ_Enable;
      allregs[288] = Regs_Arm9.Sect_display9.B_WINOUT_Objwnd_Special_Effect;
      allregs[289] = Regs_Arm9.Sect_display9.B_MOSAIC;
      allregs[290] = Regs_Arm9.Sect_display9.B_MOSAIC_BG_Mosaic_H_Size;
      allregs[291] = Regs_Arm9.Sect_display9.B_MOSAIC_BG_Mosaic_V_Size;
      allregs[292] = Regs_Arm9.Sect_display9.B_MOSAIC_OBJ_Mosaic_H_Size;
      allregs[293] = Regs_Arm9.Sect_display9.B_MOSAIC_OBJ_Mosaic_V_Size;
      allregs[294] = Regs_Arm9.Sect_display9.B_BLDCNT;
      allregs[295] = Regs_Arm9.Sect_display9.B_BLDCNT_BG0_1st_Target_Pixel;
      allregs[296] = Regs_Arm9.Sect_display9.B_BLDCNT_BG1_1st_Target_Pixel;
      allregs[297] = Regs_Arm9.Sect_display9.B_BLDCNT_BG2_1st_Target_Pixel;
      allregs[298] = Regs_Arm9.Sect_display9.B_BLDCNT_BG3_1st_Target_Pixel;
      allregs[299] = Regs_Arm9.Sect_display9.B_BLDCNT_OBJ_1st_Target_Pixel;
      allregs[300] = Regs_Arm9.Sect_display9.B_BLDCNT_BD_1st_Target_Pixel;
      allregs[301] = Regs_Arm9.Sect_display9.B_BLDCNT_Color_Special_Effect;
      allregs[302] = Regs_Arm9.Sect_display9.B_BLDCNT_BG0_2nd_Target_Pixel;
      allregs[303] = Regs_Arm9.Sect_display9.B_BLDCNT_BG1_2nd_Target_Pixel;
      allregs[304] = Regs_Arm9.Sect_display9.B_BLDCNT_BG2_2nd_Target_Pixel;
      allregs[305] = Regs_Arm9.Sect_display9.B_BLDCNT_BG3_2nd_Target_Pixel;
      allregs[306] = Regs_Arm9.Sect_display9.B_BLDCNT_OBJ_2nd_Target_Pixel;
      allregs[307] = Regs_Arm9.Sect_display9.B_BLDCNT_BD_2nd_Target_Pixel;
      allregs[308] = Regs_Arm9.Sect_display9.B_BLDALPHA;
      allregs[309] = Regs_Arm9.Sect_display9.B_BLDALPHA_EVA_Coefficient;
      allregs[310] = Regs_Arm9.Sect_display9.B_BLDALPHA_EVB_Coefficient;
      allregs[311] = Regs_Arm9.Sect_display9.B_BLDY;
      allregs[312] = Regs_Arm9.Sect_display9.B_MASTER_BRIGHT;
      allregs[313] = Regs_Arm9.Sect_display9.B_MASTER_BRIGHT_Factor;
      allregs[314] = Regs_Arm9.Sect_display9.B_MASTER_BRIGHT_Mode;
      allregs[315] = Regs_Arm9.Sect_dma9.DMA0SAD;
      allregs[316] = Regs_Arm9.Sect_dma9.DMA0DAD;
      allregs[317] = Regs_Arm9.Sect_dma9.DMA0CNT_L;
      allregs[318] = Regs_Arm9.Sect_dma9.DMA0CNT_H;
      allregs[319] = Regs_Arm9.Sect_dma9.DMA0CNT_H_Dest_Addr_Control;
      allregs[320] = Regs_Arm9.Sect_dma9.DMA0CNT_H_Source_Adr_Control;
      allregs[321] = Regs_Arm9.Sect_dma9.DMA0CNT_H_DMA_Repeat;
      allregs[322] = Regs_Arm9.Sect_dma9.DMA0CNT_H_DMA_Transfer_Type;
      allregs[323] = Regs_Arm9.Sect_dma9.DMA0CNT_H_DMA_Start_Timing;
      allregs[324] = Regs_Arm9.Sect_dma9.DMA0CNT_H_IRQ_on;
      allregs[325] = Regs_Arm9.Sect_dma9.DMA0CNT_H_DMA_Enable;
      allregs[326] = Regs_Arm9.Sect_dma9.DMA1SAD;
      allregs[327] = Regs_Arm9.Sect_dma9.DMA1DAD;
      allregs[328] = Regs_Arm9.Sect_dma9.DMA1CNT_L;
      allregs[329] = Regs_Arm9.Sect_dma9.DMA1CNT_H;
      allregs[330] = Regs_Arm9.Sect_dma9.DMA1CNT_H_Dest_Addr_Control;
      allregs[331] = Regs_Arm9.Sect_dma9.DMA1CNT_H_Source_Adr_Control;
      allregs[332] = Regs_Arm9.Sect_dma9.DMA1CNT_H_DMA_Repeat;
      allregs[333] = Regs_Arm9.Sect_dma9.DMA1CNT_H_DMA_Transfer_Type;
      allregs[334] = Regs_Arm9.Sect_dma9.DMA1CNT_H_DMA_Start_Timing;
      allregs[335] = Regs_Arm9.Sect_dma9.DMA1CNT_H_IRQ_on;
      allregs[336] = Regs_Arm9.Sect_dma9.DMA1CNT_H_DMA_Enable;
      allregs[337] = Regs_Arm9.Sect_dma9.DMA2SAD;
      allregs[338] = Regs_Arm9.Sect_dma9.DMA2DAD;
      allregs[339] = Regs_Arm9.Sect_dma9.DMA2CNT_L;
      allregs[340] = Regs_Arm9.Sect_dma9.DMA2CNT_H;
      allregs[341] = Regs_Arm9.Sect_dma9.DMA2CNT_H_Dest_Addr_Control;
      allregs[342] = Regs_Arm9.Sect_dma9.DMA2CNT_H_Source_Adr_Control;
      allregs[343] = Regs_Arm9.Sect_dma9.DMA2CNT_H_DMA_Repeat;
      allregs[344] = Regs_Arm9.Sect_dma9.DMA2CNT_H_DMA_Transfer_Type;
      allregs[345] = Regs_Arm9.Sect_dma9.DMA2CNT_H_DMA_Start_Timing;
      allregs[346] = Regs_Arm9.Sect_dma9.DMA2CNT_H_IRQ_on;
      allregs[347] = Regs_Arm9.Sect_dma9.DMA2CNT_H_DMA_Enable;
      allregs[348] = Regs_Arm9.Sect_dma9.DMA3SAD;
      allregs[349] = Regs_Arm9.Sect_dma9.DMA3DAD;
      allregs[350] = Regs_Arm9.Sect_dma9.DMA3CNT_L;
      allregs[351] = Regs_Arm9.Sect_dma9.DMA3CNT_H;
      allregs[352] = Regs_Arm9.Sect_dma9.DMA3CNT_H_Dest_Addr_Control;
      allregs[353] = Regs_Arm9.Sect_dma9.DMA3CNT_H_Source_Adr_Control;
      allregs[354] = Regs_Arm9.Sect_dma9.DMA3CNT_H_DMA_Repeat;
      allregs[355] = Regs_Arm9.Sect_dma9.DMA3CNT_H_DMA_Transfer_Type;
      allregs[356] = Regs_Arm9.Sect_dma9.DMA3CNT_H_Game_Pak_DRQ;
      allregs[357] = Regs_Arm9.Sect_dma9.DMA3CNT_H_DMA_Start_Timing;
      allregs[358] = Regs_Arm9.Sect_dma9.DMA3CNT_H_IRQ_on;
      allregs[359] = Regs_Arm9.Sect_dma9.DMA3CNT_H_DMA_Enable;
      allregs[360] = Regs_Arm9.Sect_dma9.DMA0FILL;
      allregs[361] = Regs_Arm9.Sect_dma9.DMA1FILL;
      allregs[362] = Regs_Arm9.Sect_dma9.DMA2FILL;
      allregs[363] = Regs_Arm9.Sect_dma9.DMA3FILL;
      allregs[364] = Regs_Arm9.Sect_timer9.TM0CNT_L;
      allregs[365] = Regs_Arm9.Sect_timer9.TM0CNT_H;
      allregs[366] = Regs_Arm9.Sect_timer9.TM0CNT_H_Prescaler;
      allregs[367] = Regs_Arm9.Sect_timer9.TM0CNT_H_Count_up;
      allregs[368] = Regs_Arm9.Sect_timer9.TM0CNT_H_Timer_IRQ_Enable;
      allregs[369] = Regs_Arm9.Sect_timer9.TM0CNT_H_Timer_Start_Stop;
      allregs[370] = Regs_Arm9.Sect_timer9.TM1CNT_L;
      allregs[371] = Regs_Arm9.Sect_timer9.TM1CNT_H;
      allregs[372] = Regs_Arm9.Sect_timer9.TM1CNT_H_Prescaler;
      allregs[373] = Regs_Arm9.Sect_timer9.TM1CNT_H_Count_up;
      allregs[374] = Regs_Arm9.Sect_timer9.TM1CNT_H_Timer_IRQ_Enable;
      allregs[375] = Regs_Arm9.Sect_timer9.TM1CNT_H_Timer_Start_Stop;
      allregs[376] = Regs_Arm9.Sect_timer9.TM2CNT_L;
      allregs[377] = Regs_Arm9.Sect_timer9.TM2CNT_H;
      allregs[378] = Regs_Arm9.Sect_timer9.TM2CNT_H_Prescaler;
      allregs[379] = Regs_Arm9.Sect_timer9.TM2CNT_H_Count_up;
      allregs[380] = Regs_Arm9.Sect_timer9.TM2CNT_H_Timer_IRQ_Enable;
      allregs[381] = Regs_Arm9.Sect_timer9.TM2CNT_H_Timer_Start_Stop;
      allregs[382] = Regs_Arm9.Sect_timer9.TM3CNT_L;
      allregs[383] = Regs_Arm9.Sect_timer9.TM3CNT_H;
      allregs[384] = Regs_Arm9.Sect_timer9.TM3CNT_H_Prescaler;
      allregs[385] = Regs_Arm9.Sect_timer9.TM3CNT_H_Count_up;
      allregs[386] = Regs_Arm9.Sect_timer9.TM3CNT_H_Timer_IRQ_Enable;
      allregs[387] = Regs_Arm9.Sect_timer9.TM3CNT_H_Timer_Start_Stop;
      allregs[388] = Regs_Arm9.Sect_keypad9.KEYINPUT;
      allregs[389] = Regs_Arm9.Sect_keypad9.KEYCNT;
      allregs[390] = Regs_Arm9.Sect_system9.IPCSYNC;
      allregs[391] = Regs_Arm9.Sect_system9.IPCSYNC_Data_from_IPCSYNC;
      allregs[392] = Regs_Arm9.Sect_system9.IPCSYNC_Data_to_IPCSYNC;
      allregs[393] = Regs_Arm9.Sect_system9.IPCSYNC_IRQ;
      allregs[394] = Regs_Arm9.Sect_system9.IPCSYNC_Ena_IRQ_from_remote_CPU;
      allregs[395] = Regs_Arm9.Sect_system9.IPCFIFOCNT;
      allregs[396] = Regs_Arm9.Sect_system9.IPCFIFOCNT_Send_Fifo_Empty_Status;
      allregs[397] = Regs_Arm9.Sect_system9.IPCFIFOCNT_Send_Fifo_Full_Status;
      allregs[398] = Regs_Arm9.Sect_system9.IPCFIFOCNT_Send_Fifo_Empty_IRQ;
      allregs[399] = Regs_Arm9.Sect_system9.IPCFIFOCNT_Send_Fifo_Clear;
      allregs[400] = Regs_Arm9.Sect_system9.IPCFIFOCNT_Receive_Fifo_Empty;
      allregs[401] = Regs_Arm9.Sect_system9.IPCFIFOCNT_Receive_Fifo_Full;
      allregs[402] = Regs_Arm9.Sect_system9.IPCFIFOCNT_Receive_Fifo_Not_Empty_IRQ;
      allregs[403] = Regs_Arm9.Sect_system9.IPCFIFOCNT_Error_Read_Empty_Send_Full;
      allregs[404] = Regs_Arm9.Sect_system9.IPCFIFOCNT_Enable_Send_Receive_Fifo;
      allregs[405] = Regs_Arm9.Sect_system9.IPCFIFOSEND;
      allregs[406] = Regs_Arm9.Sect_system9.IPCFIFORECV;
      allregs[407] = Regs_Arm9.Sect_system9.AUXSPICNT;
      allregs[408] = Regs_Arm9.Sect_system9.AUXSPICNT_SPI_Baudrate;
      allregs[409] = Regs_Arm9.Sect_system9.AUXSPICNT_SPI_Hold_Chipselect;
      allregs[410] = Regs_Arm9.Sect_system9.AUXSPICNT_SPI_Busy;
      allregs[411] = Regs_Arm9.Sect_system9.AUXSPICNT_NDS_Slot_Mode;
      allregs[412] = Regs_Arm9.Sect_system9.AUXSPICNT_Transfer_Ready_IRQ;
      allregs[413] = Regs_Arm9.Sect_system9.AUXSPICNT_NDS_Slot_Enable;
      allregs[414] = Regs_Arm9.Sect_system9.AUXSPIDATA;
      allregs[415] = Regs_Arm9.Sect_system9.ROMCTRL;
      allregs[416] = Regs_Arm9.Sect_system9.ROMCTRL_KEY1_gap1_length;
      allregs[417] = Regs_Arm9.Sect_system9.ROMCTRL_KEY2_encrypt_data;
      allregs[418] = Regs_Arm9.Sect_system9.ROMCTRL_SE;
      allregs[419] = Regs_Arm9.Sect_system9.ROMCTRL_KEY2_Apply_Seed;
      allregs[420] = Regs_Arm9.Sect_system9.ROMCTRL_KEY1_gap2_length;
      allregs[421] = Regs_Arm9.Sect_system9.ROMCTRL_KEY2_encrypt_cmd;
      allregs[422] = Regs_Arm9.Sect_system9.ROMCTRL_Data_Word_Status;
      allregs[423] = Regs_Arm9.Sect_system9.ROMCTRL_Data_Block_size;
      allregs[424] = Regs_Arm9.Sect_system9.ROMCTRL_Transfer_CLK_rate;
      allregs[425] = Regs_Arm9.Sect_system9.ROMCTRL_KEY1_Gap_CLKs;
      allregs[426] = Regs_Arm9.Sect_system9.ROMCTRL_RESB_Release_Reset;
      allregs[427] = Regs_Arm9.Sect_system9.ROMCTRL_WR;
      allregs[428] = Regs_Arm9.Sect_system9.ROMCTRL_Block_Start_Status;
      allregs[429] = Regs_Arm9.Sect_system9.Gamecard_bus_Command_1;
      allregs[430] = Regs_Arm9.Sect_system9.Gamecard_bus_Command_2;
      allregs[431] = Regs_Arm9.Sect_system9.Gamecard_bus_DataIn;
      allregs[432] = Regs_Arm9.Sect_system9.Encryption_Seed_0_Lower;
      allregs[433] = Regs_Arm9.Sect_system9.Encryption_Seed_1_Lower;
      allregs[434] = Regs_Arm9.Sect_system9.Encryption_Seed_0_Upper;
      allregs[435] = Regs_Arm9.Sect_system9.Encryption_Seed_1_Upper;
      allregs[436] = Regs_Arm9.Sect_system9.EXMEMCNT;
      allregs[437] = Regs_Arm9.Sect_system9.EXMEMCNT_GBASlot_SRAM_Access_Time;
      allregs[438] = Regs_Arm9.Sect_system9.EXMEMCNT_GBASlot_ROM_1st_Access_Time;
      allregs[439] = Regs_Arm9.Sect_system9.EXMEMCNT_GBASlot_ROM_2nd_Access_Time;
      allregs[440] = Regs_Arm9.Sect_system9.EXMEMCNT_GBASlot_PHI_pin_out;
      allregs[441] = Regs_Arm9.Sect_system9.EXMEMCNT_GBASlot_Access_Rights;
      allregs[442] = Regs_Arm9.Sect_system9.EXMEMCNT_NDSSlot_Access_Rights;
      allregs[443] = Regs_Arm9.Sect_system9.EXMEMCNT_SET;
      allregs[444] = Regs_Arm9.Sect_system9.EXMEMCNT_MainMem_Interface_Mode;
      allregs[445] = Regs_Arm9.Sect_system9.EXMEMCNT_MainMem_Access_Priority;
      allregs[446] = Regs_Arm9.Sect_system9.IME;
      allregs[447] = Regs_Arm9.Sect_system9.IE;
      allregs[448] = Regs_Arm9.Sect_system9.IE_LCD_V_Blank;
      allregs[449] = Regs_Arm9.Sect_system9.IE_LCD_H_Blank;
      allregs[450] = Regs_Arm9.Sect_system9.IE_LCD_V_Counter_Match;
      allregs[451] = Regs_Arm9.Sect_system9.IE_Timer_0;
      allregs[452] = Regs_Arm9.Sect_system9.IE_Timer_1;
      allregs[453] = Regs_Arm9.Sect_system9.IE_Timer_2;
      allregs[454] = Regs_Arm9.Sect_system9.IE_Timer_3;
      allregs[455] = Regs_Arm9.Sect_system9.IE_DMA_0;
      allregs[456] = Regs_Arm9.Sect_system9.IE_DMA_1;
      allregs[457] = Regs_Arm9.Sect_system9.IE_DMA_2;
      allregs[458] = Regs_Arm9.Sect_system9.IE_DMA_3;
      allregs[459] = Regs_Arm9.Sect_system9.IE_Keypad;
      allregs[460] = Regs_Arm9.Sect_system9.IE_GBA_Slot_external_IRQ;
      allregs[461] = Regs_Arm9.Sect_system9.IE_IPC_Sync;
      allregs[462] = Regs_Arm9.Sect_system9.IE_IPC_Send_FIFO_Empty;
      allregs[463] = Regs_Arm9.Sect_system9.IE_IPC_Recv_FIFO_Not_Empty;
      allregs[464] = Regs_Arm9.Sect_system9.IE_NDS_Slot_Transfer_Complete;
      allregs[465] = Regs_Arm9.Sect_system9.IE_NDS_Slot_IREQ_MC;
      allregs[466] = Regs_Arm9.Sect_system9.IE_Geometry_Command_FIFO;
      allregs[467] = Regs_Arm9.Sect_system9.IE_unused;
      allregs[468] = Regs_Arm9.Sect_system9.IF;
      allregs[469] = Regs_Arm9.Sect_system9.IF_LCD_V_Blank;
      allregs[470] = Regs_Arm9.Sect_system9.IF_LCD_H_Blank;
      allregs[471] = Regs_Arm9.Sect_system9.IF_LCD_V_Counter_Match;
      allregs[472] = Regs_Arm9.Sect_system9.IF_Timer_0;
      allregs[473] = Regs_Arm9.Sect_system9.IF_Timer_1;
      allregs[474] = Regs_Arm9.Sect_system9.IF_Timer_2;
      allregs[475] = Regs_Arm9.Sect_system9.IF_Timer_3;
      allregs[476] = Regs_Arm9.Sect_system9.IF_DMA_0;
      allregs[477] = Regs_Arm9.Sect_system9.IF_DMA_1;
      allregs[478] = Regs_Arm9.Sect_system9.IF_DMA_2;
      allregs[479] = Regs_Arm9.Sect_system9.IF_DMA_3;
      allregs[480] = Regs_Arm9.Sect_system9.IF_Keypad;
      allregs[481] = Regs_Arm9.Sect_system9.IF_GBA_Slot_external_IRQ;
      allregs[482] = Regs_Arm9.Sect_system9.IF_IPC_Sync;
      allregs[483] = Regs_Arm9.Sect_system9.IF_IPC_Send_FIFO_Empty;
      allregs[484] = Regs_Arm9.Sect_system9.IF_IPC_Recv_FIFO_Not_Empty;
      allregs[485] = Regs_Arm9.Sect_system9.IF_NDS_Slot_Transfer_Complete;
      allregs[486] = Regs_Arm9.Sect_system9.IF_NDS_Slot_IREQ_MC;
      allregs[487] = Regs_Arm9.Sect_system9.IF_Geometry_Command_FIFO;
      allregs[488] = Regs_Arm9.Sect_system9.MemControl1;
      allregs[489] = Regs_Arm9.Sect_system9.MemControl1_VRAM_A_MST;
      allregs[490] = Regs_Arm9.Sect_system9.MemControl1_VRAM_A_Offset;
      allregs[491] = Regs_Arm9.Sect_system9.MemControl1_VRAM_A_Enable;
      allregs[492] = Regs_Arm9.Sect_system9.MemControl1_VRAM_B_MST;
      allregs[493] = Regs_Arm9.Sect_system9.MemControl1_VRAM_B_Offset;
      allregs[494] = Regs_Arm9.Sect_system9.MemControl1_VRAM_B_Enable;
      allregs[495] = Regs_Arm9.Sect_system9.MemControl1_VRAM_C_MST;
      allregs[496] = Regs_Arm9.Sect_system9.MemControl1_VRAM_C_Offset;
      allregs[497] = Regs_Arm9.Sect_system9.MemControl1_VRAM_C_Enable;
      allregs[498] = Regs_Arm9.Sect_system9.MemControl1_VRAM_D_MST;
      allregs[499] = Regs_Arm9.Sect_system9.MemControl1_VRAM_D_Offset;
      allregs[500] = Regs_Arm9.Sect_system9.MemControl1_VRAM_D_Enable;
      allregs[501] = Regs_Arm9.Sect_system9.MemControl2;
      allregs[502] = Regs_Arm9.Sect_system9.MemControl2_VRAM_E_MST;
      allregs[503] = Regs_Arm9.Sect_system9.MemControl2_VRAM_E_Offset;
      allregs[504] = Regs_Arm9.Sect_system9.MemControl2_VRAM_E_Enable;
      allregs[505] = Regs_Arm9.Sect_system9.MemControl2_VRAM_F_MST;
      allregs[506] = Regs_Arm9.Sect_system9.MemControl2_VRAM_F_Offset;
      allregs[507] = Regs_Arm9.Sect_system9.MemControl2_VRAM_F_Enable;
      allregs[508] = Regs_Arm9.Sect_system9.MemControl2_VRAM_G_MST;
      allregs[509] = Regs_Arm9.Sect_system9.MemControl2_VRAM_G_Offset;
      allregs[510] = Regs_Arm9.Sect_system9.MemControl2_VRAM_G_Enable;
      allregs[511] = Regs_Arm9.Sect_system9.MemControl2_WRAM;
      allregs[512] = Regs_Arm9.Sect_system9.MemControl3;
      allregs[513] = Regs_Arm9.Sect_system9.MemControl3_VRAM_H_MST;
      allregs[514] = Regs_Arm9.Sect_system9.MemControl3_VRAM_H_Offset;
      allregs[515] = Regs_Arm9.Sect_system9.MemControl3_VRAM_H_Enable;
      allregs[516] = Regs_Arm9.Sect_system9.MemControl3_VRAM_I_MST;
      allregs[517] = Regs_Arm9.Sect_system9.MemControl3_VRAM_I_Offset;
      allregs[518] = Regs_Arm9.Sect_system9.MemControl3_VRAM_I_Enable;
      allregs[519] = Regs_Arm9.Sect_system9.DIVCNT;
      allregs[520] = Regs_Arm9.Sect_system9.DIVCNT_Division_Mode;
      allregs[521] = Regs_Arm9.Sect_system9.DIVCNT_Division_by_zero;
      allregs[522] = Regs_Arm9.Sect_system9.DIVCNT_Busy;
      allregs[523] = Regs_Arm9.Sect_system9.DIV_NUMER_Low;
      allregs[524] = Regs_Arm9.Sect_system9.DIV_NUMER_High;
      allregs[525] = Regs_Arm9.Sect_system9.DIV_DENOM_Low;
      allregs[526] = Regs_Arm9.Sect_system9.DIV_DENOM_High;
      allregs[527] = Regs_Arm9.Sect_system9.DIV_RESULT_Low;
      allregs[528] = Regs_Arm9.Sect_system9.DIV_RESULT_High;
      allregs[529] = Regs_Arm9.Sect_system9.DIVREM_RESULT_Low;
      allregs[530] = Regs_Arm9.Sect_system9.DIVREM_RESULT_High;
      allregs[531] = Regs_Arm9.Sect_system9.SQRTCN;
      allregs[532] = Regs_Arm9.Sect_system9.SQRTCN_Mode;
      allregs[533] = Regs_Arm9.Sect_system9.SQRTCN_Busy;
      allregs[534] = Regs_Arm9.Sect_system9.SQRT_RESULT;
      allregs[535] = Regs_Arm9.Sect_system9.SQRT_PARAM_Low;
      allregs[536] = Regs_Arm9.Sect_system9.SQRT_PARAM_High;
      allregs[537] = Regs_Arm9.Sect_system9.POSTFLG;
      allregs[538] = Regs_Arm9.Sect_system9.POSTFLG_Flag;
      allregs[539] = Regs_Arm9.Sect_system9.POSTFLG_RW;
      allregs[540] = Regs_Arm9.Sect_system9.POWCNT1;
      allregs[541] = Regs_Arm9.Sect_system9.POWCNT1_Enable_Flag_for_both_LCDs;
      allregs[542] = Regs_Arm9.Sect_system9.POWCNT1_2D_Graphics_Engine_A;
      allregs[543] = Regs_Arm9.Sect_system9.POWCNT1_3D_Rendering_Engine;
      allregs[544] = Regs_Arm9.Sect_system9.POWCNT1_3D_Geometry_Engine;
      allregs[545] = Regs_Arm9.Sect_system9.POWCNT1_2D_Graphics_Engine_B;
      allregs[546] = Regs_Arm9.Sect_system9.POWCNT1_Display_Swap;
      allregs[547] = Regs_Arm9.Sect_3D9.CLEAR_COLOR;
      allregs[548] = Regs_Arm9.Sect_3D9.CLEAR_COLOR_Red;
      allregs[549] = Regs_Arm9.Sect_3D9.CLEAR_COLOR_Green;
      allregs[550] = Regs_Arm9.Sect_3D9.CLEAR_COLOR_Blue;
      allregs[551] = Regs_Arm9.Sect_3D9.CLEAR_COLOR_Fog;
      allregs[552] = Regs_Arm9.Sect_3D9.CLEAR_COLOR_Alpha;
      allregs[553] = Regs_Arm9.Sect_3D9.CLEAR_COLOR_Clear_Polygon_ID;
      allregs[554] = Regs_Arm9.Sect_3D9.CLEAR_DEPTH;
      allregs[555] = Regs_Arm9.Sect_3D9.CLEAR_DEPTH_DEPTH;
      allregs[556] = Regs_Arm9.Sect_3D9.CLEAR_DEPTH_X_Offset;
      allregs[557] = Regs_Arm9.Sect_3D9.CLEAR_DEPTH_Y_Offset;
      allregs[558] = Regs_Arm9.Sect_3D9.GXFIFO;
      allregs[559] = Regs_Arm9.Sect_3D9.GXSTAT;
      allregs[560] = Regs_Arm9.Sect_3D9.GXSTAT_TestBusy;
      allregs[561] = Regs_Arm9.Sect_3D9.GXSTAT_BoxTest_Result;
      allregs[562] = Regs_Arm9.Sect_3D9.GXSTAT_PosVect_Matrix_Stack_Level;
      allregs[563] = Regs_Arm9.Sect_3D9.GXSTAT_Proj_Matrix_Stack_Level;
      allregs[564] = Regs_Arm9.Sect_3D9.GXSTAT_Matrix_Stack_Busy;
      allregs[565] = Regs_Arm9.Sect_3D9.GXSTAT_Matrix_Stack_Error;
      allregs[566] = Regs_Arm9.Sect_3D9.GXSTAT_Command_FIFO_Entries;
      allregs[567] = Regs_Arm9.Sect_3D9.GXSTAT_Command_FIFO_Less_Half;
      allregs[568] = Regs_Arm9.Sect_3D9.GXSTAT_Command_FIFO_Empty;
      allregs[569] = Regs_Arm9.Sect_3D9.GXSTAT_Geometry_Engine_Busy;
      allregs[570] = Regs_Arm9.Sect_3D9.GXSTAT_Command_FIFO_IRQ;
      // DISPSTAT at 0x0004 = 0x0004;
      data[4] = 4 & 0xFF;
      // A_BG2RotScaleParDX at 0x0020 = 256;
      data[32] = 256 & 0xFF;
      data[33] = (256 >> 8) & 0xFF;
      // A_BG2RotScaleParDMY at 0x0024 = 256;
      data[36] = 16777216 & 0xFF;
      data[37] = (16777216 >> 8) & 0xFF;
      data[38] = (16777216 >> 16) & 0xFF;
      data[39] = (16777216 >> 24) & 0xFF;
      // A_BG3RotScaleParDX at 0x0030 = 256;
      data[48] = 256 & 0xFF;
      data[49] = (256 >> 8) & 0xFF;
      // A_BG3RotScaleParDMY at 0x0034 = 256;
      data[52] = 16777216 & 0xFF;
      data[53] = (16777216 >> 8) & 0xFF;
      data[54] = (16777216 >> 16) & 0xFF;
      data[55] = (16777216 >> 24) & 0xFF;
      // B_BG2RotScaleParDX at 0x1020 = 256;
      data[4128] = 256 & 0xFF;
      data[4129] = (256 >> 8) & 0xFF;
      // B_BG2RotScaleParDMY at 0x1024 = 256;
      data[4132] = 16777216 & 0xFF;
      data[4133] = (16777216 >> 8) & 0xFF;
      data[4134] = (16777216 >> 16) & 0xFF;
      data[4135] = (16777216 >> 24) & 0xFF;
      // B_BG3RotScaleParDX at 0x1030 = 256;
      data[4144] = 256 & 0xFF;
      data[4145] = (256 >> 8) & 0xFF;
      // B_BG3RotScaleParDMY at 0x1034 = 256;
      data[4148] = 16777216 & 0xFF;
      data[4149] = (16777216 >> 8) & 0xFF;
      data[4150] = (16777216 >> 16) & 0xFF;
      data[4151] = (16777216 >> 24) & 0xFF;
      // MemControl2_WRAM at 0x244 = 3;
      data[580] = 50331648 & 0xFF;
      data[581] = (50331648 >> 8) & 0xFF;
      data[582] = (50331648 >> 16) & 0xFF;
      data[583] = (50331648 >> 24) & 0xFF;
      // POSTFLG_Flag at 0x300 = 1;
      data[768] = 1 & 0xFF;
      // POWCNT1 at 0x304 = 33295;
      data[772] = 33295 & 0xFF;
      data[773] = (33295 >> 8) & 0xFF;
      // GXSTAT at 0x0600 = 0x6000000;
      data[1536] = 100663296 & 0xFF;
      data[1537] = (100663296 >> 8) & 0xFF;
      data[1538] = (100663296 >> 16) & 0xFF;
      data[1539] = (100663296 >> 24) & 0xFF;

    // A_DISPCNT at 0x0000 = 0xFFFFFFFF;
    rwmask[0] = (byte)(0xFFFFFFFF & 0xFF);
    rwmask[1] = (byte)((0xFFFFFFFF >> 8) & 0xFF);
    rwmask[2] = (byte)((0xFFFFFFFF >> 16) & 0xFF);
    rwmask[3] = (byte)((0xFFFFFFFF >> 24) & 0xFF);
    // DISPSTAT at 0x0004 = 0xFFFFFFFF;
    rwmask[4] = (byte)(0xFFFFFFFF & 0xFF);
    rwmask[5] = (byte)((0xFFFFFFFF >> 8) & 0xFF);
    rwmask[6] = (byte)((0xFFFFFFFF >> 16) & 0xFF);
    rwmask[7] = (byte)((0xFFFFFFFF >> 24) & 0xFF);
    // A_BG0CNT at 0x0008 = 0xFFFFFFFF;
    rwmask[8] = (byte)(0xFFFFFFFF & 0xFF);
    rwmask[9] = (byte)((0xFFFFFFFF >> 8) & 0xFF);
    rwmask[10] = (byte)((0xFFFFFFFF >> 16) & 0xFF);
    rwmask[11] = (byte)((0xFFFFFFFF >> 24) & 0xFF);
    // A_BG2CNT at 0x000C = 0xFFFFFFFF;
    rwmask[12] = (byte)(0xFFFFFFFF & 0xFF);
    rwmask[13] = (byte)((0xFFFFFFFF >> 8) & 0xFF);
    rwmask[14] = (byte)((0xFFFFFFFF >> 16) & 0xFF);
    rwmask[15] = (byte)((0xFFFFFFFF >> 24) & 0xFF);
    // A_BG0HOFS at 0x0010 = 0x0;
    rwmask[16] = (byte)(0x0 & 0xFF);
    rwmask[17] = (byte)((0x0 >> 8) & 0xFF);
    rwmask[18] = (byte)((0x0 >> 16) & 0xFF);
    rwmask[19] = (byte)((0x0 >> 24) & 0xFF);
    // A_BG1HOFS at 0x0014 = 0x0;
    rwmask[20] = (byte)(0x0 & 0xFF);
    rwmask[21] = (byte)((0x0 >> 8) & 0xFF);
    rwmask[22] = (byte)((0x0 >> 16) & 0xFF);
    rwmask[23] = (byte)((0x0 >> 24) & 0xFF);
    // A_BG2HOFS at 0x0018 = 0x0;
    rwmask[24] = (byte)(0x0 & 0xFF);
    rwmask[25] = (byte)((0x0 >> 8) & 0xFF);
    rwmask[26] = (byte)((0x0 >> 16) & 0xFF);
    rwmask[27] = (byte)((0x0 >> 24) & 0xFF);
    // A_BG3HOFS at 0x001C = 0x0;
    rwmask[28] = (byte)(0x0 & 0xFF);
    rwmask[29] = (byte)((0x0 >> 8) & 0xFF);
    rwmask[30] = (byte)((0x0 >> 16) & 0xFF);
    rwmask[31] = (byte)((0x0 >> 24) & 0xFF);
    // A_BG2RotScaleParDX at 0x0020 = 0x0;
    rwmask[32] = (byte)(0x0 & 0xFF);
    rwmask[33] = (byte)((0x0 >> 8) & 0xFF);
    rwmask[34] = (byte)((0x0 >> 16) & 0xFF);
    rwmask[35] = (byte)((0x0 >> 24) & 0xFF);
    // A_BG2RotScaleParDY at 0x0024 = 0x0;
    rwmask[36] = (byte)(0x0 & 0xFF);
    rwmask[37] = (byte)((0x0 >> 8) & 0xFF);
    rwmask[38] = (byte)((0x0 >> 16) & 0xFF);
    rwmask[39] = (byte)((0x0 >> 24) & 0xFF);
    // A_BG2RefX at 0x0028 = 0x0;
    rwmask[40] = (byte)(0x0 & 0xFF);
    rwmask[41] = (byte)((0x0 >> 8) & 0xFF);
    rwmask[42] = (byte)((0x0 >> 16) & 0xFF);
    rwmask[43] = (byte)((0x0 >> 24) & 0xFF);
    // A_BG2RefY at 0x002C = 0x0;
    rwmask[44] = (byte)(0x0 & 0xFF);
    rwmask[45] = (byte)((0x0 >> 8) & 0xFF);
    rwmask[46] = (byte)((0x0 >> 16) & 0xFF);
    rwmask[47] = (byte)((0x0 >> 24) & 0xFF);
    // A_BG3RotScaleParDX at 0x0030 = 0x0;
    rwmask[48] = (byte)(0x0 & 0xFF);
    rwmask[49] = (byte)((0x0 >> 8) & 0xFF);
    rwmask[50] = (byte)((0x0 >> 16) & 0xFF);
    rwmask[51] = (byte)((0x0 >> 24) & 0xFF);
    // A_BG3RotScaleParDY at 0x0034 = 0x0;
    rwmask[52] = (byte)(0x0 & 0xFF);
    rwmask[53] = (byte)((0x0 >> 8) & 0xFF);
    rwmask[54] = (byte)((0x0 >> 16) & 0xFF);
    rwmask[55] = (byte)((0x0 >> 24) & 0xFF);
    // A_BG3RefX at 0x0038 = 0x0;
    rwmask[56] = (byte)(0x0 & 0xFF);
    rwmask[57] = (byte)((0x0 >> 8) & 0xFF);
    rwmask[58] = (byte)((0x0 >> 16) & 0xFF);
    rwmask[59] = (byte)((0x0 >> 24) & 0xFF);
    // A_BG3RefY at 0x003C = 0x0;
    rwmask[60] = (byte)(0x0 & 0xFF);
    rwmask[61] = (byte)((0x0 >> 8) & 0xFF);
    rwmask[62] = (byte)((0x0 >> 16) & 0xFF);
    rwmask[63] = (byte)((0x0 >> 24) & 0xFF);
    // A_WIN0H at 0x0040 = 0x0;
    rwmask[64] = (byte)(0x0 & 0xFF);
    rwmask[65] = (byte)((0x0 >> 8) & 0xFF);
    rwmask[66] = (byte)((0x0 >> 16) & 0xFF);
    rwmask[67] = (byte)((0x0 >> 24) & 0xFF);
    // A_WIN0V at 0x0044 = 0x0;
    rwmask[68] = (byte)(0x0 & 0xFF);
    rwmask[69] = (byte)((0x0 >> 8) & 0xFF);
    rwmask[70] = (byte)((0x0 >> 16) & 0xFF);
    rwmask[71] = (byte)((0x0 >> 24) & 0xFF);
    // A_WININ at 0x0048 = 0x3F3F3F3F;
    rwmask[72] = (byte)(0x3F3F3F3F & 0xFF);
    rwmask[73] = (byte)((0x3F3F3F3F >> 8) & 0xFF);
    rwmask[74] = (byte)((0x3F3F3F3F >> 16) & 0xFF);
    rwmask[75] = (byte)((0x3F3F3F3F >> 24) & 0xFF);
    // A_MOSAIC at 0x004C = 0x0;
    rwmask[76] = (byte)(0x0 & 0xFF);
    rwmask[77] = (byte)((0x0 >> 8) & 0xFF);
    rwmask[78] = (byte)((0x0 >> 16) & 0xFF);
    rwmask[79] = (byte)((0x0 >> 24) & 0xFF);
    // A_BLDCNT at 0x0050 = 0x1F1F3FFF;
    rwmask[80] = (byte)(0x1F1F3FFF & 0xFF);
    rwmask[81] = (byte)((0x1F1F3FFF >> 8) & 0xFF);
    rwmask[82] = (byte)((0x1F1F3FFF >> 16) & 0xFF);
    rwmask[83] = (byte)((0x1F1F3FFF >> 24) & 0xFF);
    // A_BLDY at 0x0054 = 0x0;
    rwmask[84] = (byte)(0x0 & 0xFF);
    rwmask[85] = (byte)((0x0 >> 8) & 0xFF);
    rwmask[86] = (byte)((0x0 >> 16) & 0xFF);
    rwmask[87] = (byte)((0x0 >> 24) & 0xFF);
    // DISP3DCNT at 0x0060 = 0x7FFF;
    rwmask[96] = (byte)(0x7FFF & 0xFF);
    rwmask[97] = (byte)((0x7FFF >> 8) & 0xFF);
    rwmask[98] = (byte)((0x7FFF >> 16) & 0xFF);
    rwmask[99] = (byte)((0x7FFF >> 24) & 0xFF);
    // DISPCAPCNT at 0x0064 = 0x0;
    rwmask[100] = (byte)(0x0 & 0xFF);
    rwmask[101] = (byte)((0x0 >> 8) & 0xFF);
    rwmask[102] = (byte)((0x0 >> 16) & 0xFF);
    rwmask[103] = (byte)((0x0 >> 24) & 0xFF);
    // DISP_MMEM_FIFO at 0x0068 = 0x0;
    rwmask[104] = (byte)(0x0 & 0xFF);
    rwmask[105] = (byte)((0x0 >> 8) & 0xFF);
    rwmask[106] = (byte)((0x0 >> 16) & 0xFF);
    rwmask[107] = (byte)((0x0 >> 24) & 0xFF);
    // A_MASTER_BRIGHT at 0x006C = 0x0;
    rwmask[108] = (byte)(0x0 & 0xFF);
    rwmask[109] = (byte)((0x0 >> 8) & 0xFF);
    rwmask[110] = (byte)((0x0 >> 16) & 0xFF);
    rwmask[111] = (byte)((0x0 >> 24) & 0xFF);
    // DMA0SAD at 0xB0 = 0xFFFFFFFF;
    rwmask[176] = (byte)(0xFFFFFFFF & 0xFF);
    rwmask[177] = (byte)((0xFFFFFFFF >> 8) & 0xFF);
    rwmask[178] = (byte)((0xFFFFFFFF >> 16) & 0xFF);
    rwmask[179] = (byte)((0xFFFFFFFF >> 24) & 0xFF);
    // DMA0DAD at 0xB4 = 0xFFFFFFFF;
    rwmask[180] = (byte)(0xFFFFFFFF & 0xFF);
    rwmask[181] = (byte)((0xFFFFFFFF >> 8) & 0xFF);
    rwmask[182] = (byte)((0xFFFFFFFF >> 16) & 0xFF);
    rwmask[183] = (byte)((0xFFFFFFFF >> 24) & 0xFF);
    // DMA0CNT_L at 0xB8 = 0xFFFFFFFF;
    rwmask[184] = (byte)(0xFFFFFFFF & 0xFF);
    rwmask[185] = (byte)((0xFFFFFFFF >> 8) & 0xFF);
    rwmask[186] = (byte)((0xFFFFFFFF >> 16) & 0xFF);
    rwmask[187] = (byte)((0xFFFFFFFF >> 24) & 0xFF);
    // DMA1SAD at 0xBC = 0xFFFFFFFF;
    rwmask[188] = (byte)(0xFFFFFFFF & 0xFF);
    rwmask[189] = (byte)((0xFFFFFFFF >> 8) & 0xFF);
    rwmask[190] = (byte)((0xFFFFFFFF >> 16) & 0xFF);
    rwmask[191] = (byte)((0xFFFFFFFF >> 24) & 0xFF);
    // DMA1DAD at 0xC0 = 0xFFFFFFFF;
    rwmask[192] = (byte)(0xFFFFFFFF & 0xFF);
    rwmask[193] = (byte)((0xFFFFFFFF >> 8) & 0xFF);
    rwmask[194] = (byte)((0xFFFFFFFF >> 16) & 0xFF);
    rwmask[195] = (byte)((0xFFFFFFFF >> 24) & 0xFF);
    // DMA1CNT_L at 0xC4 = 0xFFFFFFFF;
    rwmask[196] = (byte)(0xFFFFFFFF & 0xFF);
    rwmask[197] = (byte)((0xFFFFFFFF >> 8) & 0xFF);
    rwmask[198] = (byte)((0xFFFFFFFF >> 16) & 0xFF);
    rwmask[199] = (byte)((0xFFFFFFFF >> 24) & 0xFF);
    // DMA2SAD at 0xC8 = 0xFFFFFFFF;
    rwmask[200] = (byte)(0xFFFFFFFF & 0xFF);
    rwmask[201] = (byte)((0xFFFFFFFF >> 8) & 0xFF);
    rwmask[202] = (byte)((0xFFFFFFFF >> 16) & 0xFF);
    rwmask[203] = (byte)((0xFFFFFFFF >> 24) & 0xFF);
    // DMA2DAD at 0xCC = 0xFFFFFFFF;
    rwmask[204] = (byte)(0xFFFFFFFF & 0xFF);
    rwmask[205] = (byte)((0xFFFFFFFF >> 8) & 0xFF);
    rwmask[206] = (byte)((0xFFFFFFFF >> 16) & 0xFF);
    rwmask[207] = (byte)((0xFFFFFFFF >> 24) & 0xFF);
    // DMA2CNT_L at 0xD0 = 0xFFFFFFFF;
    rwmask[208] = (byte)(0xFFFFFFFF & 0xFF);
    rwmask[209] = (byte)((0xFFFFFFFF >> 8) & 0xFF);
    rwmask[210] = (byte)((0xFFFFFFFF >> 16) & 0xFF);
    rwmask[211] = (byte)((0xFFFFFFFF >> 24) & 0xFF);
    // DMA3SAD at 0xD4 = 0xFFFFFFFF;
    rwmask[212] = (byte)(0xFFFFFFFF & 0xFF);
    rwmask[213] = (byte)((0xFFFFFFFF >> 8) & 0xFF);
    rwmask[214] = (byte)((0xFFFFFFFF >> 16) & 0xFF);
    rwmask[215] = (byte)((0xFFFFFFFF >> 24) & 0xFF);
    // DMA3DAD at 0xD8 = 0xFFFFFFFF;
    rwmask[216] = (byte)(0xFFFFFFFF & 0xFF);
    rwmask[217] = (byte)((0xFFFFFFFF >> 8) & 0xFF);
    rwmask[218] = (byte)((0xFFFFFFFF >> 16) & 0xFF);
    rwmask[219] = (byte)((0xFFFFFFFF >> 24) & 0xFF);
    // DMA3CNT_L at 0xDC = 0xFFFFFFFF;
    rwmask[220] = (byte)(0xFFFFFFFF & 0xFF);
    rwmask[221] = (byte)((0xFFFFFFFF >> 8) & 0xFF);
    rwmask[222] = (byte)((0xFFFFFFFF >> 16) & 0xFF);
    rwmask[223] = (byte)((0xFFFFFFFF >> 24) & 0xFF);
    // DMA0FILL at 0xE0 = 0xFFFFFFFF;
    rwmask[224] = (byte)(0xFFFFFFFF & 0xFF);
    rwmask[225] = (byte)((0xFFFFFFFF >> 8) & 0xFF);
    rwmask[226] = (byte)((0xFFFFFFFF >> 16) & 0xFF);
    rwmask[227] = (byte)((0xFFFFFFFF >> 24) & 0xFF);
    // DMA1FILL at 0xE4 = 0xFFFFFFFF;
    rwmask[228] = (byte)(0xFFFFFFFF & 0xFF);
    rwmask[229] = (byte)((0xFFFFFFFF >> 8) & 0xFF);
    rwmask[230] = (byte)((0xFFFFFFFF >> 16) & 0xFF);
    rwmask[231] = (byte)((0xFFFFFFFF >> 24) & 0xFF);
    // DMA2FILL at 0xE8 = 0xFFFFFFFF;
    rwmask[232] = (byte)(0xFFFFFFFF & 0xFF);
    rwmask[233] = (byte)((0xFFFFFFFF >> 8) & 0xFF);
    rwmask[234] = (byte)((0xFFFFFFFF >> 16) & 0xFF);
    rwmask[235] = (byte)((0xFFFFFFFF >> 24) & 0xFF);
    // DMA3FILL at 0xEC = 0xFFFFFFFF;
    rwmask[236] = (byte)(0xFFFFFFFF & 0xFF);
    rwmask[237] = (byte)((0xFFFFFFFF >> 8) & 0xFF);
    rwmask[238] = (byte)((0xFFFFFFFF >> 16) & 0xFF);
    rwmask[239] = (byte)((0xFFFFFFFF >> 24) & 0xFF);
    // TM0CNT_L at 0x100 = 0xFFFFFFFF;
    rwmask[256] = (byte)(0xFFFFFFFF & 0xFF);
    rwmask[257] = (byte)((0xFFFFFFFF >> 8) & 0xFF);
    rwmask[258] = (byte)((0xFFFFFFFF >> 16) & 0xFF);
    rwmask[259] = (byte)((0xFFFFFFFF >> 24) & 0xFF);
    // TM1CNT_L at 0x104 = 0xFFFFFFFF;
    rwmask[260] = (byte)(0xFFFFFFFF & 0xFF);
    rwmask[261] = (byte)((0xFFFFFFFF >> 8) & 0xFF);
    rwmask[262] = (byte)((0xFFFFFFFF >> 16) & 0xFF);
    rwmask[263] = (byte)((0xFFFFFFFF >> 24) & 0xFF);
    // TM2CNT_L at 0x108 = 0xFFFFFFFF;
    rwmask[264] = (byte)(0xFFFFFFFF & 0xFF);
    rwmask[265] = (byte)((0xFFFFFFFF >> 8) & 0xFF);
    rwmask[266] = (byte)((0xFFFFFFFF >> 16) & 0xFF);
    rwmask[267] = (byte)((0xFFFFFFFF >> 24) & 0xFF);
    // TM3CNT_L at 0x10C = 0xFFFFFFFF;
    rwmask[268] = (byte)(0xFFFFFFFF & 0xFF);
    rwmask[269] = (byte)((0xFFFFFFFF >> 8) & 0xFF);
    rwmask[270] = (byte)((0xFFFFFFFF >> 16) & 0xFF);
    rwmask[271] = (byte)((0xFFFFFFFF >> 24) & 0xFF);
    // KEYINPUT at 0x130 = 0xFFFFFFFF;
    rwmask[304] = (byte)(0xFFFFFFFF & 0xFF);
    rwmask[305] = (byte)((0xFFFFFFFF >> 8) & 0xFF);
    rwmask[306] = (byte)((0xFFFFFFFF >> 16) & 0xFF);
    rwmask[307] = (byte)((0xFFFFFFFF >> 24) & 0xFF);
    // IPCSYNC at 0x180 = 0x6F0F;
    rwmask[384] = (byte)(0x6F0F & 0xFF);
    rwmask[385] = (byte)((0x6F0F >> 8) & 0xFF);
    rwmask[386] = (byte)((0x6F0F >> 16) & 0xFF);
    rwmask[387] = (byte)((0x6F0F >> 24) & 0xFF);
    // IPCFIFOCNT at 0x184 = 0xC707;
    rwmask[388] = (byte)(0xC707 & 0xFF);
    rwmask[389] = (byte)((0xC707 >> 8) & 0xFF);
    rwmask[390] = (byte)((0xC707 >> 16) & 0xFF);
    rwmask[391] = (byte)((0xC707 >> 24) & 0xFF);
    // IPCFIFOSEND at 0x188 = 0x0;
    rwmask[392] = (byte)(0x0 & 0xFF);
    rwmask[393] = (byte)((0x0 >> 8) & 0xFF);
    rwmask[394] = (byte)((0x0 >> 16) & 0xFF);
    rwmask[395] = (byte)((0x0 >> 24) & 0xFF);
    // AUXSPICNT at 0x1A0 = 0xFFE0C3;
    rwmask[416] = (byte)(0xFFE0C3 & 0xFF);
    rwmask[417] = (byte)((0xFFE0C3 >> 8) & 0xFF);
    rwmask[418] = (byte)((0xFFE0C3 >> 16) & 0xFF);
    rwmask[419] = (byte)((0xFFE0C3 >> 24) & 0xFF);
    // ROMCTRL at 0x1A4 = 0xFFFFFFFF;
    rwmask[420] = (byte)(0xFFFFFFFF & 0xFF);
    rwmask[421] = (byte)((0xFFFFFFFF >> 8) & 0xFF);
    rwmask[422] = (byte)((0xFFFFFFFF >> 16) & 0xFF);
    rwmask[423] = (byte)((0xFFFFFFFF >> 24) & 0xFF);
    // Gamecard_bus_Command_1 at 0x1A8 = 0x0;
    rwmask[424] = (byte)(0x0 & 0xFF);
    rwmask[425] = (byte)((0x0 >> 8) & 0xFF);
    rwmask[426] = (byte)((0x0 >> 16) & 0xFF);
    rwmask[427] = (byte)((0x0 >> 24) & 0xFF);
    // Gamecard_bus_Command_2 at 0x1AC = 0x0;
    rwmask[428] = (byte)(0x0 & 0xFF);
    rwmask[429] = (byte)((0x0 >> 8) & 0xFF);
    rwmask[430] = (byte)((0x0 >> 16) & 0xFF);
    rwmask[431] = (byte)((0x0 >> 24) & 0xFF);
    // Encryption_Seed_0_Lower at 0x1B0 = 0x0;
    rwmask[432] = (byte)(0x0 & 0xFF);
    rwmask[433] = (byte)((0x0 >> 8) & 0xFF);
    rwmask[434] = (byte)((0x0 >> 16) & 0xFF);
    rwmask[435] = (byte)((0x0 >> 24) & 0xFF);
    // Encryption_Seed_1_Lower at 0x1B4 = 0x0;
    rwmask[436] = (byte)(0x0 & 0xFF);
    rwmask[437] = (byte)((0x0 >> 8) & 0xFF);
    rwmask[438] = (byte)((0x0 >> 16) & 0xFF);
    rwmask[439] = (byte)((0x0 >> 24) & 0xFF);
    // Encryption_Seed_0_Upper at 0x1B8 = 0x0;
    rwmask[440] = (byte)(0x0 & 0xFF);
    rwmask[441] = (byte)((0x0 >> 8) & 0xFF);
    rwmask[442] = (byte)((0x0 >> 16) & 0xFF);
    rwmask[443] = (byte)((0x0 >> 24) & 0xFF);
    // EXMEMCNT at 0x204 = 0x3FFFFFF;
    rwmask[516] = (byte)(0x3FFFFFF & 0xFF);
    rwmask[517] = (byte)((0x3FFFFFF >> 8) & 0xFF);
    rwmask[518] = (byte)((0x3FFFFFF >> 16) & 0xFF);
    rwmask[519] = (byte)((0x3FFFFFF >> 24) & 0xFF);
    // IME at 0x208 = 0xFFFFFFFF;
    rwmask[520] = (byte)(0xFFFFFFFF & 0xFF);
    rwmask[521] = (byte)((0xFFFFFFFF >> 8) & 0xFF);
    rwmask[522] = (byte)((0xFFFFFFFF >> 16) & 0xFF);
    rwmask[523] = (byte)((0xFFFFFFFF >> 24) & 0xFF);
    // IE at 0x210 = 0xFFFF3F7F;
    rwmask[528] = (byte)(0xFFFF3F7F & 0xFF);
    rwmask[529] = (byte)((0xFFFF3F7F >> 8) & 0xFF);
    rwmask[530] = (byte)((0xFFFF3F7F >> 16) & 0xFF);
    rwmask[531] = (byte)((0xFFFF3F7F >> 24) & 0xFF);
    // IF at 0x214 = 0x3F3F7F;
    rwmask[532] = (byte)(0x3F3F7F & 0xFF);
    rwmask[533] = (byte)((0x3F3F7F >> 8) & 0xFF);
    rwmask[534] = (byte)((0x3F3F7F >> 16) & 0xFF);
    rwmask[535] = (byte)((0x3F3F7F >> 24) & 0xFF);
    // MemControl1 at 0x240 = 0x0;
    rwmask[576] = (byte)(0x0 & 0xFF);
    rwmask[577] = (byte)((0x0 >> 8) & 0xFF);
    rwmask[578] = (byte)((0x0 >> 16) & 0xFF);
    rwmask[579] = (byte)((0x0 >> 24) & 0xFF);
    // MemControl2 at 0x244 = 0x3000000;
    rwmask[580] = (byte)(0x3000000 & 0xFF);
    rwmask[581] = (byte)((0x3000000 >> 8) & 0xFF);
    rwmask[582] = (byte)((0x3000000 >> 16) & 0xFF);
    rwmask[583] = (byte)((0x3000000 >> 24) & 0xFF);
    // MemControl3 at 0x248 = 0x0;
    rwmask[584] = (byte)(0x0 & 0xFF);
    rwmask[585] = (byte)((0x0 >> 8) & 0xFF);
    rwmask[586] = (byte)((0x0 >> 16) & 0xFF);
    rwmask[587] = (byte)((0x0 >> 24) & 0xFF);
    // DIVCNT at 0x280 = 0xC003;
    rwmask[640] = (byte)(0xC003 & 0xFF);
    rwmask[641] = (byte)((0xC003 >> 8) & 0xFF);
    rwmask[642] = (byte)((0xC003 >> 16) & 0xFF);
    rwmask[643] = (byte)((0xC003 >> 24) & 0xFF);
    // DIV_NUMER_Low at 0x290 = 0xFFFFFFFF;
    rwmask[656] = (byte)(0xFFFFFFFF & 0xFF);
    rwmask[657] = (byte)((0xFFFFFFFF >> 8) & 0xFF);
    rwmask[658] = (byte)((0xFFFFFFFF >> 16) & 0xFF);
    rwmask[659] = (byte)((0xFFFFFFFF >> 24) & 0xFF);
    // DIV_NUMER_High at 0x294 = 0xFFFFFFFF;
    rwmask[660] = (byte)(0xFFFFFFFF & 0xFF);
    rwmask[661] = (byte)((0xFFFFFFFF >> 8) & 0xFF);
    rwmask[662] = (byte)((0xFFFFFFFF >> 16) & 0xFF);
    rwmask[663] = (byte)((0xFFFFFFFF >> 24) & 0xFF);
    // DIV_DENOM_Low at 0x298 = 0xFFFFFFFF;
    rwmask[664] = (byte)(0xFFFFFFFF & 0xFF);
    rwmask[665] = (byte)((0xFFFFFFFF >> 8) & 0xFF);
    rwmask[666] = (byte)((0xFFFFFFFF >> 16) & 0xFF);
    rwmask[667] = (byte)((0xFFFFFFFF >> 24) & 0xFF);
    // DIV_DENOM_High at 0x29C = 0xFFFFFFFF;
    rwmask[668] = (byte)(0xFFFFFFFF & 0xFF);
    rwmask[669] = (byte)((0xFFFFFFFF >> 8) & 0xFF);
    rwmask[670] = (byte)((0xFFFFFFFF >> 16) & 0xFF);
    rwmask[671] = (byte)((0xFFFFFFFF >> 24) & 0xFF);
    // DIV_RESULT_Low at 0x2A0 = 0xFFFFFFFF;
    rwmask[672] = (byte)(0xFFFFFFFF & 0xFF);
    rwmask[673] = (byte)((0xFFFFFFFF >> 8) & 0xFF);
    rwmask[674] = (byte)((0xFFFFFFFF >> 16) & 0xFF);
    rwmask[675] = (byte)((0xFFFFFFFF >> 24) & 0xFF);
    // DIV_RESULT_High at 0x2A4 = 0xFFFFFFFF;
    rwmask[676] = (byte)(0xFFFFFFFF & 0xFF);
    rwmask[677] = (byte)((0xFFFFFFFF >> 8) & 0xFF);
    rwmask[678] = (byte)((0xFFFFFFFF >> 16) & 0xFF);
    rwmask[679] = (byte)((0xFFFFFFFF >> 24) & 0xFF);
    // DIVREM_RESULT_Low at 0x2A8 = 0xFFFFFFFF;
    rwmask[680] = (byte)(0xFFFFFFFF & 0xFF);
    rwmask[681] = (byte)((0xFFFFFFFF >> 8) & 0xFF);
    rwmask[682] = (byte)((0xFFFFFFFF >> 16) & 0xFF);
    rwmask[683] = (byte)((0xFFFFFFFF >> 24) & 0xFF);
    // DIVREM_RESULT_High at 0x2AC = 0xFFFFFFFF;
    rwmask[684] = (byte)(0xFFFFFFFF & 0xFF);
    rwmask[685] = (byte)((0xFFFFFFFF >> 8) & 0xFF);
    rwmask[686] = (byte)((0xFFFFFFFF >> 16) & 0xFF);
    rwmask[687] = (byte)((0xFFFFFFFF >> 24) & 0xFF);
    // SQRTCN at 0x2B0 = 0x8001;
    rwmask[688] = (byte)(0x8001 & 0xFF);
    rwmask[689] = (byte)((0x8001 >> 8) & 0xFF);
    rwmask[690] = (byte)((0x8001 >> 16) & 0xFF);
    rwmask[691] = (byte)((0x8001 >> 24) & 0xFF);
    // SQRT_RESULT at 0x2B4 = 0xFFFFFFFF;
    rwmask[692] = (byte)(0xFFFFFFFF & 0xFF);
    rwmask[693] = (byte)((0xFFFFFFFF >> 8) & 0xFF);
    rwmask[694] = (byte)((0xFFFFFFFF >> 16) & 0xFF);
    rwmask[695] = (byte)((0xFFFFFFFF >> 24) & 0xFF);
    // SQRT_PARAM_Low at 0x2B8 = 0xFFFFFFFF;
    rwmask[696] = (byte)(0xFFFFFFFF & 0xFF);
    rwmask[697] = (byte)((0xFFFFFFFF >> 8) & 0xFF);
    rwmask[698] = (byte)((0xFFFFFFFF >> 16) & 0xFF);
    rwmask[699] = (byte)((0xFFFFFFFF >> 24) & 0xFF);
    // SQRT_PARAM_High at 0x2BC = 0xFFFFFFFF;
    rwmask[700] = (byte)(0xFFFFFFFF & 0xFF);
    rwmask[701] = (byte)((0xFFFFFFFF >> 8) & 0xFF);
    rwmask[702] = (byte)((0xFFFFFFFF >> 16) & 0xFF);
    rwmask[703] = (byte)((0xFFFFFFFF >> 24) & 0xFF);
    // POSTFLG at 0x300 = 0x3;
    rwmask[768] = (byte)(0x3 & 0xFF);
    rwmask[769] = (byte)((0x3 >> 8) & 0xFF);
    rwmask[770] = (byte)((0x3 >> 16) & 0xFF);
    rwmask[771] = (byte)((0x3 >> 24) & 0xFF);
    // POWCNT1 at 0x304 = 0x820F;
    rwmask[772] = (byte)(0x820F & 0xFF);
    rwmask[773] = (byte)((0x820F >> 8) & 0xFF);
    rwmask[774] = (byte)((0x820F >> 16) & 0xFF);
    rwmask[775] = (byte)((0x820F >> 24) & 0xFF);
    // CLEAR_COLOR at 0x0350 = 0x3FFFFFFF;
    rwmask[848] = (byte)(0x3FFFFFFF & 0xFF);
    rwmask[849] = (byte)((0x3FFFFFFF >> 8) & 0xFF);
    rwmask[850] = (byte)((0x3FFFFFFF >> 16) & 0xFF);
    rwmask[851] = (byte)((0x3FFFFFFF >> 24) & 0xFF);
    // CLEAR_DEPTH at 0x0354 = 0xFFFFFFFF;
    rwmask[852] = (byte)(0xFFFFFFFF & 0xFF);
    rwmask[853] = (byte)((0xFFFFFFFF >> 8) & 0xFF);
    rwmask[854] = (byte)((0xFFFFFFFF >> 16) & 0xFF);
    rwmask[855] = (byte)((0xFFFFFFFF >> 24) & 0xFF);
    // GXFIFO at 0x0400 = 0xFFFFFFFF;
    rwmask[1024] = (byte)(0xFFFFFFFF & 0xFF);
    rwmask[1025] = (byte)((0xFFFFFFFF >> 8) & 0xFF);
    rwmask[1026] = (byte)((0xFFFFFFFF >> 16) & 0xFF);
    rwmask[1027] = (byte)((0xFFFFFFFF >> 24) & 0xFF);
    // GXSTAT at 0x0600 = 0xFFFFFFFF;
    rwmask[1536] = (byte)(0xFFFFFFFF & 0xFF);
    rwmask[1537] = (byte)((0xFFFFFFFF >> 8) & 0xFF);
    rwmask[1538] = (byte)((0xFFFFFFFF >> 16) & 0xFF);
    rwmask[1539] = (byte)((0xFFFFFFFF >> 24) & 0xFF);
    // IPCFIFORECV at 0xFFF = 0xFFFFFFFF;
    rwmask[4095] = (byte)(0xFFFFFFFF & 0xFF);
    rwmask[4096] = (byte)((0xFFFFFFFF >> 8) & 0xFF);
    rwmask[4097] = (byte)((0xFFFFFFFF >> 16) & 0xFF);
    rwmask[4098] = (byte)((0xFFFFFFFF >> 24) & 0xFF);
    // B_DISPCNT at 0x1000 = 0xFFFFFFFF;
    rwmask[4096] = (byte)(0xFFFFFFFF & 0xFF);
    rwmask[4097] = (byte)((0xFFFFFFFF >> 8) & 0xFF);
    rwmask[4098] = (byte)((0xFFFFFFFF >> 16) & 0xFF);
    rwmask[4099] = (byte)((0xFFFFFFFF >> 24) & 0xFF);
    // B_BG0CNT at 0x1008 = 0xFFFFFFFF;
    rwmask[4104] = (byte)(0xFFFFFFFF & 0xFF);
    rwmask[4105] = (byte)((0xFFFFFFFF >> 8) & 0xFF);
    rwmask[4106] = (byte)((0xFFFFFFFF >> 16) & 0xFF);
    rwmask[4107] = (byte)((0xFFFFFFFF >> 24) & 0xFF);
    // B_BG2CNT at 0x100C = 0xFFFFFFFF;
    rwmask[4108] = (byte)(0xFFFFFFFF & 0xFF);
    rwmask[4109] = (byte)((0xFFFFFFFF >> 8) & 0xFF);
    rwmask[4110] = (byte)((0xFFFFFFFF >> 16) & 0xFF);
    rwmask[4111] = (byte)((0xFFFFFFFF >> 24) & 0xFF);
    // B_BG0HOFS at 0x1010 = 0x0;
    rwmask[4112] = (byte)(0x0 & 0xFF);
    rwmask[4113] = (byte)((0x0 >> 8) & 0xFF);
    rwmask[4114] = (byte)((0x0 >> 16) & 0xFF);
    rwmask[4115] = (byte)((0x0 >> 24) & 0xFF);
    // B_BG1HOFS at 0x1014 = 0x0;
    rwmask[4116] = (byte)(0x0 & 0xFF);
    rwmask[4117] = (byte)((0x0 >> 8) & 0xFF);
    rwmask[4118] = (byte)((0x0 >> 16) & 0xFF);
    rwmask[4119] = (byte)((0x0 >> 24) & 0xFF);
    // B_BG2HOFS at 0x1018 = 0x0;
    rwmask[4120] = (byte)(0x0 & 0xFF);
    rwmask[4121] = (byte)((0x0 >> 8) & 0xFF);
    rwmask[4122] = (byte)((0x0 >> 16) & 0xFF);
    rwmask[4123] = (byte)((0x0 >> 24) & 0xFF);
    // B_BG3HOFS at 0x101C = 0x0;
    rwmask[4124] = (byte)(0x0 & 0xFF);
    rwmask[4125] = (byte)((0x0 >> 8) & 0xFF);
    rwmask[4126] = (byte)((0x0 >> 16) & 0xFF);
    rwmask[4127] = (byte)((0x0 >> 24) & 0xFF);
    // B_BG2RotScaleParDX at 0x1020 = 0x0;
    rwmask[4128] = (byte)(0x0 & 0xFF);
    rwmask[4129] = (byte)((0x0 >> 8) & 0xFF);
    rwmask[4130] = (byte)((0x0 >> 16) & 0xFF);
    rwmask[4131] = (byte)((0x0 >> 24) & 0xFF);
    // B_BG2RotScaleParDY at 0x1024 = 0x0;
    rwmask[4132] = (byte)(0x0 & 0xFF);
    rwmask[4133] = (byte)((0x0 >> 8) & 0xFF);
    rwmask[4134] = (byte)((0x0 >> 16) & 0xFF);
    rwmask[4135] = (byte)((0x0 >> 24) & 0xFF);
    // B_BG2RefX at 0x1028 = 0x0;
    rwmask[4136] = (byte)(0x0 & 0xFF);
    rwmask[4137] = (byte)((0x0 >> 8) & 0xFF);
    rwmask[4138] = (byte)((0x0 >> 16) & 0xFF);
    rwmask[4139] = (byte)((0x0 >> 24) & 0xFF);
    // B_BG2RefY at 0x102C = 0x0;
    rwmask[4140] = (byte)(0x0 & 0xFF);
    rwmask[4141] = (byte)((0x0 >> 8) & 0xFF);
    rwmask[4142] = (byte)((0x0 >> 16) & 0xFF);
    rwmask[4143] = (byte)((0x0 >> 24) & 0xFF);
    // B_BG3RotScaleParDX at 0x1030 = 0x0;
    rwmask[4144] = (byte)(0x0 & 0xFF);
    rwmask[4145] = (byte)((0x0 >> 8) & 0xFF);
    rwmask[4146] = (byte)((0x0 >> 16) & 0xFF);
    rwmask[4147] = (byte)((0x0 >> 24) & 0xFF);
    // B_BG3RotScaleParDY at 0x1034 = 0x0;
    rwmask[4148] = (byte)(0x0 & 0xFF);
    rwmask[4149] = (byte)((0x0 >> 8) & 0xFF);
    rwmask[4150] = (byte)((0x0 >> 16) & 0xFF);
    rwmask[4151] = (byte)((0x0 >> 24) & 0xFF);
    // B_BG3RefX at 0x1038 = 0x0;
    rwmask[4152] = (byte)(0x0 & 0xFF);
    rwmask[4153] = (byte)((0x0 >> 8) & 0xFF);
    rwmask[4154] = (byte)((0x0 >> 16) & 0xFF);
    rwmask[4155] = (byte)((0x0 >> 24) & 0xFF);
    // B_BG3RefY at 0x103C = 0x0;
    rwmask[4156] = (byte)(0x0 & 0xFF);
    rwmask[4157] = (byte)((0x0 >> 8) & 0xFF);
    rwmask[4158] = (byte)((0x0 >> 16) & 0xFF);
    rwmask[4159] = (byte)((0x0 >> 24) & 0xFF);
    // B_WIN0H at 0x1040 = 0x0;
    rwmask[4160] = (byte)(0x0 & 0xFF);
    rwmask[4161] = (byte)((0x0 >> 8) & 0xFF);
    rwmask[4162] = (byte)((0x0 >> 16) & 0xFF);
    rwmask[4163] = (byte)((0x0 >> 24) & 0xFF);
    // B_WIN0V at 0x1044 = 0x0;
    rwmask[4164] = (byte)(0x0 & 0xFF);
    rwmask[4165] = (byte)((0x0 >> 8) & 0xFF);
    rwmask[4166] = (byte)((0x0 >> 16) & 0xFF);
    rwmask[4167] = (byte)((0x0 >> 24) & 0xFF);
    // B_WININ at 0x1048 = 0x3F3F3F3F;
    rwmask[4168] = (byte)(0x3F3F3F3F & 0xFF);
    rwmask[4169] = (byte)((0x3F3F3F3F >> 8) & 0xFF);
    rwmask[4170] = (byte)((0x3F3F3F3F >> 16) & 0xFF);
    rwmask[4171] = (byte)((0x3F3F3F3F >> 24) & 0xFF);
    // B_MOSAIC at 0x104C = 0x0;
    rwmask[4172] = (byte)(0x0 & 0xFF);
    rwmask[4173] = (byte)((0x0 >> 8) & 0xFF);
    rwmask[4174] = (byte)((0x0 >> 16) & 0xFF);
    rwmask[4175] = (byte)((0x0 >> 24) & 0xFF);
    // B_BLDCNT at 0x1050 = 0x1F1F3FFF;
    rwmask[4176] = (byte)(0x1F1F3FFF & 0xFF);
    rwmask[4177] = (byte)((0x1F1F3FFF >> 8) & 0xFF);
    rwmask[4178] = (byte)((0x1F1F3FFF >> 16) & 0xFF);
    rwmask[4179] = (byte)((0x1F1F3FFF >> 24) & 0xFF);
    // B_BLDY at 0x1054 = 0x0;
    rwmask[4180] = (byte)(0x0 & 0xFF);
    rwmask[4181] = (byte)((0x0 >> 8) & 0xFF);
    rwmask[4182] = (byte)((0x0 >> 16) & 0xFF);
    rwmask[4183] = (byte)((0x0 >> 24) & 0xFF);
    // B_MASTER_BRIGHT at 0x106C = 0x0;
    rwmask[4204] = (byte)(0x0 & 0xFF);
    rwmask[4205] = (byte)((0x0 >> 8) & 0xFF);
    rwmask[4206] = (byte)((0x0 >> 16) & 0xFF);
    rwmask[4207] = (byte)((0x0 >> 24) & 0xFF);
}
