#include "regs_arm9.h";

REGS_Arm9 Regs_Arm9;


RegSect_display9::RegSect_display9()
{
    DISPCNT = DSReg(0x000, 15, 0, 1, 0, "readwrite", Regs_Arm9.data);
    DISPCNT_BG_Mode = DSReg(0x000, 2, 0, 1, 0, "readwrite", Regs_Arm9.data);
    DISPCNT_Reserved_CGB_Mode = DSReg(0x000, 3, 3, 1, 0, "readwrite", Regs_Arm9.data);
    DISPCNT_Display_Frame_Select = DSReg(0x000, 4, 4, 1, 0, "readwrite", Regs_Arm9.data);
    DISPCNT_H_Blank_IntervalFree = DSReg(0x000, 5, 5, 1, 0, "readwrite", Regs_Arm9.data);
    DISPCNT_OBJ_Char_VRAM_Map = DSReg(0x000, 6, 6, 1, 0, "readwrite", Regs_Arm9.data);
    DISPCNT_Forced_Blank = DSReg(0x000, 7, 7, 1, 0, "readwrite", Regs_Arm9.data);
    DISPCNT_Screen_Display_BG0 = DSReg(0x000, 8, 8, 1, 0, "readwrite", Regs_Arm9.data);
    DISPCNT_Screen_Display_BG1 = DSReg(0x000, 9, 9, 1, 0, "readwrite", Regs_Arm9.data);
    DISPCNT_Screen_Display_BG2 = DSReg(0x000, 10, 10, 1, 0, "readwrite", Regs_Arm9.data);
    DISPCNT_Screen_Display_BG3 = DSReg(0x000, 11, 11, 1, 0, "readwrite", Regs_Arm9.data);
    DISPCNT_Screen_Display_OBJ = DSReg(0x000, 12, 12, 1, 0, "readwrite", Regs_Arm9.data);
    DISPCNT_Window_0_Display_Flag = DSReg(0x000, 13, 13, 1, 0, "readwrite", Regs_Arm9.data);
    DISPCNT_Window_1_Display_Flag = DSReg(0x000, 14, 14, 1, 0, "readwrite", Regs_Arm9.data);
    DISPCNT_OBJ_Wnd_Display_Flag = DSReg(0x000, 15, 15, 1, 0, "readwrite", Regs_Arm9.data);
    GREENSWAP = DSReg(0x000, 31, 16, 1, 0, "readwrite", Regs_Arm9.data);
    DISPSTAT = DSReg(0x004, 15, 0, 1, 0x0004, "readwrite", Regs_Arm9.data);
    DISPSTAT_V_Blank_flag = DSReg(0x004, 0, 0, 1, 0, "readonly", Regs_Arm9.data);
    DISPSTAT_H_Blank_flag = DSReg(0x004, 1, 1, 1, 0, "readonly", Regs_Arm9.data);
    DISPSTAT_V_Counter_flag = DSReg(0x004, 2, 2, 1, 0, "readonly", Regs_Arm9.data);
    DISPSTAT_V_Blank_IRQ_Enable = DSReg(0x004, 3, 3, 1, 0, "readwrite", Regs_Arm9.data);
    DISPSTAT_H_Blank_IRQ_Enable = DSReg(0x004, 4, 4, 1, 0, "readwrite", Regs_Arm9.data);
    DISPSTAT_V_Counter_IRQ_Enable = DSReg(0x004, 5, 5, 1, 0, "readwrite", Regs_Arm9.data);
    DISPSTAT_V_Count_Setting8 = DSReg(0x004, 7, 7, 1, 0, "readwrite", Regs_Arm9.data);
    DISPSTAT_V_Count_Setting = DSReg(0x004, 15, 8, 1, 0, "readwrite", Regs_Arm9.data);
    VCOUNT = DSReg(0x004, 31, 16, 1, 0, "readwrite", Regs_Arm9.data);
    BG0CNT = DSReg(0x008, 15, 0, 1, 0, "writeonly", Regs_Arm9.data);
    BG0CNT_BG_Priority = DSReg(0x008, 1, 0, 1, 0, "readwrite", Regs_Arm9.data);
    BG0CNT_Character_Base_Block = DSReg(0x008, 3, 2, 1, 0, "readwrite", Regs_Arm9.data);
    BG0CNT_UNUSED_4_5 = DSReg(0x008, 5, 4, 1, 0, "readwrite", Regs_Arm9.data);
    BG0CNT_Mosaic = DSReg(0x008, 6, 6, 1, 0, "readwrite", Regs_Arm9.data);
    BG0CNT_Colors_Palettes = DSReg(0x008, 7, 7, 1, 0, "readwrite", Regs_Arm9.data);
    BG0CNT_Screen_Base_Block = DSReg(0x008, 12, 8, 1, 0, "readwrite", Regs_Arm9.data);
    BG0CNT_Screen_Size = DSReg(0x008, 15, 14, 1, 0, "readwrite", Regs_Arm9.data);
    BG1CNT = DSReg(0x00A, 15, 0, 1, 0, "writeonly", Regs_Arm9.data);
    BG1CNT_BG_Priority = DSReg(0x00A, 1, 0, 1, 0, "readwrite", Regs_Arm9.data);
    BG1CNT_Character_Base_Block = DSReg(0x00A, 3, 2, 1, 0, "readwrite", Regs_Arm9.data);
    BG1CNT_UNUSED_4_5 = DSReg(0x00A, 5, 4, 1, 0, "readwrite", Regs_Arm9.data);
    BG1CNT_Mosaic = DSReg(0x00A, 6, 6, 1, 0, "readwrite", Regs_Arm9.data);
    BG1CNT_Colors_Palettes = DSReg(0x00A, 7, 7, 1, 0, "readwrite", Regs_Arm9.data);
    BG1CNT_Screen_Base_Block = DSReg(0x00A, 12, 8, 1, 0, "readwrite", Regs_Arm9.data);
    BG1CNT_Screen_Size = DSReg(0x00A, 15, 14, 1, 0, "readwrite", Regs_Arm9.data);
    BG2CNT = DSReg(0x00C, 15, 0, 1, 0, "readwrite", Regs_Arm9.data);
    BG2CNT_BG_Priority = DSReg(0x00C, 1, 0, 1, 0, "readwrite", Regs_Arm9.data);
    BG2CNT_Character_Base_Block = DSReg(0x00C, 3, 2, 1, 0, "readwrite", Regs_Arm9.data);
    BG2CNT_Mosaic = DSReg(0x00C, 6, 6, 1, 0, "readwrite", Regs_Arm9.data);
    BG2CNT_Colors_Palettes = DSReg(0x00C, 7, 7, 1, 0, "readwrite", Regs_Arm9.data);
    BG2CNT_Screen_Base_Block = DSReg(0x00C, 12, 8, 1, 0, "readwrite", Regs_Arm9.data);
    BG2CNT_Display_Area_Overflow = DSReg(0x00C, 13, 13, 1, 0, "readwrite", Regs_Arm9.data);
    BG2CNT_Screen_Size = DSReg(0x00C, 15, 14, 1, 0, "readwrite", Regs_Arm9.data);
    BG3CNT = DSReg(0x00E, 15, 0, 1, 0, "readwrite", Regs_Arm9.data);
    BG3CNT_BG_Priority = DSReg(0x00E, 1, 0, 1, 0, "readwrite", Regs_Arm9.data);
    BG3CNT_Character_Base_Block = DSReg(0x00E, 3, 2, 1, 0, "readwrite", Regs_Arm9.data);
    BG3CNT_Mosaic = DSReg(0x00E, 6, 6, 1, 0, "readwrite", Regs_Arm9.data);
    BG3CNT_Colors_Palettes = DSReg(0x00E, 7, 7, 1, 0, "readwrite", Regs_Arm9.data);
    BG3CNT_Screen_Base_Block = DSReg(0x00E, 12, 8, 1, 0, "readwrite", Regs_Arm9.data);
    BG3CNT_Display_Area_Overflow = DSReg(0x00E, 13, 13, 1, 0, "readwrite", Regs_Arm9.data);
    BG3CNT_Screen_Size = DSReg(0x00E, 15, 14, 1, 0, "readwrite", Regs_Arm9.data);
    BG0HOFS = DSReg(0x010, 15, 0, 1, 0, "writeonly", Regs_Arm9.data);
    BG0VOFS = DSReg(0x012, 15, 0, 1, 0, "writeonly", Regs_Arm9.data);
    BG1HOFS = DSReg(0x014, 15, 0, 1, 0, "writeonly", Regs_Arm9.data);
    BG1VOFS = DSReg(0x016, 15, 0, 1, 0, "writeonly", Regs_Arm9.data);
    BG2HOFS = DSReg(0x018, 15, 0, 1, 0, "writeonly", Regs_Arm9.data);
    BG2VOFS = DSReg(0x01A, 15, 0, 1, 0, "writeonly", Regs_Arm9.data);
    BG3HOFS = DSReg(0x01C, 15, 0, 1, 0, "writeonly", Regs_Arm9.data);
    BG3VOFS = DSReg(0x01E, 15, 0, 1, 0, "writeonly", Regs_Arm9.data);
    BG2RotScaleParDX = DSReg(0x020, 15, 0, 1, 256, "writeonly", Regs_Arm9.data);
    BG2RotScaleParDMX = DSReg(0x020, 31, 16, 1, 0, "writeonly", Regs_Arm9.data);
    BG2RotScaleParDY = DSReg(0x024, 15, 0, 1, 0, "writeonly", Regs_Arm9.data);
    BG2RotScaleParDMY = DSReg(0x024, 31, 16, 1, 256, "writeonly", Regs_Arm9.data);
    BG2RefX = DSReg(0x028, 27, 0, 1, 0, "writeonly", Regs_Arm9.data);
    BG2RefY = DSReg(0x02C, 27, 0, 1, 0, "writeonly", Regs_Arm9.data);
    BG3RotScaleParDX = DSReg(0x030, 15, 0, 1, 256, "writeonly", Regs_Arm9.data);
    BG3RotScaleParDMX = DSReg(0x030, 31, 16, 1, 0, "writeonly", Regs_Arm9.data);
    BG3RotScaleParDY = DSReg(0x034, 15, 0, 1, 0, "writeonly", Regs_Arm9.data);
    BG3RotScaleParDMY = DSReg(0x034, 31, 16, 1, 256, "writeonly", Regs_Arm9.data);
    BG3RefX = DSReg(0x038, 27, 0, 1, 0, "writeonly", Regs_Arm9.data);
    BG3RefY = DSReg(0x03C, 27, 0, 1, 0, "writeonly", Regs_Arm9.data);
    WIN0H = DSReg(0x040, 15, 0, 1, 0, "writeonly", Regs_Arm9.data);
    WIN0H_X2 = DSReg(0x040, 7, 0, 1, 0, "writeonly", Regs_Arm9.data);
    WIN0H_X1 = DSReg(0x040, 15, 8, 1, 0, "writeonly", Regs_Arm9.data);
    WIN1H = DSReg(0x040, 31, 16, 1, 0, "writeonly", Regs_Arm9.data);
    WIN1H_X2 = DSReg(0x040, 23, 16, 1, 0, "writeonly", Regs_Arm9.data);
    WIN1H_X1 = DSReg(0x040, 31, 24, 1, 0, "writeonly", Regs_Arm9.data);
    WIN0V = DSReg(0x044, 15, 0, 1, 0, "writeonly", Regs_Arm9.data);
    WIN0V_Y2 = DSReg(0x044, 7, 0, 1, 0, "writeonly", Regs_Arm9.data);
    WIN0V_Y1 = DSReg(0x044, 15, 8, 1, 0, "writeonly", Regs_Arm9.data);
    WIN1V = DSReg(0x044, 31, 16, 1, 0, "writeonly", Regs_Arm9.data);
    WIN1V_Y2 = DSReg(0x044, 23, 16, 1, 0, "writeonly", Regs_Arm9.data);
    WIN1V_Y1 = DSReg(0x044, 31, 24, 1, 0, "writeonly", Regs_Arm9.data);
    WININ = DSReg(0x048, 15, 0, 1, 0, "writeonly", Regs_Arm9.data);
    WININ_Window_0_BG0_Enable = DSReg(0x048, 0, 0, 1, 0, "readwrite", Regs_Arm9.data);
    WININ_Window_0_BG1_Enable = DSReg(0x048, 1, 1, 1, 0, "readwrite", Regs_Arm9.data);
    WININ_Window_0_BG2_Enable = DSReg(0x048, 2, 2, 1, 0, "readwrite", Regs_Arm9.data);
    WININ_Window_0_BG3_Enable = DSReg(0x048, 3, 3, 1, 0, "readwrite", Regs_Arm9.data);
    WININ_Window_0_OBJ_Enable = DSReg(0x048, 4, 4, 1, 0, "readwrite", Regs_Arm9.data);
    WININ_Window_0_Special_Effect = DSReg(0x048, 5, 5, 1, 0, "readwrite", Regs_Arm9.data);
    WININ_Window_1_BG0_Enable = DSReg(0x048, 8, 8, 1, 0, "readwrite", Regs_Arm9.data);
    WININ_Window_1_BG1_Enable = DSReg(0x048, 9, 9, 1, 0, "readwrite", Regs_Arm9.data);
    WININ_Window_1_BG2_Enable = DSReg(0x048, 10, 10, 1, 0, "readwrite", Regs_Arm9.data);
    WININ_Window_1_BG3_Enable = DSReg(0x048, 11, 11, 1, 0, "readwrite", Regs_Arm9.data);
    WININ_Window_1_OBJ_Enable = DSReg(0x048, 12, 12, 1, 0, "readwrite", Regs_Arm9.data);
    WININ_Window_1_Special_Effect = DSReg(0x048, 13, 13, 1, 0, "readwrite", Regs_Arm9.data);
    WINOUT = DSReg(0x048, 31, 16, 1, 0, "writeonly", Regs_Arm9.data);
    WINOUT_Outside_BG0_Enable = DSReg(0x048, 16, 16, 1, 0, "readwrite", Regs_Arm9.data);
    WINOUT_Outside_BG1_Enable = DSReg(0x048, 17, 17, 1, 0, "readwrite", Regs_Arm9.data);
    WINOUT_Outside_BG2_Enable = DSReg(0x048, 18, 18, 1, 0, "readwrite", Regs_Arm9.data);
    WINOUT_Outside_BG3_Enable = DSReg(0x048, 19, 19, 1, 0, "readwrite", Regs_Arm9.data);
    WINOUT_Outside_OBJ_Enable = DSReg(0x048, 20, 20, 1, 0, "readwrite", Regs_Arm9.data);
    WINOUT_Outside_Special_Effect = DSReg(0x048, 21, 21, 1, 0, "readwrite", Regs_Arm9.data);
    WINOUT_Objwnd_BG0_Enable = DSReg(0x048, 24, 24, 1, 0, "readwrite", Regs_Arm9.data);
    WINOUT_Objwnd_BG1_Enable = DSReg(0x048, 25, 25, 1, 0, "readwrite", Regs_Arm9.data);
    WINOUT_Objwnd_BG2_Enable = DSReg(0x048, 26, 26, 1, 0, "readwrite", Regs_Arm9.data);
    WINOUT_Objwnd_BG3_Enable = DSReg(0x048, 27, 27, 1, 0, "readwrite", Regs_Arm9.data);
    WINOUT_Objwnd_OBJ_Enable = DSReg(0x048, 28, 28, 1, 0, "readwrite", Regs_Arm9.data);
    WINOUT_Objwnd_Special_Effect = DSReg(0x048, 29, 29, 1, 0, "readwrite", Regs_Arm9.data);
    MOSAIC = DSReg(0x04C, 15, 0, 1, 0, "writeonly", Regs_Arm9.data);
    MOSAIC_BG_Mosaic_H_Size = DSReg(0x04C, 3, 0, 1, 0, "writeonly", Regs_Arm9.data);
    MOSAIC_BG_Mosaic_V_Size = DSReg(0x04C, 7, 4, 1, 0, "writeonly", Regs_Arm9.data);
    MOSAIC_OBJ_Mosaic_H_Size = DSReg(0x04C, 11, 8, 1, 0, "writeonly", Regs_Arm9.data);
    MOSAIC_OBJ_Mosaic_V_Size = DSReg(0x04C, 15, 12, 1, 0, "writeonly", Regs_Arm9.data);
    BLDCNT = DSReg(0x050, 13, 0, 1, 0, "readwrite", Regs_Arm9.data);
    BLDCNT_BG0_1st_Target_Pixel = DSReg(0x050, 0, 0, 1, 0, "readwrite", Regs_Arm9.data);
    BLDCNT_BG1_1st_Target_Pixel = DSReg(0x050, 1, 1, 1, 0, "readwrite", Regs_Arm9.data);
    BLDCNT_BG2_1st_Target_Pixel = DSReg(0x050, 2, 2, 1, 0, "readwrite", Regs_Arm9.data);
    BLDCNT_BG3_1st_Target_Pixel = DSReg(0x050, 3, 3, 1, 0, "readwrite", Regs_Arm9.data);
    BLDCNT_OBJ_1st_Target_Pixel = DSReg(0x050, 4, 4, 1, 0, "readwrite", Regs_Arm9.data);
    BLDCNT_BD_1st_Target_Pixel = DSReg(0x050, 5, 5, 1, 0, "readwrite", Regs_Arm9.data);
    BLDCNT_Color_Special_Effect = DSReg(0x050, 7, 6, 1, 0, "readwrite", Regs_Arm9.data);
    BLDCNT_BG0_2nd_Target_Pixel = DSReg(0x050, 8, 8, 1, 0, "readwrite", Regs_Arm9.data);
    BLDCNT_BG1_2nd_Target_Pixel = DSReg(0x050, 9, 9, 1, 0, "readwrite", Regs_Arm9.data);
    BLDCNT_BG2_2nd_Target_Pixel = DSReg(0x050, 10, 10, 1, 0, "readwrite", Regs_Arm9.data);
    BLDCNT_BG3_2nd_Target_Pixel = DSReg(0x050, 11, 11, 1, 0, "readwrite", Regs_Arm9.data);
    BLDCNT_OBJ_2nd_Target_Pixel = DSReg(0x050, 12, 12, 1, 0, "readwrite", Regs_Arm9.data);
    BLDCNT_BD_2nd_Target_Pixel = DSReg(0x050, 13, 13, 1, 0, "readwrite", Regs_Arm9.data);
    BLDALPHA = DSReg(0x050, 28, 16, 1, 0, "writeonly", Regs_Arm9.data);
    BLDALPHA_EVA_Coefficient = DSReg(0x050, 20, 16, 1, 0, "readwrite", Regs_Arm9.data);
    BLDALPHA_EVB_Coefficient = DSReg(0x050, 28, 24, 1, 0, "readwrite", Regs_Arm9.data);
    BLDY = DSReg(0x054, 4, 0, 1, 0, "writeonly", Regs_Arm9.data);
    DISPCAPCNT = DSReg(0x064, 31, 0, 1, 0, "writeonly", Regs_Arm9.data);
    DISPCAPCNT_EVA = DSReg(0x064, 4, 0, 1, 0, "writeonly", Regs_Arm9.data);
    DISPCAPCNT_EVB = DSReg(0x064, 12, 8, 1, 0, "writeonly", Regs_Arm9.data);
    DISPCAPCNT_VRAM_Write_Block = DSReg(0x064, 17, 16, 1, 0, "writeonly", Regs_Arm9.data);
    DISPCAPCNT_VRAM_Write_Offset = DSReg(0x064, 19, 18, 1, 0, "writeonly", Regs_Arm9.data);
    DISPCAPCNT_Capture_Size = DSReg(0x064, 21, 20, 1, 0, "writeonly", Regs_Arm9.data);
    DISPCAPCNT_Source_A = DSReg(0x064, 24, 24, 1, 0, "writeonly", Regs_Arm9.data);
    DISPCAPCNT_Source_B = DSReg(0x064, 25, 25, 1, 0, "writeonly", Regs_Arm9.data);
    DISPCAPCNT_VRAM_Read_Offset = DSReg(0x064, 27, 26, 1, 0, "writeonly", Regs_Arm9.data);
    DISPCAPCNT_Capture_Source = DSReg(0x064, 30, 29, 1, 0, "writeonly", Regs_Arm9.data);
    DISPCAPCNT_Capture_Enable = DSReg(0x064, 31, 31, 1, 0, "writeonly", Regs_Arm9.data);
    DISP_MMEM_FIFO = DSReg(0x068, 31, 0, 1, 0, "writeonly", Regs_Arm9.data);
    MASTER_BRIGHT = DSReg(0x06C, 15, 0, 1, 0, "writeonly", Regs_Arm9.data);
    MASTER_BRIGHT_Factor = DSReg(0x06C, 4, 0, 1, 0, "writeonly", Regs_Arm9.data);
    MASTER_BRIGHT_Mode = DSReg(0x06C, 15, 14, 1, 0, "writeonly", Regs_Arm9.data);
}

RegSect_dma9::RegSect_dma9()
{
    DMA0SAD = DSReg(0xB0, 31, 0, 1, 0, "readwrite", Regs_Arm9.data);
    DMA0DAD = DSReg(0xB4, 31, 0, 1, 0, "readwrite", Regs_Arm9.data);
    DMA0CNT_L = DSReg(0xB8, 20, 0, 1, 0, "readwrite", Regs_Arm9.data);
    DMA0CNT_H = DSReg(0xB8, 31, 16, 1, 0, "readwrite", Regs_Arm9.data);
    DMA0CNT_H_Dest_Addr_Control = DSReg(0xB8, 22, 21, 1, 0, "readwrite", Regs_Arm9.data);
    DMA0CNT_H_Source_Adr_Control = DSReg(0xB8, 24, 23, 1, 0, "readwrite", Regs_Arm9.data);
    DMA0CNT_H_DMA_Repeat = DSReg(0xB8, 25, 25, 1, 0, "readwrite", Regs_Arm9.data);
    DMA0CNT_H_DMA_Transfer_Type = DSReg(0xB8, 26, 26, 1, 0, "readwrite", Regs_Arm9.data);
    DMA0CNT_H_DMA_Start_Timing = DSReg(0xB8, 29, 27, 1, 0, "readwrite", Regs_Arm9.data);
    DMA0CNT_H_IRQ_on = DSReg(0xB8, 30, 30, 1, 0, "readwrite", Regs_Arm9.data);
    DMA0CNT_H_DMA_Enable = DSReg(0xB8, 31, 31, 1, 0, "readwrite", Regs_Arm9.data);
    DMA1SAD = DSReg(0xBC, 31, 0, 1, 0, "readwrite", Regs_Arm9.data);
    DMA1DAD = DSReg(0xC0, 31, 0, 1, 0, "readwrite", Regs_Arm9.data);
    DMA1CNT_L = DSReg(0xC4, 20, 0, 1, 0, "readwrite", Regs_Arm9.data);
    DMA1CNT_H = DSReg(0xC4, 31, 16, 1, 0, "readwrite", Regs_Arm9.data);
    DMA1CNT_H_Dest_Addr_Control = DSReg(0xC4, 22, 21, 1, 0, "readwrite", Regs_Arm9.data);
    DMA1CNT_H_Source_Adr_Control = DSReg(0xC4, 24, 23, 1, 0, "readwrite", Regs_Arm9.data);
    DMA1CNT_H_DMA_Repeat = DSReg(0xC4, 25, 25, 1, 0, "readwrite", Regs_Arm9.data);
    DMA1CNT_H_DMA_Transfer_Type = DSReg(0xC4, 26, 26, 1, 0, "readwrite", Regs_Arm9.data);
    DMA1CNT_H_DMA_Start_Timing = DSReg(0xC4, 29, 27, 1, 0, "readwrite", Regs_Arm9.data);
    DMA1CNT_H_IRQ_on = DSReg(0xC4, 30, 30, 1, 0, "readwrite", Regs_Arm9.data);
    DMA1CNT_H_DMA_Enable = DSReg(0xC4, 31, 31, 1, 0, "readwrite", Regs_Arm9.data);
    DMA2SAD = DSReg(0xC8, 31, 0, 1, 0, "readwrite", Regs_Arm9.data);
    DMA2DAD = DSReg(0xCC, 31, 0, 1, 0, "readwrite", Regs_Arm9.data);
    DMA2CNT_L = DSReg(0xD0, 20, 0, 1, 0, "readwrite", Regs_Arm9.data);
    DMA2CNT_H = DSReg(0xD0, 31, 16, 1, 0, "readwrite", Regs_Arm9.data);
    DMA2CNT_H_Dest_Addr_Control = DSReg(0xD0, 22, 21, 1, 0, "readwrite", Regs_Arm9.data);
    DMA2CNT_H_Source_Adr_Control = DSReg(0xD0, 24, 23, 1, 0, "readwrite", Regs_Arm9.data);
    DMA2CNT_H_DMA_Repeat = DSReg(0xD0, 25, 25, 1, 0, "readwrite", Regs_Arm9.data);
    DMA2CNT_H_DMA_Transfer_Type = DSReg(0xD0, 26, 26, 1, 0, "readwrite", Regs_Arm9.data);
    DMA2CNT_H_DMA_Start_Timing = DSReg(0xD0, 29, 27, 1, 0, "readwrite", Regs_Arm9.data);
    DMA2CNT_H_IRQ_on = DSReg(0xD0, 30, 30, 1, 0, "readwrite", Regs_Arm9.data);
    DMA2CNT_H_DMA_Enable = DSReg(0xD0, 31, 31, 1, 0, "readwrite", Regs_Arm9.data);
    DMA3SAD = DSReg(0xD4, 31, 0, 1, 0, "readwrite", Regs_Arm9.data);
    DMA3DAD = DSReg(0xD8, 31, 0, 1, 0, "readwrite", Regs_Arm9.data);
    DMA3CNT_L = DSReg(0xDC, 20, 0, 1, 0, "readwrite", Regs_Arm9.data);
    DMA3CNT_H = DSReg(0xDC, 31, 16, 1, 0, "readwrite", Regs_Arm9.data);
    DMA3CNT_H_Dest_Addr_Control = DSReg(0xDC, 22, 21, 1, 0, "readwrite", Regs_Arm9.data);
    DMA3CNT_H_Source_Adr_Control = DSReg(0xDC, 24, 23, 1, 0, "readwrite", Regs_Arm9.data);
    DMA3CNT_H_DMA_Repeat = DSReg(0xDC, 25, 25, 1, 0, "readwrite", Regs_Arm9.data);
    DMA3CNT_H_DMA_Transfer_Type = DSReg(0xDC, 26, 26, 1, 0, "readwrite", Regs_Arm9.data);
    DMA3CNT_H_Game_Pak_DRQ = DSReg(0xDC, 27, 27, 1, 0, "readwrite", Regs_Arm9.data);
    DMA3CNT_H_DMA_Start_Timing = DSReg(0xDC, 29, 27, 1, 0, "readwrite", Regs_Arm9.data);
    DMA3CNT_H_IRQ_on = DSReg(0xDC, 30, 30, 1, 0, "readwrite", Regs_Arm9.data);
    DMA3CNT_H_DMA_Enable = DSReg(0xDC, 31, 31, 1, 0, "readwrite", Regs_Arm9.data);
    DMA0FILL = DSReg(0xE0, 31, 0, 1, 0, "readwrite", Regs_Arm9.data);
    DMA1FILL = DSReg(0xE4, 31, 0, 1, 0, "readwrite", Regs_Arm9.data);
    DMA2FILL = DSReg(0xE8, 31, 0, 1, 0, "readwrite", Regs_Arm9.data);
    DMA3FILL = DSReg(0xEC, 31, 0, 1, 0, "readwrite", Regs_Arm9.data);
}

RegSect_timer9::RegSect_timer9()
{
    TM0CNT_L = DSReg(0x100, 15, 0, 1, 0, "readwrite", Regs_Arm9.data);
    TM0CNT_H = DSReg(0x100, 31, 16, 1, 0, "readwrite", Regs_Arm9.data);
    TM0CNT_H_Prescaler = DSReg(0x100, 17, 16, 1, 0, "readwrite", Regs_Arm9.data);
    TM0CNT_H_Count_up = DSReg(0x100, 18, 18, 1, 0, "readwrite", Regs_Arm9.data);
    TM0CNT_H_Timer_IRQ_Enable = DSReg(0x100, 22, 22, 1, 0, "readwrite", Regs_Arm9.data);
    TM0CNT_H_Timer_Start_Stop = DSReg(0x100, 23, 23, 1, 0, "readwrite", Regs_Arm9.data);
    TM1CNT_L = DSReg(0x104, 15, 0, 1, 0, "readwrite", Regs_Arm9.data);
    TM1CNT_H = DSReg(0x104, 31, 16, 1, 0, "readwrite", Regs_Arm9.data);
    TM1CNT_H_Prescaler = DSReg(0x104, 17, 16, 1, 0, "readwrite", Regs_Arm9.data);
    TM1CNT_H_Count_up = DSReg(0x104, 18, 18, 1, 0, "readwrite", Regs_Arm9.data);
    TM1CNT_H_Timer_IRQ_Enable = DSReg(0x104, 22, 22, 1, 0, "readwrite", Regs_Arm9.data);
    TM1CNT_H_Timer_Start_Stop = DSReg(0x104, 23, 23, 1, 0, "readwrite", Regs_Arm9.data);
    TM2CNT_L = DSReg(0x108, 15, 0, 1, 0, "readwrite", Regs_Arm9.data);
    TM2CNT_H = DSReg(0x108, 31, 16, 1, 0, "readwrite", Regs_Arm9.data);
    TM2CNT_H_Prescaler = DSReg(0x108, 17, 16, 1, 0, "readwrite", Regs_Arm9.data);
    TM2CNT_H_Count_up = DSReg(0x108, 18, 18, 1, 0, "readwrite", Regs_Arm9.data);
    TM2CNT_H_Timer_IRQ_Enable = DSReg(0x108, 22, 22, 1, 0, "readwrite", Regs_Arm9.data);
    TM2CNT_H_Timer_Start_Stop = DSReg(0x108, 23, 23, 1, 0, "readwrite", Regs_Arm9.data);
    TM3CNT_L = DSReg(0x10C, 15, 0, 1, 0, "readwrite", Regs_Arm9.data);
    TM3CNT_H = DSReg(0x10C, 31, 16, 1, 0, "readwrite", Regs_Arm9.data);
    TM3CNT_H_Prescaler = DSReg(0x10C, 17, 16, 1, 0, "readwrite", Regs_Arm9.data);
    TM3CNT_H_Count_up = DSReg(0x10C, 18, 18, 1, 0, "readwrite", Regs_Arm9.data);
    TM3CNT_H_Timer_IRQ_Enable = DSReg(0x10C, 22, 22, 1, 0, "readwrite", Regs_Arm9.data);
    TM3CNT_H_Timer_Start_Stop = DSReg(0x10C, 23, 23, 1, 0, "readwrite", Regs_Arm9.data);
}

RegSect_keypad9::RegSect_keypad9()
{
    KEYINPUT = DSReg(0x130, 15, 0, 1, 0, "readonly", Regs_Arm9.data);
    KEYCNT = DSReg(0x130, 31, 16, 1, 0, "readwrite", Regs_Arm9.data);
    EXTKEYIN = DSReg(0x134, 23, 16, 1, 0, "readonly", Regs_Arm9.data);
}

RegSect_system9::RegSect_system9()
{
    IPCSYNC = DSReg(0x180, 15, 0, 1, 0, "writeonly", Regs_Arm9.data);
    IPCSYNC_Data_from_IPCSYNC = DSReg(0x180, 3, 0, 1, 0, "readonly", Regs_Arm9.data);
    IPCSYNC_Data_to_IPCSYNC = DSReg(0x180, 11, 8, 1, 0, "readwrite", Regs_Arm9.data);
    IPCSYNC_IRQ = DSReg(0x180, 13, 13, 1, 0, "readonly", Regs_Arm9.data);
    IPCSYNC_Ena_IRQ_from_remote_CPU = DSReg(0x180, 14, 14, 1, 0, "readwrite", Regs_Arm9.data);
    IPCFIFOCNT = DSReg(0x184, 15, 0, 1, 0, "writeonly", Regs_Arm9.data);
    IPCFIFOCNT_Send_Fifo_Empty_Status = DSReg(0x184, 0, 0, 1, 0, "readonly", Regs_Arm9.data);
    IPCFIFOCNT_Send_Fifo_Full_Status = DSReg(0x184, 1, 1, 1, 0, "readonly", Regs_Arm9.data);
    IPCFIFOCNT_Send_Fifo_Empty_IRQ = DSReg(0x184, 2, 2, 1, 0, "readwrite", Regs_Arm9.data);
    IPCFIFOCNT_Send_Fifo_Clear = DSReg(0x184, 3, 3, 1, 0, "writeonly", Regs_Arm9.data);
    IPCFIFOCNT_Receive_Fifo_Empty = DSReg(0x184, 8, 8, 1, 0, "readonly", Regs_Arm9.data);
    IPCFIFOCNT_Receive_Fifo_Full = DSReg(0x184, 9, 9, 1, 0, "readonly", Regs_Arm9.data);
    IPCFIFOCNT_Receive_Fifo_Not_Empty_IRQ = DSReg(0x184, 10, 10, 1, 0, "readwrite", Regs_Arm9.data);
    IPCFIFOCNT_Error_Read_Empty_Send_Full = DSReg(0x184, 14, 14, 1, 0, "readwrite", Regs_Arm9.data);
    IPCFIFOCNT_Enable_Send_Receive_Fifo = DSReg(0x184, 15, 15, 1, 0, "readwrite", Regs_Arm9.data);
    IPCFIFOSEND = DSReg(0x188, 31, 0, 1, 0, "writeonly", Regs_Arm9.data);
    IPCFIFORECV = DSReg(0xFFF, 31, 0, 1, 0, "readonly", Regs_Arm9.data);
    AUXSPICNT = DSReg(0x1A0, 23, 0, 1, 0, "writeonly", Regs_Arm9.data);
    AUXSPICNT_SPI_Baudrate = DSReg(0x1A0, 1, 0, 1, 0, "readwrite", Regs_Arm9.data);
    AUXSPICNT_SPI_Hold_Chipselect = DSReg(0x1A0, 6, 6, 1, 0, "readwrite", Regs_Arm9.data);
    AUXSPICNT_SPI_Busy = DSReg(0x1A0, 7, 7, 1, 0, "readonly", Regs_Arm9.data);
    AUXSPICNT_NDS_Slot_Mode = DSReg(0x1A0, 13, 13, 1, 0, "readwrite", Regs_Arm9.data);
    AUXSPICNT_Transfer_Ready_IRQ = DSReg(0x1A0, 14, 14, 1, 0, "readwrite", Regs_Arm9.data);
    AUXSPICNT_NDS_Slot_Enable = DSReg(0x1A0, 15, 15, 1, 0, "readwrite", Regs_Arm9.data);
    AUXSPIDATA = DSReg(0x1A0, 23, 16, 1, 0, "readwrite", Regs_Arm9.data);
    ROMCTRL = DSReg(0x1A4, 31, 0, 1, 0, "writeonly", Regs_Arm9.data);
    ROMCTRL_KEY1_gap1_length = DSReg(0x1A4, 12, 0, 1, 0, "readwrite", Regs_Arm9.data);
    ROMCTRL_KEY2_encrypt_data = DSReg(0x1A4, 13, 13, 1, 0, "readwrite", Regs_Arm9.data);
    ROMCTRL_SE = DSReg(0x1A4, 14, 14, 1, 0, "readwrite", Regs_Arm9.data);
    ROMCTRL_KEY2_Apply_Seed = DSReg(0x1A4, 15, 15, 1, 0, "readwrite", Regs_Arm9.data);
    ROMCTRL_KEY1_gap2_length = DSReg(0x1A4, 21, 16, 1, 0, "readwrite", Regs_Arm9.data);
    ROMCTRL_KEY2_encrypt_cmd = DSReg(0x1A4, 22, 22, 1, 0, "readwrite", Regs_Arm9.data);
    ROMCTRL_Data_Word_Status = DSReg(0x1A4, 23, 23, 1, 0, "readwrite", Regs_Arm9.data);
    ROMCTRL_Data_Block_size = DSReg(0x1A4, 26, 24, 1, 0, "readwrite", Regs_Arm9.data);
    ROMCTRL_Transfer_CLK_rate = DSReg(0x1A4, 27, 27, 1, 0, "readwrite", Regs_Arm9.data);
    ROMCTRL_KEY1_Gap_CLKs = DSReg(0x1A4, 28, 28, 1, 0, "readwrite", Regs_Arm9.data);
    ROMCTRL_RESB_Release_Reset = DSReg(0x1A4, 29, 29, 1, 0, "readwrite", Regs_Arm9.data);
    ROMCTRL_WR = DSReg(0x1A4, 30, 30, 1, 0, "readwrite", Regs_Arm9.data);
    ROMCTRL_Block_Start_Status = DSReg(0x1A4, 21, 21, 1, 0, "readwrite", Regs_Arm9.data);
    Gamecard_bus_Command_1 = DSReg(0x1A8, 31, 0, 1, 0, "writeonly", Regs_Arm9.data);
    Gamecard_bus_Command_2 = DSReg(0x1AC, 31, 0, 1, 0, "writeonly", Regs_Arm9.data);
    Gamecard_bus_DataIn = DSReg(0xFFF, 31, 0, 1, 0, "readonly", Regs_Arm9.data);
    Encryption_Seed_0_Lower = DSReg(0x1B0, 31, 0, 1, 0, "writeonly", Regs_Arm9.data);
    Encryption_Seed_1_Lower = DSReg(0x1B4, 31, 0, 1, 0, "writeonly", Regs_Arm9.data);
    Encryption_Seed_0_Upper = DSReg(0x1B8, 6, 0, 1, 0, "writeonly", Regs_Arm9.data);
    Encryption_Seed_1_Upper = DSReg(0x1B8, 22, 16, 1, 0, "writeonly", Regs_Arm9.data);
    EXMEMCNT = DSReg(0x204, 25, 0, 1, 0, "readwrite", Regs_Arm9.data);
    EXMEMCNT_GBASlot_SRAM_Access_Time = DSReg(0x204, 1, 0, 1, 0, "readwrite", Regs_Arm9.data);
    EXMEMCNT_GBASlot_ROM_1st_Access_Time = DSReg(0x204, 3, 2, 1, 0, "readwrite", Regs_Arm9.data);
    EXMEMCNT_GBASlot_ROM_2nd_Access_Time = DSReg(0x204, 4, 4, 1, 0, "readwrite", Regs_Arm9.data);
    EXMEMCNT_GBASlot_PHI_pin_out = DSReg(0x204, 6, 5, 1, 0, "readwrite", Regs_Arm9.data);
    EXMEMCNT_GBASlot_Access_Rights = DSReg(0x204, 7, 7, 1, 0, "readwrite", Regs_Arm9.data);
    EXMEMCNT_NDSSlot_Access_Rights = DSReg(0x204, 11, 11, 1, 0, "readwrite", Regs_Arm9.data);
    EXMEMCNT_SET = DSReg(0x204, 13, 13, 1, 0, "readwrite", Regs_Arm9.data);
    EXMEMCNT_MainMem_Interface_Mode = DSReg(0x204, 14, 14, 1, 0, "readonly", Regs_Arm9.data);
    EXMEMCNT_MainMem_Access_Priority = DSReg(0x204, 15, 15, 1, 0, "readwrite", Regs_Arm9.data);
    IME = DSReg(0x208, 31, 0, 1, 0, "readwrite", Regs_Arm9.data);
    IE = DSReg(0x210, 31, 0, 1, 0, "writeonly", Regs_Arm9.data);
    IE_LCD_V_Blank = DSReg(0x210, 0, 0, 1, 0, "readwrite", Regs_Arm9.data);
    IE_LCD_H_Blank = DSReg(0x210, 1, 1, 1, 0, "readwrite", Regs_Arm9.data);
    IE_LCD_V_Counter_Match = DSReg(0x210, 2, 2, 1, 0, "readwrite", Regs_Arm9.data);
    IE_Timer_0 = DSReg(0x210, 3, 3, 1, 0, "readwrite", Regs_Arm9.data);
    IE_Timer_1 = DSReg(0x210, 4, 4, 1, 0, "readwrite", Regs_Arm9.data);
    IE_Timer_2 = DSReg(0x210, 5, 5, 1, 0, "readwrite", Regs_Arm9.data);
    IE_Timer_3 = DSReg(0x210, 6, 6, 1, 0, "readwrite", Regs_Arm9.data);
    IE_DMA_0 = DSReg(0x210, 8, 8, 1, 0, "readwrite", Regs_Arm9.data);
    IE_DMA_1 = DSReg(0x210, 9, 9, 1, 0, "readwrite", Regs_Arm9.data);
    IE_DMA_2 = DSReg(0x210, 10, 10, 1, 0, "readwrite", Regs_Arm9.data);
    IE_DMA_3 = DSReg(0x210, 11, 11, 1, 0, "readwrite", Regs_Arm9.data);
    IE_Keypad = DSReg(0x210, 12, 12, 1, 0, "readwrite", Regs_Arm9.data);
    IE_GBA_Slot_external_IRQ = DSReg(0x210, 13, 13, 1, 0, "readwrite", Regs_Arm9.data);
    IE_IPC_Sync = DSReg(0x210, 16, 16, 1, 0, "readwrite", Regs_Arm9.data);
    IE_IPC_Send_FIFO_Empty = DSReg(0x210, 17, 17, 1, 0, "readwrite", Regs_Arm9.data);
    IE_IPC_Recv_FIFO_Not_Empty = DSReg(0x210, 18, 18, 1, 0, "readwrite", Regs_Arm9.data);
    IE_NDS_Slot_Transfer_Complete = DSReg(0x210, 19, 19, 1, 0, "readwrite", Regs_Arm9.data);
    IE_NDS_Slot_IREQ_MC = DSReg(0x210, 20, 20, 1, 0, "readwrite", Regs_Arm9.data);
    IE_Geometry_Command_FIFO = DSReg(0x210, 21, 21, 1, 0, "readwrite", Regs_Arm9.data);
    IE_unused = DSReg(0x210, 31, 22, 1, 0, "readwrite", Regs_Arm9.data);
    IF = DSReg(0x214, 21, 0, 1, 0, "writeonly", Regs_Arm9.data);
    IF_LCD_V_Blank = DSReg(0x214, 0, 0, 1, 0, "readwrite", Regs_Arm9.data);
    IF_LCD_H_Blank = DSReg(0x214, 1, 1, 1, 0, "readwrite", Regs_Arm9.data);
    IF_LCD_V_Counter_Match = DSReg(0x214, 2, 2, 1, 0, "readwrite", Regs_Arm9.data);
    IF_Timer_0 = DSReg(0x214, 3, 3, 1, 0, "readwrite", Regs_Arm9.data);
    IF_Timer_1 = DSReg(0x214, 4, 4, 1, 0, "readwrite", Regs_Arm9.data);
    IF_Timer_2 = DSReg(0x214, 5, 5, 1, 0, "readwrite", Regs_Arm9.data);
    IF_Timer_3 = DSReg(0x214, 6, 6, 1, 0, "readwrite", Regs_Arm9.data);
    IF_DMA_0 = DSReg(0x214, 8, 8, 1, 0, "readwrite", Regs_Arm9.data);
    IF_DMA_1 = DSReg(0x214, 9, 9, 1, 0, "readwrite", Regs_Arm9.data);
    IF_DMA_2 = DSReg(0x214, 10, 10, 1, 0, "readwrite", Regs_Arm9.data);
    IF_DMA_3 = DSReg(0x214, 11, 11, 1, 0, "readwrite", Regs_Arm9.data);
    IF_Keypad = DSReg(0x214, 12, 12, 1, 0, "readwrite", Regs_Arm9.data);
    IF_GBA_Slot_external_IRQ = DSReg(0x214, 13, 13, 1, 0, "readwrite", Regs_Arm9.data);
    IF_IPC_Sync = DSReg(0x214, 16, 16, 1, 0, "readwrite", Regs_Arm9.data);
    IF_IPC_Send_FIFO_Empty = DSReg(0x214, 17, 17, 1, 0, "readwrite", Regs_Arm9.data);
    IF_IPC_Recv_FIFO_Not_Empty = DSReg(0x214, 18, 18, 1, 0, "readwrite", Regs_Arm9.data);
    IF_NDS_Slot_Transfer_Complete = DSReg(0x214, 19, 19, 1, 0, "readwrite", Regs_Arm9.data);
    IF_NDS_Slot_IREQ_MC = DSReg(0x214, 20, 20, 1, 0, "readwrite", Regs_Arm9.data);
    IF_Geometry_Command_FIFO = DSReg(0x214, 21, 21, 1, 0, "readwrite", Regs_Arm9.data);
    MemControl1 = DSReg(0x240, 31, 0, 1, 0, "writeonly", Regs_Arm9.data);
    MemControl1_VRAM_A_MST = DSReg(0x240, 1, 0, 1, 0, "writeonly", Regs_Arm9.data);
    MemControl1_VRAM_A_Offset = DSReg(0x240, 4, 3, 1, 0, "writeonly", Regs_Arm9.data);
    MemControl1_VRAM_A_Enable = DSReg(0x240, 7, 7, 1, 0, "writeonly", Regs_Arm9.data);
    MemControl1_VRAM_B_MST = DSReg(0x240, 9, 8, 1, 0, "writeonly", Regs_Arm9.data);
    MemControl1_VRAM_B_Offset = DSReg(0x240, 12, 11, 1, 0, "writeonly", Regs_Arm9.data);
    MemControl1_VRAM_B_Enable = DSReg(0x240, 15, 15, 1, 0, "writeonly", Regs_Arm9.data);
    MemControl1_VRAM_C_MST = DSReg(0x240, 18, 16, 1, 0, "writeonly", Regs_Arm9.data);
    MemControl1_VRAM_C_Offset = DSReg(0x240, 20, 19, 1, 0, "writeonly", Regs_Arm9.data);
    MemControl1_VRAM_C_Enable = DSReg(0x240, 23, 23, 1, 0, "writeonly", Regs_Arm9.data);
    MemControl1_VRAM_D_MST = DSReg(0x240, 26, 24, 1, 0, "writeonly", Regs_Arm9.data);
    MemControl1_VRAM_D_Offset = DSReg(0x240, 28, 27, 1, 0, "writeonly", Regs_Arm9.data);
    MemControl1_VRAM_D_Enable = DSReg(0x240, 31, 31, 1, 0, "writeonly", Regs_Arm9.data);
    MemControl2 = DSReg(0x244, 25, 0, 1, 0, "writeonly", Regs_Arm9.data);
    MemControl1_VRAM_E_MST = DSReg(0x244, 2, 0, 1, 0, "writeonly", Regs_Arm9.data);
    MemControl1_VRAM_E_Offset = DSReg(0x244, 4, 3, 1, 0, "writeonly", Regs_Arm9.data);
    MemControl1_VRAM_E_Enable = DSReg(0x244, 7, 7, 1, 0, "writeonly", Regs_Arm9.data);
    MemControl1_VRAM_F_MST = DSReg(0x244, 10, 8, 1, 0, "writeonly", Regs_Arm9.data);
    MemControl1_VRAM_F_Offset = DSReg(0x244, 12, 11, 1, 0, "writeonly", Regs_Arm9.data);
    MemControl1_VRAM_F_Enable = DSReg(0x244, 15, 15, 1, 0, "writeonly", Regs_Arm9.data);
    MemControl1_VRAM_G_MST = DSReg(0x244, 18, 16, 1, 0, "writeonly", Regs_Arm9.data);
    MemControl1_VRAM_G_Offset = DSReg(0x244, 20, 19, 1, 0, "writeonly", Regs_Arm9.data);
    MemControl1_VRAM_G_Enable = DSReg(0x244, 23, 23, 1, 0, "writeonly", Regs_Arm9.data);
    MemControl2_WRAM = DSReg(0x244, 25, 24, 1, 0, "readwrite", Regs_Arm9.data);
    MemControl3 = DSReg(0x248, 15, 0, 1, 0, "writeonly", Regs_Arm9.data);
    MemControl1_VRAM_H_MST = DSReg(0x248, 1, 0, 1, 0, "writeonly", Regs_Arm9.data);
    MemControl1_VRAM_H_Offset = DSReg(0x248, 4, 3, 1, 0, "writeonly", Regs_Arm9.data);
    MemControl1_VRAM_H_Enable = DSReg(0x248, 7, 7, 1, 0, "writeonly", Regs_Arm9.data);
    MemControl1_VRAM_I_MST = DSReg(0x248, 9, 8, 1, 0, "writeonly", Regs_Arm9.data);
    MemControl1_VRAM_I_Offset = DSReg(0x248, 12, 11, 1, 0, "writeonly", Regs_Arm9.data);
    MemControl1_VRAM_I_Enable = DSReg(0x248, 15, 15, 1, 0, "writeonly", Regs_Arm9.data);
    DIVCNT = DSReg(0x280, 31, 0, 1, 0, "writeonly", Regs_Arm9.data);
    DIVCNT_Division_Mode = DSReg(0x280, 1, 0, 1, 0, "readwrite", Regs_Arm9.data);
    DIVCNT_Division_by_zero = DSReg(0x280, 14, 14, 1, 0, "readonly", Regs_Arm9.data);
    DIVCNT_Busy = DSReg(0x280, 15, 15, 1, 0, "readonly", Regs_Arm9.data);
    DIV_NUMER_High = DSReg(0x290, 31, 0, 1, 0, "readwrite", Regs_Arm9.data);
    DIV_NUMER_Low = DSReg(0x294, 31, 0, 1, 0, "readwrite", Regs_Arm9.data);
    DIV_DENOM_High = DSReg(0x298, 31, 0, 1, 0, "readwrite", Regs_Arm9.data);
    DIV_DENOM_Low = DSReg(0x29C, 31, 0, 1, 0, "readwrite", Regs_Arm9.data);
    DIV_RESULT_High = DSReg(0x2A0, 31, 0, 1, 0, "readonly", Regs_Arm9.data);
    DIV_RESULT_Low = DSReg(0x2A4, 31, 0, 1, 0, "readonly", Regs_Arm9.data);
    DIVREM_RESULT_High = DSReg(0x2A8, 31, 0, 1, 0, "readonly", Regs_Arm9.data);
    DIVREM_RESULT_Low = DSReg(0x2AC, 31, 0, 1, 0, "readonly", Regs_Arm9.data);
    SQRTCN = DSReg(0x280, 31, 0, 1, 0, "writeonly", Regs_Arm9.data);
    SQRTCN_Division_Mode = DSReg(0x280, 0, 0, 1, 0, "readwrite", Regs_Arm9.data);
    SQRTCN_Busy = DSReg(0x280, 15, 15, 1, 0, "readonly", Regs_Arm9.data);
    SQRT_RESULT = DSReg(0x2B4, 31, 0, 1, 0, "readonly", Regs_Arm9.data);
    SQRT_PARAM_High = DSReg(0x2B8, 31, 0, 1, 0, "readwrite", Regs_Arm9.data);
    SQRT_PARAM_Low = DSReg(0x2BC, 31, 0, 1, 0, "readwrite", Regs_Arm9.data);
    POSTFLG = DSReg(0x300, 1, 0, 1, 0, "writeonly", Regs_Arm9.data);
    POSTFLG_Flag = DSReg(0x300, 0, 0, 1, 1, "readonly", Regs_Arm9.data);
    POSTFLG_RW = DSReg(0x300, 1, 1, 1, 0, "readwrite", Regs_Arm9.data);
    POWCNT1 = DSReg(0x304, 15, 0, 1, 0, "writeonly", Regs_Arm9.data);
    POWCNT1_Enable_Flag_for_both_LCDs = DSReg(0x304, 0, 0, 1, 0, "readwrite", Regs_Arm9.data);
    POWCNT1_2D_Graphics_Engine_A = DSReg(0x304, 1, 1, 1, 0, "readwrite", Regs_Arm9.data);
    POWCNT1_3D_Rendering_Engine = DSReg(0x304, 2, 2, 1, 0, "readwrite", Regs_Arm9.data);
    POWCNT1_3D_Geometry_Engine = DSReg(0x304, 3, 3, 1, 0, "readwrite", Regs_Arm9.data);
    POWCNT1_2D_Graphics_Engine_B = DSReg(0x304, 9, 9, 1, 0, "readwrite", Regs_Arm9.data);
    POWCNT1_Display_Swap = DSReg(0x304, 15, 15, 1, 0, "readwrite", Regs_Arm9.data);
}

void REGS_Arm9::reset()
{
      // DISPSTAT at 0x004 = 0x0004;
      data[4] = 4 & 0xFF;
      // BG2RotScaleParDX at 0x020 = 256;
      data[32] = 256 & 0xFF;
      data[33] = (256 >> 8) & 0xFF;
      // BG2RotScaleParDMY at 0x024 = 256;
      data[36] = 16777216 & 0xFF;
      data[37] = (16777216 >> 8) & 0xFF;
      data[38] = (16777216 >> 16) & 0xFF;
      data[39] = (16777216 >> 24) & 0xFF;
      // BG3RotScaleParDX at 0x030 = 256;
      data[48] = 256 & 0xFF;
      data[49] = (256 >> 8) & 0xFF;
      // BG3RotScaleParDMY at 0x034 = 256;
      data[52] = 16777216 & 0xFF;
      data[53] = (16777216 >> 8) & 0xFF;
      data[54] = (16777216 >> 16) & 0xFF;
      data[55] = (16777216 >> 24) & 0xFF;
      // POSTFLG_Flag at 0x300 = 1;
      data[768] = 1 & 0xFF;

    // DISPCNT at 0x000 = 0xFFFFFFFF;
    rwmask[0] = (byte)(0xFFFFFFFF & 0xFF);
    rwmask[1] = (byte)((0xFFFFFFFF >> 8) & 0xFF);
    rwmask[2] = (byte)((0xFFFFFFFF >> 16) & 0xFF);
    rwmask[3] = (byte)((0xFFFFFFFF >> 24) & 0xFF);
    // DISPSTAT at 0x004 = 0xFFFFFFFF;
    rwmask[4] = (byte)(0xFFFFFFFF & 0xFF);
    rwmask[5] = (byte)((0xFFFFFFFF >> 8) & 0xFF);
    rwmask[6] = (byte)((0xFFFFFFFF >> 16) & 0xFF);
    rwmask[7] = (byte)((0xFFFFFFFF >> 24) & 0xFF);
    // BG0CNT at 0x008 = 0xDFFF;
    rwmask[8] = (byte)(0xDFFF & 0xFF);
    rwmask[9] = (byte)((0xDFFF >> 8) & 0xFF);
    rwmask[10] = (byte)((0xDFFF >> 16) & 0xFF);
    rwmask[11] = (byte)((0xDFFF >> 24) & 0xFF);
    // BG1CNT at 0x00A = 0xDFFF;
    rwmask[10] = (byte)(0xDFFF & 0xFF);
    rwmask[11] = (byte)((0xDFFF >> 8) & 0xFF);
    rwmask[12] = (byte)((0xDFFF >> 16) & 0xFF);
    rwmask[13] = (byte)((0xDFFF >> 24) & 0xFF);
    // BG2CNT at 0x00C = 0xFFFF;
    rwmask[12] = (byte)(0xFFFF & 0xFF);
    rwmask[13] = (byte)((0xFFFF >> 8) & 0xFF);
    rwmask[14] = (byte)((0xFFFF >> 16) & 0xFF);
    rwmask[15] = (byte)((0xFFFF >> 24) & 0xFF);
    // BG3CNT at 0x00E = 0xFFFF;
    rwmask[14] = (byte)(0xFFFF & 0xFF);
    rwmask[15] = (byte)((0xFFFF >> 8) & 0xFF);
    rwmask[16] = (byte)((0xFFFF >> 16) & 0xFF);
    rwmask[17] = (byte)((0xFFFF >> 24) & 0xFF);
    // BG0HOFS at 0x010 = 0x0;
    rwmask[16] = (byte)(0x0 & 0xFF);
    rwmask[17] = (byte)((0x0 >> 8) & 0xFF);
    rwmask[18] = (byte)((0x0 >> 16) & 0xFF);
    rwmask[19] = (byte)((0x0 >> 24) & 0xFF);
    // BG0VOFS at 0x012 = 0x0;
    rwmask[18] = (byte)(0x0 & 0xFF);
    rwmask[19] = (byte)((0x0 >> 8) & 0xFF);
    rwmask[20] = (byte)((0x0 >> 16) & 0xFF);
    rwmask[21] = (byte)((0x0 >> 24) & 0xFF);
    // BG1HOFS at 0x014 = 0x0;
    rwmask[20] = (byte)(0x0 & 0xFF);
    rwmask[21] = (byte)((0x0 >> 8) & 0xFF);
    rwmask[22] = (byte)((0x0 >> 16) & 0xFF);
    rwmask[23] = (byte)((0x0 >> 24) & 0xFF);
    // BG1VOFS at 0x016 = 0x0;
    rwmask[22] = (byte)(0x0 & 0xFF);
    rwmask[23] = (byte)((0x0 >> 8) & 0xFF);
    rwmask[24] = (byte)((0x0 >> 16) & 0xFF);
    rwmask[25] = (byte)((0x0 >> 24) & 0xFF);
    // BG2HOFS at 0x018 = 0x0;
    rwmask[24] = (byte)(0x0 & 0xFF);
    rwmask[25] = (byte)((0x0 >> 8) & 0xFF);
    rwmask[26] = (byte)((0x0 >> 16) & 0xFF);
    rwmask[27] = (byte)((0x0 >> 24) & 0xFF);
    // BG2VOFS at 0x01A = 0x0;
    rwmask[26] = (byte)(0x0 & 0xFF);
    rwmask[27] = (byte)((0x0 >> 8) & 0xFF);
    rwmask[28] = (byte)((0x0 >> 16) & 0xFF);
    rwmask[29] = (byte)((0x0 >> 24) & 0xFF);
    // BG3HOFS at 0x01C = 0x0;
    rwmask[28] = (byte)(0x0 & 0xFF);
    rwmask[29] = (byte)((0x0 >> 8) & 0xFF);
    rwmask[30] = (byte)((0x0 >> 16) & 0xFF);
    rwmask[31] = (byte)((0x0 >> 24) & 0xFF);
    // BG3VOFS at 0x01E = 0x0;
    rwmask[30] = (byte)(0x0 & 0xFF);
    rwmask[31] = (byte)((0x0 >> 8) & 0xFF);
    rwmask[32] = (byte)((0x0 >> 16) & 0xFF);
    rwmask[33] = (byte)((0x0 >> 24) & 0xFF);
    // BG2RotScaleParDX at 0x020 = 0x0;
    rwmask[32] = (byte)(0x0 & 0xFF);
    rwmask[33] = (byte)((0x0 >> 8) & 0xFF);
    rwmask[34] = (byte)((0x0 >> 16) & 0xFF);
    rwmask[35] = (byte)((0x0 >> 24) & 0xFF);
    // BG2RotScaleParDY at 0x024 = 0x0;
    rwmask[36] = (byte)(0x0 & 0xFF);
    rwmask[37] = (byte)((0x0 >> 8) & 0xFF);
    rwmask[38] = (byte)((0x0 >> 16) & 0xFF);
    rwmask[39] = (byte)((0x0 >> 24) & 0xFF);
    // BG2RefX at 0x028 = 0x0;
    rwmask[40] = (byte)(0x0 & 0xFF);
    rwmask[41] = (byte)((0x0 >> 8) & 0xFF);
    rwmask[42] = (byte)((0x0 >> 16) & 0xFF);
    rwmask[43] = (byte)((0x0 >> 24) & 0xFF);
    // BG2RefY at 0x02C = 0x0;
    rwmask[44] = (byte)(0x0 & 0xFF);
    rwmask[45] = (byte)((0x0 >> 8) & 0xFF);
    rwmask[46] = (byte)((0x0 >> 16) & 0xFF);
    rwmask[47] = (byte)((0x0 >> 24) & 0xFF);
    // BG3RotScaleParDX at 0x030 = 0x0;
    rwmask[48] = (byte)(0x0 & 0xFF);
    rwmask[49] = (byte)((0x0 >> 8) & 0xFF);
    rwmask[50] = (byte)((0x0 >> 16) & 0xFF);
    rwmask[51] = (byte)((0x0 >> 24) & 0xFF);
    // BG3RotScaleParDY at 0x034 = 0x0;
    rwmask[52] = (byte)(0x0 & 0xFF);
    rwmask[53] = (byte)((0x0 >> 8) & 0xFF);
    rwmask[54] = (byte)((0x0 >> 16) & 0xFF);
    rwmask[55] = (byte)((0x0 >> 24) & 0xFF);
    // BG3RefX at 0x038 = 0x0;
    rwmask[56] = (byte)(0x0 & 0xFF);
    rwmask[57] = (byte)((0x0 >> 8) & 0xFF);
    rwmask[58] = (byte)((0x0 >> 16) & 0xFF);
    rwmask[59] = (byte)((0x0 >> 24) & 0xFF);
    // BG3RefY at 0x03C = 0x0;
    rwmask[60] = (byte)(0x0 & 0xFF);
    rwmask[61] = (byte)((0x0 >> 8) & 0xFF);
    rwmask[62] = (byte)((0x0 >> 16) & 0xFF);
    rwmask[63] = (byte)((0x0 >> 24) & 0xFF);
    // WIN0H at 0x040 = 0x0;
    rwmask[64] = (byte)(0x0 & 0xFF);
    rwmask[65] = (byte)((0x0 >> 8) & 0xFF);
    rwmask[66] = (byte)((0x0 >> 16) & 0xFF);
    rwmask[67] = (byte)((0x0 >> 24) & 0xFF);
    // WIN0V at 0x044 = 0x0;
    rwmask[68] = (byte)(0x0 & 0xFF);
    rwmask[69] = (byte)((0x0 >> 8) & 0xFF);
    rwmask[70] = (byte)((0x0 >> 16) & 0xFF);
    rwmask[71] = (byte)((0x0 >> 24) & 0xFF);
    // WININ at 0x048 = 0x3F3F3F3F;
    rwmask[72] = (byte)(0x3F3F3F3F & 0xFF);
    rwmask[73] = (byte)((0x3F3F3F3F >> 8) & 0xFF);
    rwmask[74] = (byte)((0x3F3F3F3F >> 16) & 0xFF);
    rwmask[75] = (byte)((0x3F3F3F3F >> 24) & 0xFF);
    // MOSAIC at 0x04C = 0x0;
    rwmask[76] = (byte)(0x0 & 0xFF);
    rwmask[77] = (byte)((0x0 >> 8) & 0xFF);
    rwmask[78] = (byte)((0x0 >> 16) & 0xFF);
    rwmask[79] = (byte)((0x0 >> 24) & 0xFF);
    // BLDCNT at 0x050 = 0x1F1F3FFF;
    rwmask[80] = (byte)(0x1F1F3FFF & 0xFF);
    rwmask[81] = (byte)((0x1F1F3FFF >> 8) & 0xFF);
    rwmask[82] = (byte)((0x1F1F3FFF >> 16) & 0xFF);
    rwmask[83] = (byte)((0x1F1F3FFF >> 24) & 0xFF);
    // BLDY at 0x054 = 0x0;
    rwmask[84] = (byte)(0x0 & 0xFF);
    rwmask[85] = (byte)((0x0 >> 8) & 0xFF);
    rwmask[86] = (byte)((0x0 >> 16) & 0xFF);
    rwmask[87] = (byte)((0x0 >> 24) & 0xFF);
    // DISPCAPCNT at 0x064 = 0x0;
    rwmask[100] = (byte)(0x0 & 0xFF);
    rwmask[101] = (byte)((0x0 >> 8) & 0xFF);
    rwmask[102] = (byte)((0x0 >> 16) & 0xFF);
    rwmask[103] = (byte)((0x0 >> 24) & 0xFF);
    // DISP_MMEM_FIFO at 0x068 = 0x0;
    rwmask[104] = (byte)(0x0 & 0xFF);
    rwmask[105] = (byte)((0x0 >> 8) & 0xFF);
    rwmask[106] = (byte)((0x0 >> 16) & 0xFF);
    rwmask[107] = (byte)((0x0 >> 24) & 0xFF);
    // MASTER_BRIGHT at 0x06C = 0x0;
    rwmask[108] = (byte)(0x0 & 0xFF);
    rwmask[109] = (byte)((0x0 >> 8) & 0xFF);
    rwmask[110] = (byte)((0x0 >> 16) & 0xFF);
    rwmask[111] = (byte)((0x0 >> 24) & 0xFF);
    // DMA0SAD at 0xB0 = 0xFFFFFFFF;
    rwmask[176] = (byte)(0xFFFFFFFF & 0xFF);
    rwmask[177] = (byte)((0xFFFFFFFF >> 8) & 0xFF);
    rwmask[178] = (byte)((0xFFFFFFFF >> 16) & 0xFF);
    rwmask[179] = (byte)((0xFFFFFFFF >> 24) & 0xFF);
    // DMA0DAD at 0xB4 = 0xFFFFFFFF;
    rwmask[180] = (byte)(0xFFFFFFFF & 0xFF);
    rwmask[181] = (byte)((0xFFFFFFFF >> 8) & 0xFF);
    rwmask[182] = (byte)((0xFFFFFFFF >> 16) & 0xFF);
    rwmask[183] = (byte)((0xFFFFFFFF >> 24) & 0xFF);
    // DMA0CNT_L at 0xB8 = 0xFFFFFFFF;
    rwmask[184] = (byte)(0xFFFFFFFF & 0xFF);
    rwmask[185] = (byte)((0xFFFFFFFF >> 8) & 0xFF);
    rwmask[186] = (byte)((0xFFFFFFFF >> 16) & 0xFF);
    rwmask[187] = (byte)((0xFFFFFFFF >> 24) & 0xFF);
    // DMA1SAD at 0xBC = 0xFFFFFFFF;
    rwmask[188] = (byte)(0xFFFFFFFF & 0xFF);
    rwmask[189] = (byte)((0xFFFFFFFF >> 8) & 0xFF);
    rwmask[190] = (byte)((0xFFFFFFFF >> 16) & 0xFF);
    rwmask[191] = (byte)((0xFFFFFFFF >> 24) & 0xFF);
    // DMA1DAD at 0xC0 = 0xFFFFFFFF;
    rwmask[192] = (byte)(0xFFFFFFFF & 0xFF);
    rwmask[193] = (byte)((0xFFFFFFFF >> 8) & 0xFF);
    rwmask[194] = (byte)((0xFFFFFFFF >> 16) & 0xFF);
    rwmask[195] = (byte)((0xFFFFFFFF >> 24) & 0xFF);
    // DMA1CNT_L at 0xC4 = 0xFFFFFFFF;
    rwmask[196] = (byte)(0xFFFFFFFF & 0xFF);
    rwmask[197] = (byte)((0xFFFFFFFF >> 8) & 0xFF);
    rwmask[198] = (byte)((0xFFFFFFFF >> 16) & 0xFF);
    rwmask[199] = (byte)((0xFFFFFFFF >> 24) & 0xFF);
    // DMA2SAD at 0xC8 = 0xFFFFFFFF;
    rwmask[200] = (byte)(0xFFFFFFFF & 0xFF);
    rwmask[201] = (byte)((0xFFFFFFFF >> 8) & 0xFF);
    rwmask[202] = (byte)((0xFFFFFFFF >> 16) & 0xFF);
    rwmask[203] = (byte)((0xFFFFFFFF >> 24) & 0xFF);
    // DMA2DAD at 0xCC = 0xFFFFFFFF;
    rwmask[204] = (byte)(0xFFFFFFFF & 0xFF);
    rwmask[205] = (byte)((0xFFFFFFFF >> 8) & 0xFF);
    rwmask[206] = (byte)((0xFFFFFFFF >> 16) & 0xFF);
    rwmask[207] = (byte)((0xFFFFFFFF >> 24) & 0xFF);
    // DMA2CNT_L at 0xD0 = 0xFFFFFFFF;
    rwmask[208] = (byte)(0xFFFFFFFF & 0xFF);
    rwmask[209] = (byte)((0xFFFFFFFF >> 8) & 0xFF);
    rwmask[210] = (byte)((0xFFFFFFFF >> 16) & 0xFF);
    rwmask[211] = (byte)((0xFFFFFFFF >> 24) & 0xFF);
    // DMA3SAD at 0xD4 = 0xFFFFFFFF;
    rwmask[212] = (byte)(0xFFFFFFFF & 0xFF);
    rwmask[213] = (byte)((0xFFFFFFFF >> 8) & 0xFF);
    rwmask[214] = (byte)((0xFFFFFFFF >> 16) & 0xFF);
    rwmask[215] = (byte)((0xFFFFFFFF >> 24) & 0xFF);
    // DMA3DAD at 0xD8 = 0xFFFFFFFF;
    rwmask[216] = (byte)(0xFFFFFFFF & 0xFF);
    rwmask[217] = (byte)((0xFFFFFFFF >> 8) & 0xFF);
    rwmask[218] = (byte)((0xFFFFFFFF >> 16) & 0xFF);
    rwmask[219] = (byte)((0xFFFFFFFF >> 24) & 0xFF);
    // DMA3CNT_L at 0xDC = 0xFFFFFFFF;
    rwmask[220] = (byte)(0xFFFFFFFF & 0xFF);
    rwmask[221] = (byte)((0xFFFFFFFF >> 8) & 0xFF);
    rwmask[222] = (byte)((0xFFFFFFFF >> 16) & 0xFF);
    rwmask[223] = (byte)((0xFFFFFFFF >> 24) & 0xFF);
    // DMA0FILL at 0xE0 = 0xFFFFFFFF;
    rwmask[224] = (byte)(0xFFFFFFFF & 0xFF);
    rwmask[225] = (byte)((0xFFFFFFFF >> 8) & 0xFF);
    rwmask[226] = (byte)((0xFFFFFFFF >> 16) & 0xFF);
    rwmask[227] = (byte)((0xFFFFFFFF >> 24) & 0xFF);
    // DMA1FILL at 0xE4 = 0xFFFFFFFF;
    rwmask[228] = (byte)(0xFFFFFFFF & 0xFF);
    rwmask[229] = (byte)((0xFFFFFFFF >> 8) & 0xFF);
    rwmask[230] = (byte)((0xFFFFFFFF >> 16) & 0xFF);
    rwmask[231] = (byte)((0xFFFFFFFF >> 24) & 0xFF);
    // DMA2FILL at 0xE8 = 0xFFFFFFFF;
    rwmask[232] = (byte)(0xFFFFFFFF & 0xFF);
    rwmask[233] = (byte)((0xFFFFFFFF >> 8) & 0xFF);
    rwmask[234] = (byte)((0xFFFFFFFF >> 16) & 0xFF);
    rwmask[235] = (byte)((0xFFFFFFFF >> 24) & 0xFF);
    // DMA3FILL at 0xEC = 0xFFFFFFFF;
    rwmask[236] = (byte)(0xFFFFFFFF & 0xFF);
    rwmask[237] = (byte)((0xFFFFFFFF >> 8) & 0xFF);
    rwmask[238] = (byte)((0xFFFFFFFF >> 16) & 0xFF);
    rwmask[239] = (byte)((0xFFFFFFFF >> 24) & 0xFF);
    // TM0CNT_L at 0x100 = 0xFFFFFFFF;
    rwmask[256] = (byte)(0xFFFFFFFF & 0xFF);
    rwmask[257] = (byte)((0xFFFFFFFF >> 8) & 0xFF);
    rwmask[258] = (byte)((0xFFFFFFFF >> 16) & 0xFF);
    rwmask[259] = (byte)((0xFFFFFFFF >> 24) & 0xFF);
    // TM1CNT_L at 0x104 = 0xFFFFFFFF;
    rwmask[260] = (byte)(0xFFFFFFFF & 0xFF);
    rwmask[261] = (byte)((0xFFFFFFFF >> 8) & 0xFF);
    rwmask[262] = (byte)((0xFFFFFFFF >> 16) & 0xFF);
    rwmask[263] = (byte)((0xFFFFFFFF >> 24) & 0xFF);
    // TM2CNT_L at 0x108 = 0xFFFFFFFF;
    rwmask[264] = (byte)(0xFFFFFFFF & 0xFF);
    rwmask[265] = (byte)((0xFFFFFFFF >> 8) & 0xFF);
    rwmask[266] = (byte)((0xFFFFFFFF >> 16) & 0xFF);
    rwmask[267] = (byte)((0xFFFFFFFF >> 24) & 0xFF);
    // TM3CNT_L at 0x10C = 0xFFFFFFFF;
    rwmask[268] = (byte)(0xFFFFFFFF & 0xFF);
    rwmask[269] = (byte)((0xFFFFFFFF >> 8) & 0xFF);
    rwmask[270] = (byte)((0xFFFFFFFF >> 16) & 0xFF);
    rwmask[271] = (byte)((0xFFFFFFFF >> 24) & 0xFF);
    // KEYINPUT at 0x130 = 0xFFFFFFFF;
    rwmask[304] = (byte)(0xFFFFFFFF & 0xFF);
    rwmask[305] = (byte)((0xFFFFFFFF >> 8) & 0xFF);
    rwmask[306] = (byte)((0xFFFFFFFF >> 16) & 0xFF);
    rwmask[307] = (byte)((0xFFFFFFFF >> 24) & 0xFF);
    // EXTKEYIN at 0x134 = 0xFF0000;
    rwmask[308] = (byte)(0xFF0000 & 0xFF);
    rwmask[309] = (byte)((0xFF0000 >> 8) & 0xFF);
    rwmask[310] = (byte)((0xFF0000 >> 16) & 0xFF);
    rwmask[311] = (byte)((0xFF0000 >> 24) & 0xFF);
    // IPCSYNC at 0x180 = 0x6F0F;
    rwmask[384] = (byte)(0x6F0F & 0xFF);
    rwmask[385] = (byte)((0x6F0F >> 8) & 0xFF);
    rwmask[386] = (byte)((0x6F0F >> 16) & 0xFF);
    rwmask[387] = (byte)((0x6F0F >> 24) & 0xFF);
    // IPCFIFOCNT at 0x184 = 0xC707;
    rwmask[388] = (byte)(0xC707 & 0xFF);
    rwmask[389] = (byte)((0xC707 >> 8) & 0xFF);
    rwmask[390] = (byte)((0xC707 >> 16) & 0xFF);
    rwmask[391] = (byte)((0xC707 >> 24) & 0xFF);
    // IPCFIFOSEND at 0x188 = 0x0;
    rwmask[392] = (byte)(0x0 & 0xFF);
    rwmask[393] = (byte)((0x0 >> 8) & 0xFF);
    rwmask[394] = (byte)((0x0 >> 16) & 0xFF);
    rwmask[395] = (byte)((0x0 >> 24) & 0xFF);
    // AUXSPICNT at 0x1A0 = 0xFFE0C3;
    rwmask[416] = (byte)(0xFFE0C3 & 0xFF);
    rwmask[417] = (byte)((0xFFE0C3 >> 8) & 0xFF);
    rwmask[418] = (byte)((0xFFE0C3 >> 16) & 0xFF);
    rwmask[419] = (byte)((0xFFE0C3 >> 24) & 0xFF);
    // ROMCTRL at 0x1A4 = 0x7FFFFFFF;
    rwmask[420] = (byte)(0x7FFFFFFF & 0xFF);
    rwmask[421] = (byte)((0x7FFFFFFF >> 8) & 0xFF);
    rwmask[422] = (byte)((0x7FFFFFFF >> 16) & 0xFF);
    rwmask[423] = (byte)((0x7FFFFFFF >> 24) & 0xFF);
    // Gamecard_bus_Command_1 at 0x1A8 = 0x0;
    rwmask[424] = (byte)(0x0 & 0xFF);
    rwmask[425] = (byte)((0x0 >> 8) & 0xFF);
    rwmask[426] = (byte)((0x0 >> 16) & 0xFF);
    rwmask[427] = (byte)((0x0 >> 24) & 0xFF);
    // Gamecard_bus_Command_2 at 0x1AC = 0x0;
    rwmask[428] = (byte)(0x0 & 0xFF);
    rwmask[429] = (byte)((0x0 >> 8) & 0xFF);
    rwmask[430] = (byte)((0x0 >> 16) & 0xFF);
    rwmask[431] = (byte)((0x0 >> 24) & 0xFF);
    // Encryption_Seed_0_Lower at 0x1B0 = 0x0;
    rwmask[432] = (byte)(0x0 & 0xFF);
    rwmask[433] = (byte)((0x0 >> 8) & 0xFF);
    rwmask[434] = (byte)((0x0 >> 16) & 0xFF);
    rwmask[435] = (byte)((0x0 >> 24) & 0xFF);
    // Encryption_Seed_1_Lower at 0x1B4 = 0x0;
    rwmask[436] = (byte)(0x0 & 0xFF);
    rwmask[437] = (byte)((0x0 >> 8) & 0xFF);
    rwmask[438] = (byte)((0x0 >> 16) & 0xFF);
    rwmask[439] = (byte)((0x0 >> 24) & 0xFF);
    // Encryption_Seed_0_Upper at 0x1B8 = 0x0;
    rwmask[440] = (byte)(0x0 & 0xFF);
    rwmask[441] = (byte)((0x0 >> 8) & 0xFF);
    rwmask[442] = (byte)((0x0 >> 16) & 0xFF);
    rwmask[443] = (byte)((0x0 >> 24) & 0xFF);
    // EXMEMCNT at 0x204 = 0x3FFFFFF;
    rwmask[516] = (byte)(0x3FFFFFF & 0xFF);
    rwmask[517] = (byte)((0x3FFFFFF >> 8) & 0xFF);
    rwmask[518] = (byte)((0x3FFFFFF >> 16) & 0xFF);
    rwmask[519] = (byte)((0x3FFFFFF >> 24) & 0xFF);
    // IME at 0x208 = 0xFFFFFFFF;
    rwmask[520] = (byte)(0xFFFFFFFF & 0xFF);
    rwmask[521] = (byte)((0xFFFFFFFF >> 8) & 0xFF);
    rwmask[522] = (byte)((0xFFFFFFFF >> 16) & 0xFF);
    rwmask[523] = (byte)((0xFFFFFFFF >> 24) & 0xFF);
    // IE at 0x210 = 0xFFFF3F7F;
    rwmask[528] = (byte)(0xFFFF3F7F & 0xFF);
    rwmask[529] = (byte)((0xFFFF3F7F >> 8) & 0xFF);
    rwmask[530] = (byte)((0xFFFF3F7F >> 16) & 0xFF);
    rwmask[531] = (byte)((0xFFFF3F7F >> 24) & 0xFF);
    // IF at 0x214 = 0x3F3F7F;
    rwmask[532] = (byte)(0x3F3F7F & 0xFF);
    rwmask[533] = (byte)((0x3F3F7F >> 8) & 0xFF);
    rwmask[534] = (byte)((0x3F3F7F >> 16) & 0xFF);
    rwmask[535] = (byte)((0x3F3F7F >> 24) & 0xFF);
    // MemControl1 at 0x240 = 0x0;
    rwmask[576] = (byte)(0x0 & 0xFF);
    rwmask[577] = (byte)((0x0 >> 8) & 0xFF);
    rwmask[578] = (byte)((0x0 >> 16) & 0xFF);
    rwmask[579] = (byte)((0x0 >> 24) & 0xFF);
    // MemControl2 at 0x244 = 0x3000000;
    rwmask[580] = (byte)(0x3000000 & 0xFF);
    rwmask[581] = (byte)((0x3000000 >> 8) & 0xFF);
    rwmask[582] = (byte)((0x3000000 >> 16) & 0xFF);
    rwmask[583] = (byte)((0x3000000 >> 24) & 0xFF);
    // MemControl3 at 0x248 = 0x0;
    rwmask[584] = (byte)(0x0 & 0xFF);
    rwmask[585] = (byte)((0x0 >> 8) & 0xFF);
    rwmask[586] = (byte)((0x0 >> 16) & 0xFF);
    rwmask[587] = (byte)((0x0 >> 24) & 0xFF);
    // DIVCNT at 0x280 = 0xC003;
    rwmask[640] = (byte)(0xC003 & 0xFF);
    rwmask[641] = (byte)((0xC003 >> 8) & 0xFF);
    rwmask[642] = (byte)((0xC003 >> 16) & 0xFF);
    rwmask[643] = (byte)((0xC003 >> 24) & 0xFF);
    // DIV_NUMER_High at 0x290 = 0xFFFFFFFF;
    rwmask[656] = (byte)(0xFFFFFFFF & 0xFF);
    rwmask[657] = (byte)((0xFFFFFFFF >> 8) & 0xFF);
    rwmask[658] = (byte)((0xFFFFFFFF >> 16) & 0xFF);
    rwmask[659] = (byte)((0xFFFFFFFF >> 24) & 0xFF);
    // DIV_NUMER_Low at 0x294 = 0xFFFFFFFF;
    rwmask[660] = (byte)(0xFFFFFFFF & 0xFF);
    rwmask[661] = (byte)((0xFFFFFFFF >> 8) & 0xFF);
    rwmask[662] = (byte)((0xFFFFFFFF >> 16) & 0xFF);
    rwmask[663] = (byte)((0xFFFFFFFF >> 24) & 0xFF);
    // DIV_DENOM_High at 0x298 = 0xFFFFFFFF;
    rwmask[664] = (byte)(0xFFFFFFFF & 0xFF);
    rwmask[665] = (byte)((0xFFFFFFFF >> 8) & 0xFF);
    rwmask[666] = (byte)((0xFFFFFFFF >> 16) & 0xFF);
    rwmask[667] = (byte)((0xFFFFFFFF >> 24) & 0xFF);
    // DIV_DENOM_Low at 0x29C = 0xFFFFFFFF;
    rwmask[668] = (byte)(0xFFFFFFFF & 0xFF);
    rwmask[669] = (byte)((0xFFFFFFFF >> 8) & 0xFF);
    rwmask[670] = (byte)((0xFFFFFFFF >> 16) & 0xFF);
    rwmask[671] = (byte)((0xFFFFFFFF >> 24) & 0xFF);
    // DIV_RESULT_High at 0x2A0 = 0xFFFFFFFF;
    rwmask[672] = (byte)(0xFFFFFFFF & 0xFF);
    rwmask[673] = (byte)((0xFFFFFFFF >> 8) & 0xFF);
    rwmask[674] = (byte)((0xFFFFFFFF >> 16) & 0xFF);
    rwmask[675] = (byte)((0xFFFFFFFF >> 24) & 0xFF);
    // DIV_RESULT_Low at 0x2A4 = 0xFFFFFFFF;
    rwmask[676] = (byte)(0xFFFFFFFF & 0xFF);
    rwmask[677] = (byte)((0xFFFFFFFF >> 8) & 0xFF);
    rwmask[678] = (byte)((0xFFFFFFFF >> 16) & 0xFF);
    rwmask[679] = (byte)((0xFFFFFFFF >> 24) & 0xFF);
    // DIVREM_RESULT_High at 0x2A8 = 0xFFFFFFFF;
    rwmask[680] = (byte)(0xFFFFFFFF & 0xFF);
    rwmask[681] = (byte)((0xFFFFFFFF >> 8) & 0xFF);
    rwmask[682] = (byte)((0xFFFFFFFF >> 16) & 0xFF);
    rwmask[683] = (byte)((0xFFFFFFFF >> 24) & 0xFF);
    // DIVREM_RESULT_Low at 0x2AC = 0xFFFFFFFF;
    rwmask[684] = (byte)(0xFFFFFFFF & 0xFF);
    rwmask[685] = (byte)((0xFFFFFFFF >> 8) & 0xFF);
    rwmask[686] = (byte)((0xFFFFFFFF >> 16) & 0xFF);
    rwmask[687] = (byte)((0xFFFFFFFF >> 24) & 0xFF);
    // SQRT_RESULT at 0x2B4 = 0xFFFFFFFF;
    rwmask[692] = (byte)(0xFFFFFFFF & 0xFF);
    rwmask[693] = (byte)((0xFFFFFFFF >> 8) & 0xFF);
    rwmask[694] = (byte)((0xFFFFFFFF >> 16) & 0xFF);
    rwmask[695] = (byte)((0xFFFFFFFF >> 24) & 0xFF);
    // SQRT_PARAM_High at 0x2B8 = 0xFFFFFFFF;
    rwmask[696] = (byte)(0xFFFFFFFF & 0xFF);
    rwmask[697] = (byte)((0xFFFFFFFF >> 8) & 0xFF);
    rwmask[698] = (byte)((0xFFFFFFFF >> 16) & 0xFF);
    rwmask[699] = (byte)((0xFFFFFFFF >> 24) & 0xFF);
    // SQRT_PARAM_Low at 0x2BC = 0xFFFFFFFF;
    rwmask[700] = (byte)(0xFFFFFFFF & 0xFF);
    rwmask[701] = (byte)((0xFFFFFFFF >> 8) & 0xFF);
    rwmask[702] = (byte)((0xFFFFFFFF >> 16) & 0xFF);
    rwmask[703] = (byte)((0xFFFFFFFF >> 24) & 0xFF);
    // POSTFLG at 0x300 = 0x3;
    rwmask[768] = (byte)(0x3 & 0xFF);
    rwmask[769] = (byte)((0x3 >> 8) & 0xFF);
    rwmask[770] = (byte)((0x3 >> 16) & 0xFF);
    rwmask[771] = (byte)((0x3 >> 24) & 0xFF);
    // POWCNT1 at 0x304 = 0x820F;
    rwmask[772] = (byte)(0x820F & 0xFF);
    rwmask[773] = (byte)((0x820F >> 8) & 0xFF);
    rwmask[774] = (byte)((0x820F >> 16) & 0xFF);
    rwmask[775] = (byte)((0x820F >> 24) & 0xFF);
    // IPCFIFORECV at 0xFFF = 0xFFFFFFFF;
    rwmask[4095] = (byte)(0xFFFFFFFF & 0xFF);
    rwmask[4096] = (byte)((0xFFFFFFFF >> 8) & 0xFF);
    rwmask[4097] = (byte)((0xFFFFFFFF >> 16) & 0xFF);
    rwmask[4098] = (byte)((0xFFFFFFFF >> 24) & 0xFF);
}
