#include "regs_arm7.h";

REGS_Arm7 Regs_Arm7;


RegSect_display7::RegSect_display7()
{
    DISPCNT = DSReg(0x000, 15, 0, 1, 0, "readwrite", Regs_Arm7.data);
    DISPCNT_BG_Mode = DSReg(0x000, 2, 0, 1, 0, "readwrite", Regs_Arm7.data);
    DISPCNT_Reserved_CGB_Mode = DSReg(0x000, 3, 3, 1, 0, "readwrite", Regs_Arm7.data);
    DISPCNT_Display_Frame_Select = DSReg(0x000, 4, 4, 1, 0, "readwrite", Regs_Arm7.data);
    DISPCNT_H_Blank_IntervalFree = DSReg(0x000, 5, 5, 1, 0, "readwrite", Regs_Arm7.data);
    DISPCNT_OBJ_Char_VRAM_Map = DSReg(0x000, 6, 6, 1, 0, "readwrite", Regs_Arm7.data);
    DISPCNT_Forced_Blank = DSReg(0x000, 7, 7, 1, 0, "readwrite", Regs_Arm7.data);
    DISPCNT_Screen_Display_BG0 = DSReg(0x000, 8, 8, 1, 0, "readwrite", Regs_Arm7.data);
    DISPCNT_Screen_Display_BG1 = DSReg(0x000, 9, 9, 1, 0, "readwrite", Regs_Arm7.data);
    DISPCNT_Screen_Display_BG2 = DSReg(0x000, 10, 10, 1, 0, "readwrite", Regs_Arm7.data);
    DISPCNT_Screen_Display_BG3 = DSReg(0x000, 11, 11, 1, 0, "readwrite", Regs_Arm7.data);
    DISPCNT_Screen_Display_OBJ = DSReg(0x000, 12, 12, 1, 0, "readwrite", Regs_Arm7.data);
    DISPCNT_Window_0_Display_Flag = DSReg(0x000, 13, 13, 1, 0, "readwrite", Regs_Arm7.data);
    DISPCNT_Window_1_Display_Flag = DSReg(0x000, 14, 14, 1, 0, "readwrite", Regs_Arm7.data);
    DISPCNT_OBJ_Wnd_Display_Flag = DSReg(0x000, 15, 15, 1, 0, "readwrite", Regs_Arm7.data);
    GREENSWAP = DSReg(0x000, 31, 16, 1, 0, "readwrite", Regs_Arm7.data);
    DISPSTAT = DSReg(0x004, 15, 0, 1, 0x0004, "readwrite", Regs_Arm7.data);
    DISPSTAT_V_Blank_flag = DSReg(0x004, 0, 0, 1, 0, "readonly", Regs_Arm7.data);
    DISPSTAT_H_Blank_flag = DSReg(0x004, 1, 1, 1, 0, "readonly", Regs_Arm7.data);
    DISPSTAT_V_Counter_flag = DSReg(0x004, 2, 2, 1, 0, "readonly", Regs_Arm7.data);
    DISPSTAT_V_Blank_IRQ_Enable = DSReg(0x004, 3, 3, 1, 0, "readwrite", Regs_Arm7.data);
    DISPSTAT_H_Blank_IRQ_Enable = DSReg(0x004, 4, 4, 1, 0, "readwrite", Regs_Arm7.data);
    DISPSTAT_V_Counter_IRQ_Enable = DSReg(0x004, 5, 5, 1, 0, "readwrite", Regs_Arm7.data);
    DISPSTAT_V_Count_Setting8 = DSReg(0x004, 7, 7, 1, 0, "readwrite", Regs_Arm7.data);
    DISPSTAT_V_Count_Setting = DSReg(0x004, 15, 8, 1, 0, "readwrite", Regs_Arm7.data);
    VCOUNT = DSReg(0x004, 31, 16, 1, 0, "readwrite", Regs_Arm7.data);
    BG0CNT = DSReg(0x008, 15, 0, 1, 0, "writeonly", Regs_Arm7.data);
    BG0CNT_BG_Priority = DSReg(0x008, 1, 0, 1, 0, "readwrite", Regs_Arm7.data);
    BG0CNT_Character_Base_Block = DSReg(0x008, 3, 2, 1, 0, "readwrite", Regs_Arm7.data);
    BG0CNT_UNUSED_4_5 = DSReg(0x008, 5, 4, 1, 0, "readwrite", Regs_Arm7.data);
    BG0CNT_Mosaic = DSReg(0x008, 6, 6, 1, 0, "readwrite", Regs_Arm7.data);
    BG0CNT_Colors_Palettes = DSReg(0x008, 7, 7, 1, 0, "readwrite", Regs_Arm7.data);
    BG0CNT_Screen_Base_Block = DSReg(0x008, 12, 8, 1, 0, "readwrite", Regs_Arm7.data);
    BG0CNT_Screen_Size = DSReg(0x008, 15, 14, 1, 0, "readwrite", Regs_Arm7.data);
    BG1CNT = DSReg(0x00A, 15, 0, 1, 0, "writeonly", Regs_Arm7.data);
    BG1CNT_BG_Priority = DSReg(0x00A, 1, 0, 1, 0, "readwrite", Regs_Arm7.data);
    BG1CNT_Character_Base_Block = DSReg(0x00A, 3, 2, 1, 0, "readwrite", Regs_Arm7.data);
    BG1CNT_UNUSED_4_5 = DSReg(0x00A, 5, 4, 1, 0, "readwrite", Regs_Arm7.data);
    BG1CNT_Mosaic = DSReg(0x00A, 6, 6, 1, 0, "readwrite", Regs_Arm7.data);
    BG1CNT_Colors_Palettes = DSReg(0x00A, 7, 7, 1, 0, "readwrite", Regs_Arm7.data);
    BG1CNT_Screen_Base_Block = DSReg(0x00A, 12, 8, 1, 0, "readwrite", Regs_Arm7.data);
    BG1CNT_Screen_Size = DSReg(0x00A, 15, 14, 1, 0, "readwrite", Regs_Arm7.data);
    BG2CNT = DSReg(0x00C, 15, 0, 1, 0, "readwrite", Regs_Arm7.data);
    BG2CNT_BG_Priority = DSReg(0x00C, 1, 0, 1, 0, "readwrite", Regs_Arm7.data);
    BG2CNT_Character_Base_Block = DSReg(0x00C, 3, 2, 1, 0, "readwrite", Regs_Arm7.data);
    BG2CNT_Mosaic = DSReg(0x00C, 6, 6, 1, 0, "readwrite", Regs_Arm7.data);
    BG2CNT_Colors_Palettes = DSReg(0x00C, 7, 7, 1, 0, "readwrite", Regs_Arm7.data);
    BG2CNT_Screen_Base_Block = DSReg(0x00C, 12, 8, 1, 0, "readwrite", Regs_Arm7.data);
    BG2CNT_Display_Area_Overflow = DSReg(0x00C, 13, 13, 1, 0, "readwrite", Regs_Arm7.data);
    BG2CNT_Screen_Size = DSReg(0x00C, 15, 14, 1, 0, "readwrite", Regs_Arm7.data);
    BG3CNT = DSReg(0x00E, 15, 0, 1, 0, "readwrite", Regs_Arm7.data);
    BG3CNT_BG_Priority = DSReg(0x00E, 1, 0, 1, 0, "readwrite", Regs_Arm7.data);
    BG3CNT_Character_Base_Block = DSReg(0x00E, 3, 2, 1, 0, "readwrite", Regs_Arm7.data);
    BG3CNT_Mosaic = DSReg(0x00E, 6, 6, 1, 0, "readwrite", Regs_Arm7.data);
    BG3CNT_Colors_Palettes = DSReg(0x00E, 7, 7, 1, 0, "readwrite", Regs_Arm7.data);
    BG3CNT_Screen_Base_Block = DSReg(0x00E, 12, 8, 1, 0, "readwrite", Regs_Arm7.data);
    BG3CNT_Display_Area_Overflow = DSReg(0x00E, 13, 13, 1, 0, "readwrite", Regs_Arm7.data);
    BG3CNT_Screen_Size = DSReg(0x00E, 15, 14, 1, 0, "readwrite", Regs_Arm7.data);
    BG0HOFS = DSReg(0x010, 15, 0, 1, 0, "writeonly", Regs_Arm7.data);
    BG0VOFS = DSReg(0x012, 15, 0, 1, 0, "writeonly", Regs_Arm7.data);
    BG1HOFS = DSReg(0x014, 15, 0, 1, 0, "writeonly", Regs_Arm7.data);
    BG1VOFS = DSReg(0x016, 15, 0, 1, 0, "writeonly", Regs_Arm7.data);
    BG2HOFS = DSReg(0x018, 15, 0, 1, 0, "writeonly", Regs_Arm7.data);
    BG2VOFS = DSReg(0x01A, 15, 0, 1, 0, "writeonly", Regs_Arm7.data);
    BG3HOFS = DSReg(0x01C, 15, 0, 1, 0, "writeonly", Regs_Arm7.data);
    BG3VOFS = DSReg(0x01E, 15, 0, 1, 0, "writeonly", Regs_Arm7.data);
    BG2RotScaleParDX = DSReg(0x020, 15, 0, 1, 256, "writeonly", Regs_Arm7.data);
    BG2RotScaleParDMX = DSReg(0x020, 31, 16, 1, 0, "writeonly", Regs_Arm7.data);
    BG2RotScaleParDY = DSReg(0x024, 15, 0, 1, 0, "writeonly", Regs_Arm7.data);
    BG2RotScaleParDMY = DSReg(0x024, 31, 16, 1, 256, "writeonly", Regs_Arm7.data);
    BG2RefX = DSReg(0x028, 27, 0, 1, 0, "writeonly", Regs_Arm7.data);
    BG2RefY = DSReg(0x02C, 27, 0, 1, 0, "writeonly", Regs_Arm7.data);
    BG3RotScaleParDX = DSReg(0x030, 15, 0, 1, 256, "writeonly", Regs_Arm7.data);
    BG3RotScaleParDMX = DSReg(0x030, 31, 16, 1, 0, "writeonly", Regs_Arm7.data);
    BG3RotScaleParDY = DSReg(0x034, 15, 0, 1, 0, "writeonly", Regs_Arm7.data);
    BG3RotScaleParDMY = DSReg(0x034, 31, 16, 1, 256, "writeonly", Regs_Arm7.data);
    BG3RefX = DSReg(0x038, 27, 0, 1, 0, "writeonly", Regs_Arm7.data);
    BG3RefY = DSReg(0x03C, 27, 0, 1, 0, "writeonly", Regs_Arm7.data);
    WIN0H = DSReg(0x040, 15, 0, 1, 0, "writeonly", Regs_Arm7.data);
    WIN0H_X2 = DSReg(0x040, 7, 0, 1, 0, "writeonly", Regs_Arm7.data);
    WIN0H_X1 = DSReg(0x040, 15, 8, 1, 0, "writeonly", Regs_Arm7.data);
    WIN1H = DSReg(0x040, 31, 16, 1, 0, "writeonly", Regs_Arm7.data);
    WIN1H_X2 = DSReg(0x040, 23, 16, 1, 0, "writeonly", Regs_Arm7.data);
    WIN1H_X1 = DSReg(0x040, 31, 24, 1, 0, "writeonly", Regs_Arm7.data);
    WIN0V = DSReg(0x044, 15, 0, 1, 0, "writeonly", Regs_Arm7.data);
    WIN0V_Y2 = DSReg(0x044, 7, 0, 1, 0, "writeonly", Regs_Arm7.data);
    WIN0V_Y1 = DSReg(0x044, 15, 8, 1, 0, "writeonly", Regs_Arm7.data);
    WIN1V = DSReg(0x044, 31, 16, 1, 0, "writeonly", Regs_Arm7.data);
    WIN1V_Y2 = DSReg(0x044, 23, 16, 1, 0, "writeonly", Regs_Arm7.data);
    WIN1V_Y1 = DSReg(0x044, 31, 24, 1, 0, "writeonly", Regs_Arm7.data);
    WININ = DSReg(0x048, 15, 0, 1, 0, "writeonly", Regs_Arm7.data);
    WININ_Window_0_BG0_Enable = DSReg(0x048, 0, 0, 1, 0, "readwrite", Regs_Arm7.data);
    WININ_Window_0_BG1_Enable = DSReg(0x048, 1, 1, 1, 0, "readwrite", Regs_Arm7.data);
    WININ_Window_0_BG2_Enable = DSReg(0x048, 2, 2, 1, 0, "readwrite", Regs_Arm7.data);
    WININ_Window_0_BG3_Enable = DSReg(0x048, 3, 3, 1, 0, "readwrite", Regs_Arm7.data);
    WININ_Window_0_OBJ_Enable = DSReg(0x048, 4, 4, 1, 0, "readwrite", Regs_Arm7.data);
    WININ_Window_0_Special_Effect = DSReg(0x048, 5, 5, 1, 0, "readwrite", Regs_Arm7.data);
    WININ_Window_1_BG0_Enable = DSReg(0x048, 8, 8, 1, 0, "readwrite", Regs_Arm7.data);
    WININ_Window_1_BG1_Enable = DSReg(0x048, 9, 9, 1, 0, "readwrite", Regs_Arm7.data);
    WININ_Window_1_BG2_Enable = DSReg(0x048, 10, 10, 1, 0, "readwrite", Regs_Arm7.data);
    WININ_Window_1_BG3_Enable = DSReg(0x048, 11, 11, 1, 0, "readwrite", Regs_Arm7.data);
    WININ_Window_1_OBJ_Enable = DSReg(0x048, 12, 12, 1, 0, "readwrite", Regs_Arm7.data);
    WININ_Window_1_Special_Effect = DSReg(0x048, 13, 13, 1, 0, "readwrite", Regs_Arm7.data);
    WINOUT = DSReg(0x048, 31, 16, 1, 0, "writeonly", Regs_Arm7.data);
    WINOUT_Outside_BG0_Enable = DSReg(0x048, 16, 16, 1, 0, "readwrite", Regs_Arm7.data);
    WINOUT_Outside_BG1_Enable = DSReg(0x048, 17, 17, 1, 0, "readwrite", Regs_Arm7.data);
    WINOUT_Outside_BG2_Enable = DSReg(0x048, 18, 18, 1, 0, "readwrite", Regs_Arm7.data);
    WINOUT_Outside_BG3_Enable = DSReg(0x048, 19, 19, 1, 0, "readwrite", Regs_Arm7.data);
    WINOUT_Outside_OBJ_Enable = DSReg(0x048, 20, 20, 1, 0, "readwrite", Regs_Arm7.data);
    WINOUT_Outside_Special_Effect = DSReg(0x048, 21, 21, 1, 0, "readwrite", Regs_Arm7.data);
    WINOUT_Objwnd_BG0_Enable = DSReg(0x048, 24, 24, 1, 0, "readwrite", Regs_Arm7.data);
    WINOUT_Objwnd_BG1_Enable = DSReg(0x048, 25, 25, 1, 0, "readwrite", Regs_Arm7.data);
    WINOUT_Objwnd_BG2_Enable = DSReg(0x048, 26, 26, 1, 0, "readwrite", Regs_Arm7.data);
    WINOUT_Objwnd_BG3_Enable = DSReg(0x048, 27, 27, 1, 0, "readwrite", Regs_Arm7.data);
    WINOUT_Objwnd_OBJ_Enable = DSReg(0x048, 28, 28, 1, 0, "readwrite", Regs_Arm7.data);
    WINOUT_Objwnd_Special_Effect = DSReg(0x048, 29, 29, 1, 0, "readwrite", Regs_Arm7.data);
    MOSAIC = DSReg(0x04C, 15, 0, 1, 0, "writeonly", Regs_Arm7.data);
    MOSAIC_BG_Mosaic_H_Size = DSReg(0x04C, 3, 0, 1, 0, "writeonly", Regs_Arm7.data);
    MOSAIC_BG_Mosaic_V_Size = DSReg(0x04C, 7, 4, 1, 0, "writeonly", Regs_Arm7.data);
    MOSAIC_OBJ_Mosaic_H_Size = DSReg(0x04C, 11, 8, 1, 0, "writeonly", Regs_Arm7.data);
    MOSAIC_OBJ_Mosaic_V_Size = DSReg(0x04C, 15, 12, 1, 0, "writeonly", Regs_Arm7.data);
    BLDCNT = DSReg(0x050, 13, 0, 1, 0, "readwrite", Regs_Arm7.data);
    BLDCNT_BG0_1st_Target_Pixel = DSReg(0x050, 0, 0, 1, 0, "readwrite", Regs_Arm7.data);
    BLDCNT_BG1_1st_Target_Pixel = DSReg(0x050, 1, 1, 1, 0, "readwrite", Regs_Arm7.data);
    BLDCNT_BG2_1st_Target_Pixel = DSReg(0x050, 2, 2, 1, 0, "readwrite", Regs_Arm7.data);
    BLDCNT_BG3_1st_Target_Pixel = DSReg(0x050, 3, 3, 1, 0, "readwrite", Regs_Arm7.data);
    BLDCNT_OBJ_1st_Target_Pixel = DSReg(0x050, 4, 4, 1, 0, "readwrite", Regs_Arm7.data);
    BLDCNT_BD_1st_Target_Pixel = DSReg(0x050, 5, 5, 1, 0, "readwrite", Regs_Arm7.data);
    BLDCNT_Color_Special_Effect = DSReg(0x050, 7, 6, 1, 0, "readwrite", Regs_Arm7.data);
    BLDCNT_BG0_2nd_Target_Pixel = DSReg(0x050, 8, 8, 1, 0, "readwrite", Regs_Arm7.data);
    BLDCNT_BG1_2nd_Target_Pixel = DSReg(0x050, 9, 9, 1, 0, "readwrite", Regs_Arm7.data);
    BLDCNT_BG2_2nd_Target_Pixel = DSReg(0x050, 10, 10, 1, 0, "readwrite", Regs_Arm7.data);
    BLDCNT_BG3_2nd_Target_Pixel = DSReg(0x050, 11, 11, 1, 0, "readwrite", Regs_Arm7.data);
    BLDCNT_OBJ_2nd_Target_Pixel = DSReg(0x050, 12, 12, 1, 0, "readwrite", Regs_Arm7.data);
    BLDCNT_BD_2nd_Target_Pixel = DSReg(0x050, 13, 13, 1, 0, "readwrite", Regs_Arm7.data);
    BLDALPHA = DSReg(0x050, 28, 16, 1, 0, "writeonly", Regs_Arm7.data);
    BLDALPHA_EVA_Coefficient = DSReg(0x050, 20, 16, 1, 0, "readwrite", Regs_Arm7.data);
    BLDALPHA_EVB_Coefficient = DSReg(0x050, 28, 24, 1, 0, "readwrite", Regs_Arm7.data);
    BLDY = DSReg(0x054, 4, 0, 1, 0, "writeonly", Regs_Arm7.data);
}

RegSect_sound7::RegSect_sound7()
{
    SOUND1CNT_L = DSReg(0x060, 6, 0, 1, 0, "readwrite", Regs_Arm7.data);
    SOUND1CNT_L_Number_of_sweep_shift = DSReg(0x060, 2, 0, 1, 0, "readwrite", Regs_Arm7.data);
    SOUND1CNT_L_Sweep_Frequency_Direction = DSReg(0x060, 3, 3, 1, 0, "readwrite", Regs_Arm7.data);
    SOUND1CNT_L_Sweep_Time = DSReg(0x060, 6, 4, 1, 0, "readwrite", Regs_Arm7.data);
    SOUND1CNT_H = DSReg(0x060, 31, 16, 1, 0, "writeonly", Regs_Arm7.data);
    SOUND1CNT_H_Sound_length = DSReg(0x060, 21, 16, 1, 0, "writeonly", Regs_Arm7.data);
    SOUND1CNT_H_Wave_Pattern_Duty = DSReg(0x060, 23, 22, 1, 0, "readwrite", Regs_Arm7.data);
    SOUND1CNT_H_Envelope_Step_Time = DSReg(0x060, 26, 24, 1, 0, "readwrite", Regs_Arm7.data);
    SOUND1CNT_H_Envelope_Direction = DSReg(0x060, 27, 27, 1, 0, "readwrite", Regs_Arm7.data);
    SOUND1CNT_H_Initial_Volume_of_envelope = DSReg(0x060, 31, 28, 1, 0, "readwrite", Regs_Arm7.data);
    SOUND1CNT_X = DSReg(0x064, 15, 0, 1, 0, "writeonly", Regs_Arm7.data);
    SOUND1CNT_X_Frequency = DSReg(0x064, 10, 0, 1, 0, "writeonly", Regs_Arm7.data);
    SOUND1CNT_X_Length_Flag = DSReg(0x064, 14, 14, 1, 0, "readwrite", Regs_Arm7.data);
    SOUND1CNT_X_Initial = DSReg(0x064, 15, 15, 1, 0, "writeonly", Regs_Arm7.data);
    SOUND1CNT_XHighZero = DSReg(0x064, 31, 16, 1, 0, "readonly", Regs_Arm7.data);
    SOUND2CNT_L = DSReg(0x068, 15, 0, 1, 0, "writeonly", Regs_Arm7.data);
    SOUND2CNT_L_Sound_length = DSReg(0x068, 5, 0, 1, 0, "writeonly", Regs_Arm7.data);
    SOUND2CNT_L_Wave_Pattern_Duty = DSReg(0x068, 7, 6, 1, 0, "readwrite", Regs_Arm7.data);
    SOUND2CNT_L_Envelope_Step_Time = DSReg(0x068, 10, 8, 1, 0, "readwrite", Regs_Arm7.data);
    SOUND2CNT_L_Envelope_Direction = DSReg(0x068, 11, 11, 1, 0, "readwrite", Regs_Arm7.data);
    SOUND2CNT_L_Initial_Volume_of_envelope = DSReg(0x068, 15, 12, 1, 0, "readwrite", Regs_Arm7.data);
    SOUND2CNT_H = DSReg(0x06C, 15, 0, 1, 0, "writeonly", Regs_Arm7.data);
    SOUND2CNT_H_Frequency = DSReg(0x06C, 10, 0, 1, 0, "writeonly", Regs_Arm7.data);
    SOUND2CNT_H_Length_Flag = DSReg(0x06C, 14, 14, 1, 0, "readwrite", Regs_Arm7.data);
    SOUND2CNT_H_Initial = DSReg(0x06C, 15, 15, 1, 0, "writeonly", Regs_Arm7.data);
    SOUND2CNT_HHighZero = DSReg(0x06C, 31, 16, 1, 0, "readonly", Regs_Arm7.data);
    SOUND3CNT_L = DSReg(0x070, 15, 0, 1, 0, "writeonly", Regs_Arm7.data);
    SOUND3CNT_L_Wave_RAM_Dimension = DSReg(0x070, 5, 5, 1, 0, "readwrite", Regs_Arm7.data);
    SOUND3CNT_L_Wave_RAM_Bank_Number = DSReg(0x070, 6, 6, 1, 0, "readwrite", Regs_Arm7.data);
    SOUND3CNT_L_Sound_Channel_3_Off = DSReg(0x070, 7, 7, 1, 0, "readwrite", Regs_Arm7.data);
    SOUND3CNT_H = DSReg(0x070, 31, 16, 1, 0, "writeonly", Regs_Arm7.data);
    SOUND3CNT_H_Sound_length = DSReg(0x070, 23, 16, 1, 0, "writeonly", Regs_Arm7.data);
    SOUND3CNT_H_Sound_Volume = DSReg(0x070, 30, 29, 1, 0, "readwrite", Regs_Arm7.data);
    SOUND3CNT_H_Force_Volume = DSReg(0x070, 31, 31, 1, 0, "readwrite", Regs_Arm7.data);
    SOUND3CNT_X = DSReg(0x074, 15, 0, 1, 0, "writeonly", Regs_Arm7.data);
    SOUND3CNT_X_Sample_Rate = DSReg(0x074, 10, 0, 1, 0, "writeonly", Regs_Arm7.data);
    SOUND3CNT_X_Length_Flag = DSReg(0x074, 14, 14, 1, 0, "readwrite", Regs_Arm7.data);
    SOUND3CNT_X_Initial = DSReg(0x074, 15, 15, 1, 0, "writeonly", Regs_Arm7.data);
    SOUND3CNT_XHighZero = DSReg(0x074, 31, 16, 1, 0, "readonly", Regs_Arm7.data);
    SOUND4CNT_L = DSReg(0x078, 15, 0, 1, 0, "writeonly", Regs_Arm7.data);
    SOUND4CNT_L_Sound_length = DSReg(0x078, 5, 0, 1, 0, "writeonly", Regs_Arm7.data);
    SOUND4CNT_L_Envelope_Step_Time = DSReg(0x078, 10, 8, 1, 0, "readwrite", Regs_Arm7.data);
    SOUND4CNT_L_Envelope_Direction = DSReg(0x078, 11, 11, 1, 0, "readwrite", Regs_Arm7.data);
    SOUND4CNT_L_Initial_Volume_of_envelope = DSReg(0x078, 15, 12, 1, 0, "readwrite", Regs_Arm7.data);
    SOUND4CNT_LHighZero = DSReg(0x078, 31, 16, 1, 0, "readonly", Regs_Arm7.data);
    SOUND4CNT_H = DSReg(0x07C, 15, 0, 1, 0, "writeonly", Regs_Arm7.data);
    SOUND4CNT_H_Dividing_Ratio_of_Freq = DSReg(0x07C, 2, 0, 1, 0, "readwrite", Regs_Arm7.data);
    SOUND4CNT_H_Counter_Step_Width = DSReg(0x07C, 3, 3, 1, 0, "readwrite", Regs_Arm7.data);
    SOUND4CNT_H_Shift_Clock_Frequency = DSReg(0x07C, 7, 4, 1, 0, "readwrite", Regs_Arm7.data);
    SOUND4CNT_H_Length_Flag = DSReg(0x07C, 14, 14, 1, 0, "readwrite", Regs_Arm7.data);
    SOUND4CNT_H_Initial = DSReg(0x07C, 15, 15, 1, 0, "writeonly", Regs_Arm7.data);
    SOUND4CNT_HHighZero = DSReg(0x07C, 31, 16, 1, 0, "readonly", Regs_Arm7.data);
    SOUNDCNT_L = DSReg(0x080, 15, 0, 1, 0, "writeonly", Regs_Arm7.data);
    SOUNDCNT_L_Sound_1_4_Master_Volume_RIGHT = DSReg(0x080, 2, 0, 1, 0, "readwrite", Regs_Arm7.data);
    SOUNDCNT_L_Sound_1_4_Master_Volume_LEFT = DSReg(0x080, 6, 4, 1, 0, "readwrite", Regs_Arm7.data);
    SOUNDCNT_L_Sound_1_Enable_Flags_RIGHT = DSReg(0x080, 8, 8, 1, 0, "readwrite", Regs_Arm7.data);
    SOUNDCNT_L_Sound_2_Enable_Flags_RIGHT = DSReg(0x080, 9, 9, 1, 0, "readwrite", Regs_Arm7.data);
    SOUNDCNT_L_Sound_3_Enable_Flags_RIGHT = DSReg(0x080, 10, 10, 1, 0, "readwrite", Regs_Arm7.data);
    SOUNDCNT_L_Sound_4_Enable_Flags_RIGHT = DSReg(0x080, 11, 11, 1, 0, "readwrite", Regs_Arm7.data);
    SOUNDCNT_L_Sound_1_Enable_Flags_LEFT = DSReg(0x080, 12, 12, 1, 0, "readwrite", Regs_Arm7.data);
    SOUNDCNT_L_Sound_2_Enable_Flags_LEFT = DSReg(0x080, 13, 13, 1, 0, "readwrite", Regs_Arm7.data);
    SOUNDCNT_L_Sound_3_Enable_Flags_LEFT = DSReg(0x080, 14, 14, 1, 0, "readwrite", Regs_Arm7.data);
    SOUNDCNT_L_Sound_4_Enable_Flags_LEFT = DSReg(0x080, 15, 15, 1, 0, "readwrite", Regs_Arm7.data);
    SOUNDCNT_H = DSReg(0x080, 31, 16, 1, 0, "readwrite", Regs_Arm7.data);
    SOUNDCNT_H_Sound_1_4_Volume = DSReg(0x080, 17, 16, 1, 0, "readwrite", Regs_Arm7.data);
    SOUNDCNT_H_DMA_Sound_A_Volume = DSReg(0x080, 18, 18, 1, 0, "readwrite", Regs_Arm7.data);
    SOUNDCNT_H_DMA_Sound_B_Volume = DSReg(0x080, 19, 19, 1, 0, "readwrite", Regs_Arm7.data);
    SOUNDCNT_H_DMA_Sound_A_Enable_RIGHT = DSReg(0x080, 24, 24, 1, 0, "readwrite", Regs_Arm7.data);
    SOUNDCNT_H_DMA_Sound_A_Enable_LEFT = DSReg(0x080, 25, 25, 1, 0, "readwrite", Regs_Arm7.data);
    SOUNDCNT_H_DMA_Sound_A_Timer_Select = DSReg(0x080, 26, 26, 1, 0, "readwrite", Regs_Arm7.data);
    SOUNDCNT_H_DMA_Sound_A_Reset_FIFO = DSReg(0x080, 27, 27, 1, 0, "readwrite", Regs_Arm7.data);
    SOUNDCNT_H_DMA_Sound_B_Enable_RIGHT = DSReg(0x080, 28, 28, 1, 0, "readwrite", Regs_Arm7.data);
    SOUNDCNT_H_DMA_Sound_B_Enable_LEFT = DSReg(0x080, 29, 29, 1, 0, "readwrite", Regs_Arm7.data);
    SOUNDCNT_H_DMA_Sound_B_Timer_Select = DSReg(0x080, 30, 30, 1, 0, "readwrite", Regs_Arm7.data);
    SOUNDCNT_H_DMA_Sound_B_Reset_FIFO = DSReg(0x080, 31, 31, 1, 0, "readwrite", Regs_Arm7.data);
    SOUNDCNT_X = DSReg(0x084, 7, 0, 1, 0, "readwrite", Regs_Arm7.data);
    SOUNDCNT_X_Sound_1_ON_flag = DSReg(0x084, 0, 0, 1, 0, "readwrite", Regs_Arm7.data);
    SOUNDCNT_X_Sound_2_ON_flag = DSReg(0x084, 1, 1, 1, 0, "readwrite", Regs_Arm7.data);
    SOUNDCNT_X_Sound_3_ON_flag = DSReg(0x084, 2, 2, 1, 0, "readwrite", Regs_Arm7.data);
    SOUNDCNT_X_Sound_4_ON_flag = DSReg(0x084, 3, 3, 1, 0, "readwrite", Regs_Arm7.data);
    SOUNDCNT_X_PSG_FIFO_Master_Enable = DSReg(0x084, 7, 7, 1, 0, "readwrite", Regs_Arm7.data);
    SOUNDCNT_XHighZero = DSReg(0x084, 31, 16, 1, 0, "readonly", Regs_Arm7.data);
    SOUNDBIAS = DSReg(0x088, 15, 0, 1, 0x0200, "readwrite", Regs_Arm7.data);
    SOUNDBIAS_Bias_Level = DSReg(0x088, 9, 0, 1, 0, "readwrite", Regs_Arm7.data);
    SOUNDBIAS_Amp_Res_Sampling_Cycle = DSReg(0x088, 15, 14, 1, 0, "readwrite", Regs_Arm7.data);
    SOUNDBIAS_HighZero = DSReg(0x088, 31, 16, 1, 0, "readonly", Regs_Arm7.data);
    WAVE_RAM = DSReg(0x090, 31, 0, 4, 0, "readwrite", Regs_Arm7.data);
    WAVE_RAM2 = DSReg(0x094, 31, 0, 1, 0, "readwrite", Regs_Arm7.data);
    WAVE_RAM3 = DSReg(0x098, 31, 0, 1, 0, "readwrite", Regs_Arm7.data);
    WAVE_RAM4 = DSReg(0x09C, 31, 0, 1, 0, "readwrite", Regs_Arm7.data);
    FIFO_A = DSReg(0x0A0, 31, 0, 1, 0, "writeonly", Regs_Arm7.data);
    FIFO_B = DSReg(0x0A4, 31, 0, 1, 0, "writeonly", Regs_Arm7.data);
}

RegSect_dma7::RegSect_dma7()
{
    DMA0SAD = DSReg(0xB0, 31, 0, 1, 0, "readwrite", Regs_Arm7.data);
    DMA0DAD = DSReg(0xB4, 31, 0, 1, 0, "readwrite", Regs_Arm7.data);
    DMA0CNT_L = DSReg(0xB8, 15, 0, 1, 0, "readwrite", Regs_Arm7.data);
    DMA0CNT_H = DSReg(0xB8, 31, 16, 1, 0, "readwrite", Regs_Arm7.data);
    DMA0CNT_H_Dest_Addr_Control = DSReg(0xB8, 22, 21, 1, 0, "readwrite", Regs_Arm7.data);
    DMA0CNT_H_Source_Adr_Control = DSReg(0xB8, 24, 23, 1, 0, "readwrite", Regs_Arm7.data);
    DMA0CNT_H_DMA_Repeat = DSReg(0xB8, 25, 25, 1, 0, "readwrite", Regs_Arm7.data);
    DMA0CNT_H_DMA_Transfer_Type = DSReg(0xB8, 26, 26, 1, 0, "readwrite", Regs_Arm7.data);
    DMA0CNT_H_DMA_Start_Timing = DSReg(0xB8, 29, 28, 1, 0, "readwrite", Regs_Arm7.data);
    DMA0CNT_H_IRQ_on = DSReg(0xB8, 30, 30, 1, 0, "readwrite", Regs_Arm7.data);
    DMA0CNT_H_DMA_Enable = DSReg(0xB8, 31, 31, 1, 0, "readwrite", Regs_Arm7.data);
    DMA1SAD = DSReg(0xBC, 31, 0, 1, 0, "readwrite", Regs_Arm7.data);
    DMA1DAD = DSReg(0xC0, 31, 0, 1, 0, "readwrite", Regs_Arm7.data);
    DMA1CNT_L = DSReg(0xC4, 15, 0, 1, 0, "readwrite", Regs_Arm7.data);
    DMA1CNT_H = DSReg(0xC4, 31, 16, 1, 0, "readwrite", Regs_Arm7.data);
    DMA1CNT_H_Dest_Addr_Control = DSReg(0xC4, 22, 21, 1, 0, "readwrite", Regs_Arm7.data);
    DMA1CNT_H_Source_Adr_Control = DSReg(0xC4, 24, 23, 1, 0, "readwrite", Regs_Arm7.data);
    DMA1CNT_H_DMA_Repeat = DSReg(0xC4, 25, 25, 1, 0, "readwrite", Regs_Arm7.data);
    DMA1CNT_H_DMA_Transfer_Type = DSReg(0xC4, 26, 26, 1, 0, "readwrite", Regs_Arm7.data);
    DMA1CNT_H_DMA_Start_Timing = DSReg(0xC4, 29, 28, 1, 0, "readwrite", Regs_Arm7.data);
    DMA1CNT_H_IRQ_on = DSReg(0xC4, 30, 30, 1, 0, "readwrite", Regs_Arm7.data);
    DMA1CNT_H_DMA_Enable = DSReg(0xC4, 31, 31, 1, 0, "readwrite", Regs_Arm7.data);
    DMA2SAD = DSReg(0xC8, 31, 0, 1, 0, "readwrite", Regs_Arm7.data);
    DMA2DAD = DSReg(0xCC, 31, 0, 1, 0, "readwrite", Regs_Arm7.data);
    DMA2CNT_L = DSReg(0xD0, 15, 0, 1, 0, "readwrite", Regs_Arm7.data);
    DMA2CNT_H = DSReg(0xD0, 31, 16, 1, 0, "readwrite", Regs_Arm7.data);
    DMA2CNT_H_Dest_Addr_Control = DSReg(0xD0, 22, 21, 1, 0, "readwrite", Regs_Arm7.data);
    DMA2CNT_H_Source_Adr_Control = DSReg(0xD0, 24, 23, 1, 0, "readwrite", Regs_Arm7.data);
    DMA2CNT_H_DMA_Repeat = DSReg(0xD0, 25, 25, 1, 0, "readwrite", Regs_Arm7.data);
    DMA2CNT_H_DMA_Transfer_Type = DSReg(0xD0, 26, 26, 1, 0, "readwrite", Regs_Arm7.data);
    DMA2CNT_H_DMA_Start_Timing = DSReg(0xD0, 29, 28, 1, 0, "readwrite", Regs_Arm7.data);
    DMA2CNT_H_IRQ_on = DSReg(0xD0, 30, 30, 1, 0, "readwrite", Regs_Arm7.data);
    DMA2CNT_H_DMA_Enable = DSReg(0xD0, 31, 31, 1, 0, "readwrite", Regs_Arm7.data);
    DMA3SAD = DSReg(0xD4, 31, 0, 1, 0, "readwrite", Regs_Arm7.data);
    DMA3DAD = DSReg(0xD8, 31, 0, 1, 0, "readwrite", Regs_Arm7.data);
    DMA3CNT_L = DSReg(0xDC, 15, 0, 1, 0, "readwrite", Regs_Arm7.data);
    DMA3CNT_H = DSReg(0xDC, 31, 16, 1, 0, "readwrite", Regs_Arm7.data);
    DMA3CNT_H_Dest_Addr_Control = DSReg(0xDC, 22, 21, 1, 0, "readwrite", Regs_Arm7.data);
    DMA3CNT_H_Source_Adr_Control = DSReg(0xDC, 24, 23, 1, 0, "readwrite", Regs_Arm7.data);
    DMA3CNT_H_DMA_Repeat = DSReg(0xDC, 25, 25, 1, 0, "readwrite", Regs_Arm7.data);
    DMA3CNT_H_DMA_Transfer_Type = DSReg(0xDC, 26, 26, 1, 0, "readwrite", Regs_Arm7.data);
    DMA3CNT_H_Game_Pak_DRQ = DSReg(0xDC, 27, 27, 1, 0, "readwrite", Regs_Arm7.data);
    DMA3CNT_H_DMA_Start_Timing = DSReg(0xDC, 29, 28, 1, 0, "readwrite", Regs_Arm7.data);
    DMA3CNT_H_IRQ_on = DSReg(0xDC, 30, 30, 1, 0, "readwrite", Regs_Arm7.data);
    DMA3CNT_H_DMA_Enable = DSReg(0xDC, 31, 31, 1, 0, "readwrite", Regs_Arm7.data);
}

RegSect_timer7::RegSect_timer7()
{
    TM0CNT_L = DSReg(0x100, 15, 0, 1, 0, "readwrite", Regs_Arm7.data);
    TM0CNT_H = DSReg(0x100, 31, 16, 1, 0, "readwrite", Regs_Arm7.data);
    TM0CNT_H_Prescaler = DSReg(0x100, 17, 16, 1, 0, "readwrite", Regs_Arm7.data);
    TM0CNT_H_Count_up = DSReg(0x100, 18, 18, 1, 0, "readwrite", Regs_Arm7.data);
    TM0CNT_H_Timer_IRQ_Enable = DSReg(0x100, 22, 22, 1, 0, "readwrite", Regs_Arm7.data);
    TM0CNT_H_Timer_Start_Stop = DSReg(0x100, 23, 23, 1, 0, "readwrite", Regs_Arm7.data);
    TM1CNT_L = DSReg(0x104, 15, 0, 1, 0, "readwrite", Regs_Arm7.data);
    TM1CNT_H = DSReg(0x104, 31, 16, 1, 0, "readwrite", Regs_Arm7.data);
    TM1CNT_H_Prescaler = DSReg(0x104, 17, 16, 1, 0, "readwrite", Regs_Arm7.data);
    TM1CNT_H_Count_up = DSReg(0x104, 18, 18, 1, 0, "readwrite", Regs_Arm7.data);
    TM1CNT_H_Timer_IRQ_Enable = DSReg(0x104, 22, 22, 1, 0, "readwrite", Regs_Arm7.data);
    TM1CNT_H_Timer_Start_Stop = DSReg(0x104, 23, 23, 1, 0, "readwrite", Regs_Arm7.data);
    TM2CNT_L = DSReg(0x108, 15, 0, 1, 0, "readwrite", Regs_Arm7.data);
    TM2CNT_H = DSReg(0x108, 31, 16, 1, 0, "readwrite", Regs_Arm7.data);
    TM2CNT_H_Prescaler = DSReg(0x108, 17, 16, 1, 0, "readwrite", Regs_Arm7.data);
    TM2CNT_H_Count_up = DSReg(0x108, 18, 18, 1, 0, "readwrite", Regs_Arm7.data);
    TM2CNT_H_Timer_IRQ_Enable = DSReg(0x108, 22, 22, 1, 0, "readwrite", Regs_Arm7.data);
    TM2CNT_H_Timer_Start_Stop = DSReg(0x108, 23, 23, 1, 0, "readwrite", Regs_Arm7.data);
    TM3CNT_L = DSReg(0x10C, 15, 0, 1, 0, "readwrite", Regs_Arm7.data);
    TM3CNT_H = DSReg(0x10C, 31, 16, 1, 0, "readwrite", Regs_Arm7.data);
    TM3CNT_H_Prescaler = DSReg(0x10C, 17, 16, 1, 0, "readwrite", Regs_Arm7.data);
    TM3CNT_H_Count_up = DSReg(0x10C, 18, 18, 1, 0, "readwrite", Regs_Arm7.data);
    TM3CNT_H_Timer_IRQ_Enable = DSReg(0x10C, 22, 22, 1, 0, "readwrite", Regs_Arm7.data);
    TM3CNT_H_Timer_Start_Stop = DSReg(0x10C, 23, 23, 1, 0, "readwrite", Regs_Arm7.data);
}

RegSect_keypad7::RegSect_keypad7()
{
    KEYINPUT = DSReg(0x130, 15, 0, 1, 0, "readonly", Regs_Arm7.data);
    KEYCNT = DSReg(0x130, 31, 16, 1, 0, "readwrite", Regs_Arm7.data);
    EXTKEYIN = DSReg(0x134, 23, 16, 1, 0, "readonly", Regs_Arm7.data);
}

RegSect_system7::RegSect_system7()
{
    RTC_reg = DSReg(0x138, 15, 0, 1, 0, "writeonly", Regs_Arm7.data);
    RTC_reg_Data_IO = DSReg(0x138, 0, 0, 1, 0, "readwrite", Regs_Arm7.data);
    RTC_reg_Clock = DSReg(0x138, 1, 1, 1, 0, "readwrite", Regs_Arm7.data);
    RTC_reg_Select = DSReg(0x138, 2, 2, 1, 0, "readwrite", Regs_Arm7.data);
    RTC_reg_Unused_IO_Line3 = DSReg(0x138, 3, 3, 1, 0, "readwrite", Regs_Arm7.data);
    RTC_reg_Data_Direction = DSReg(0x138, 4, 4, 1, 0, "readwrite", Regs_Arm7.data);
    RTC_reg_Clock_Direction = DSReg(0x138, 5, 5, 1, 0, "readwrite", Regs_Arm7.data);
    RTC_reg_Select_Direction = DSReg(0x138, 6, 6, 1, 0, "readwrite", Regs_Arm7.data);
    RTC_reg_Direction_unused3 = DSReg(0x138, 7, 7, 1, 0, "readwrite", Regs_Arm7.data);
    RTC_reg_Unused_IO_Lines811 = DSReg(0x138, 11, 8, 1, 0, "readwrite", Regs_Arm7.data);
    RTC_reg_Direction_unused811 = DSReg(0x138, 15, 12, 1, 0, "readwrite", Regs_Arm7.data);
    IPCSYNC = DSReg(0x180, 15, 0, 1, 0, "writeonly", Regs_Arm7.data);
    IPCSYNC_Data_from_IPCSYNC = DSReg(0x180, 3, 0, 1, 0, "readonly", Regs_Arm7.data);
    IPCSYNC_Data_to_IPCSYNC = DSReg(0x180, 11, 8, 1, 0, "readwrite", Regs_Arm7.data);
    IPCSYNC_IRQ = DSReg(0x180, 13, 13, 1, 0, "readonly", Regs_Arm7.data);
    IPCSYNC_Ena_IRQ_from_remote_CPU = DSReg(0x180, 14, 14, 1, 0, "readwrite", Regs_Arm7.data);
    IPCFIFOCNT = DSReg(0x184, 15, 0, 1, 0, "writeonly", Regs_Arm7.data);
    IPCFIFOCNT_Send_Fifo_Empty_Status = DSReg(0x184, 0, 0, 1, 0, "readonly", Regs_Arm7.data);
    IPCFIFOCNT_Send_Fifo_Full_Status = DSReg(0x184, 1, 1, 1, 0, "readonly", Regs_Arm7.data);
    IPCFIFOCNT_Send_Fifo_Empty_IRQ = DSReg(0x184, 2, 2, 1, 0, "readwrite", Regs_Arm7.data);
    IPCFIFOCNT_Send_Fifo_Clear = DSReg(0x184, 3, 3, 1, 0, "writeonly", Regs_Arm7.data);
    IPCFIFOCNT_Receive_Fifo_Empty = DSReg(0x184, 8, 8, 1, 0, "readonly", Regs_Arm7.data);
    IPCFIFOCNT_Receive_Fifo_Full = DSReg(0x184, 9, 9, 1, 0, "readonly", Regs_Arm7.data);
    IPCFIFOCNT_Receive_Fifo_Not_Empty_IRQ = DSReg(0x184, 10, 10, 1, 0, "readwrite", Regs_Arm7.data);
    IPCFIFOCNT_Error_Read_Empty_Send_Full = DSReg(0x184, 14, 14, 1, 0, "readwrite", Regs_Arm7.data);
    IPCFIFOCNT_Enable_Send_Receive_Fifo = DSReg(0x184, 15, 15, 1, 0, "readwrite", Regs_Arm7.data);
    IPCFIFOSEND = DSReg(0x188, 31, 0, 1, 0, "writeonly", Regs_Arm7.data);
    IPCFIFORECV = DSReg(0xFFF, 31, 0, 1, 0, "readonly", Regs_Arm7.data);
    AUXSPICNT = DSReg(0x1A0, 23, 0, 1, 0, "writeonly", Regs_Arm7.data);
    AUXSPICNT_SPI_Baudrate = DSReg(0x1A0, 1, 0, 1, 0, "readwrite", Regs_Arm7.data);
    AUXSPICNT_SPI_Hold_Chipselect = DSReg(0x1A0, 6, 6, 1, 0, "readwrite", Regs_Arm7.data);
    AUXSPICNT_SPI_Busy = DSReg(0x1A0, 7, 7, 1, 0, "readonly", Regs_Arm7.data);
    AUXSPICNT_NDS_Slot_Mode = DSReg(0x1A0, 13, 13, 1, 0, "readwrite", Regs_Arm7.data);
    AUXSPICNT_Transfer_Ready_IRQ = DSReg(0x1A0, 14, 14, 1, 0, "readwrite", Regs_Arm7.data);
    AUXSPICNT_NDS_Slot_Enable = DSReg(0x1A0, 15, 15, 1, 0, "readwrite", Regs_Arm7.data);
    AUXSPIDATA = DSReg(0x1A0, 23, 16, 1, 0, "readwrite", Regs_Arm7.data);
    ROMCTRL = DSReg(0x1A4, 31, 0, 1, 0, "writeonly", Regs_Arm7.data);
    ROMCTRL_KEY1_gap1_length = DSReg(0x1A4, 12, 0, 1, 0, "readwrite", Regs_Arm7.data);
    ROMCTRL_KEY2_encrypt_data = DSReg(0x1A4, 13, 13, 1, 0, "readwrite", Regs_Arm7.data);
    ROMCTRL_SE = DSReg(0x1A4, 14, 14, 1, 0, "readwrite", Regs_Arm7.data);
    ROMCTRL_KEY2_Apply_Seed = DSReg(0x1A4, 15, 15, 1, 0, "readwrite", Regs_Arm7.data);
    ROMCTRL_KEY1_gap2_length = DSReg(0x1A4, 21, 16, 1, 0, "readwrite", Regs_Arm7.data);
    ROMCTRL_KEY2_encrypt_cmd = DSReg(0x1A4, 22, 22, 1, 0, "readwrite", Regs_Arm7.data);
    ROMCTRL_Data_Word_Status = DSReg(0x1A4, 23, 23, 1, 0, "readwrite", Regs_Arm7.data);
    ROMCTRL_Data_Block_size = DSReg(0x1A4, 26, 24, 1, 0, "readwrite", Regs_Arm7.data);
    ROMCTRL_Transfer_CLK_rate = DSReg(0x1A4, 27, 27, 1, 0, "readwrite", Regs_Arm7.data);
    ROMCTRL_KEY1_Gap_CLKs = DSReg(0x1A4, 28, 28, 1, 0, "readwrite", Regs_Arm7.data);
    ROMCTRL_RESB_Release_Reset = DSReg(0x1A4, 29, 29, 1, 0, "readwrite", Regs_Arm7.data);
    ROMCTRL_WR = DSReg(0x1A4, 30, 30, 1, 0, "readwrite", Regs_Arm7.data);
    ROMCTRL_Block_Start_Status = DSReg(0x1A4, 21, 21, 1, 0, "readwrite", Regs_Arm7.data);
    Gamecard_bus_Command_1 = DSReg(0x1A8, 31, 0, 1, 0, "writeonly", Regs_Arm7.data);
    Gamecard_bus_Command_2 = DSReg(0x1AC, 31, 0, 1, 0, "writeonly", Regs_Arm7.data);
    Gamecard_bus_DataIn = DSReg(0xFFF, 31, 0, 1, 0, "readonly", Regs_Arm7.data);
    Encryption_Seed_0_Lower = DSReg(0x1B0, 31, 0, 1, 0, "writeonly", Regs_Arm7.data);
    Encryption_Seed_1_Lower = DSReg(0x1B4, 31, 0, 1, 0, "writeonly", Regs_Arm7.data);
    Encryption_Seed_0_Upper = DSReg(0x1B8, 6, 0, 1, 0, "writeonly", Regs_Arm7.data);
    Encryption_Seed_1_Upper = DSReg(0x1B8, 22, 16, 1, 0, "writeonly", Regs_Arm7.data);
    SPICNT = DSReg(0x1C0, 23, 0, 1, 0, "writeonly", Regs_Arm7.data);
    SPICNT_Baudrate = DSReg(0x1C0, 1, 0, 1, 0, "readwrite", Regs_Arm7.data);
    SPICNT_Busy_Flag = DSReg(0x1C0, 7, 7, 1, 0, "readonly", Regs_Arm7.data);
    SPICNT_Device_Select = DSReg(0x1C0, 9, 8, 1, 0, "readwrite", Regs_Arm7.data);
    SPICNT_Transfer_Size = DSReg(0x1C0, 10, 10, 1, 0, "readwrite", Regs_Arm7.data);
    SPICNT_Chipselect_Hold = DSReg(0x1C0, 11, 11, 1, 0, "readwrite", Regs_Arm7.data);
    SPICNT_Interrupt_Request = DSReg(0x1C0, 14, 14, 1, 0, "readwrite", Regs_Arm7.data);
    SPICNT_SPI_Bus_Enable = DSReg(0x1C0, 15, 15, 1, 0, "readwrite", Regs_Arm7.data);
    SPIDATA = DSReg(0x1C0, 23, 16, 1, 0, "readwrite", Regs_Arm7.data);
    EXMEMSTAT = DSReg(0x204, 29, 0, 1, 0, "readwrite", Regs_Arm7.data);
    EXMEMSTAT_GBASlot_SRAM_Access_Time = DSReg(0x204, 1, 0, 1, 0, "readwrite", Regs_Arm7.data);
    EXMEMSTAT_GBASlot_ROM_1st_Access_Time = DSReg(0x204, 3, 2, 1, 0, "readwrite", Regs_Arm7.data);
    EXMEMSTAT_GBASlot_ROM_2nd_Access_Time = DSReg(0x204, 4, 4, 1, 0, "readwrite", Regs_Arm7.data);
    EXMEMSTAT_GBASlot_PHI_pin_out = DSReg(0x204, 6, 5, 1, 0, "readwrite", Regs_Arm7.data);
    EXMEMSTAT_GBASlot_Access_Rights = DSReg(0x204, 7, 7, 1, 0, "readonly", Regs_Arm7.data);
    EXMEMSTAT_NDSSlot_Access_Rights = DSReg(0x204, 11, 11, 1, 0, "readonly", Regs_Arm7.data);
    EXMEMSTAT_SET = DSReg(0x204, 13, 13, 1, 0, "readonly", Regs_Arm7.data);
    EXMEMSTAT_MainMem_Interface_Mode = DSReg(0x204, 14, 14, 1, 0, "readonly", Regs_Arm7.data);
    EXMEMSTAT_MainMem_Access_Priority = DSReg(0x204, 15, 15, 1, 0, "readonly", Regs_Arm7.data);
    WIFIWAITCNT = DSReg(0x204, 29, 24, 1, 0, "readwrite", Regs_Arm7.data);
    WIFIWAITCNT_WS0 = DSReg(0x204, 26, 24, 1, 0, "readwrite", Regs_Arm7.data);
    WIFIWAITCNT_WS1 = DSReg(0x204, 29, 27, 1, 0, "readwrite", Regs_Arm7.data);
    IME = DSReg(0x208, 31, 0, 1, 0, "readwrite", Regs_Arm7.data);
    IE = DSReg(0x210, 31, 0, 1, 0, "writeonly", Regs_Arm7.data);
    IE_LCD_V_Blank = DSReg(0x210, 0, 0, 1, 0, "readwrite", Regs_Arm7.data);
    IE_LCD_H_Blank = DSReg(0x210, 1, 1, 1, 0, "readwrite", Regs_Arm7.data);
    IE_LCD_V_Counter_Match = DSReg(0x210, 2, 2, 1, 0, "readwrite", Regs_Arm7.data);
    IE_Timer_0 = DSReg(0x210, 3, 3, 1, 0, "readwrite", Regs_Arm7.data);
    IE_Timer_1 = DSReg(0x210, 4, 4, 1, 0, "readwrite", Regs_Arm7.data);
    IE_Timer_2 = DSReg(0x210, 5, 5, 1, 0, "readwrite", Regs_Arm7.data);
    IE_Timer_3 = DSReg(0x210, 6, 6, 1, 0, "readwrite", Regs_Arm7.data);
    IE_SIO_RCNT_RTC = DSReg(0x210, 7, 7, 1, 0, "readwrite", Regs_Arm7.data);
    IE_DMA_0 = DSReg(0x210, 8, 8, 1, 0, "readwrite", Regs_Arm7.data);
    IE_DMA_1 = DSReg(0x210, 9, 9, 1, 0, "readwrite", Regs_Arm7.data);
    IE_DMA_2 = DSReg(0x210, 10, 10, 1, 0, "readwrite", Regs_Arm7.data);
    IE_DMA_3 = DSReg(0x210, 11, 11, 1, 0, "readwrite", Regs_Arm7.data);
    IE_Keypad = DSReg(0x210, 12, 12, 1, 0, "readwrite", Regs_Arm7.data);
    IE_GBA_Slot_external_IRQ = DSReg(0x210, 13, 13, 1, 0, "readwrite", Regs_Arm7.data);
    IE_IPC_Sync = DSReg(0x210, 16, 16, 1, 0, "readwrite", Regs_Arm7.data);
    IE_IPC_Send_FIFO_Empty = DSReg(0x210, 17, 17, 1, 0, "readwrite", Regs_Arm7.data);
    IE_IPC_Recv_FIFO_Not_Empty = DSReg(0x210, 18, 18, 1, 0, "readwrite", Regs_Arm7.data);
    IE_NDS_Slot_Transfer_Complete = DSReg(0x210, 19, 19, 1, 0, "readwrite", Regs_Arm7.data);
    IE_NDS_Slot_IREQ_MC = DSReg(0x210, 20, 20, 1, 0, "readwrite", Regs_Arm7.data);
    IE_Screens_unfolding = DSReg(0x210, 22, 22, 1, 0, "readwrite", Regs_Arm7.data);
    IE_SPI_bus = DSReg(0x210, 23, 23, 1, 0, "readwrite", Regs_Arm7.data);
    IE_Wifi = DSReg(0x210, 24, 24, 1, 0, "readwrite", Regs_Arm7.data);
    IE_unused = DSReg(0x210, 31, 25, 1, 0, "readwrite", Regs_Arm7.data);
    IF = DSReg(0x214, 24, 0, 1, 0, "writeonly", Regs_Arm7.data);
    IF_LCD_V_Blank = DSReg(0x214, 0, 0, 1, 0, "readwrite", Regs_Arm7.data);
    IF_LCD_H_Blank = DSReg(0x214, 1, 1, 1, 0, "readwrite", Regs_Arm7.data);
    IF_LCD_V_Counter_Match = DSReg(0x214, 2, 2, 1, 0, "readwrite", Regs_Arm7.data);
    IF_Timer_0 = DSReg(0x214, 3, 3, 1, 0, "readwrite", Regs_Arm7.data);
    IF_Timer_1 = DSReg(0x214, 4, 4, 1, 0, "readwrite", Regs_Arm7.data);
    IF_Timer_2 = DSReg(0x214, 5, 5, 1, 0, "readwrite", Regs_Arm7.data);
    IF_Timer_3 = DSReg(0x214, 6, 6, 1, 0, "readwrite", Regs_Arm7.data);
    IF_SIO_RCNT_RTC = DSReg(0x214, 7, 7, 1, 0, "readwrite", Regs_Arm7.data);
    IF_DMA_0 = DSReg(0x214, 8, 8, 1, 0, "readwrite", Regs_Arm7.data);
    IF_DMA_1 = DSReg(0x214, 9, 9, 1, 0, "readwrite", Regs_Arm7.data);
    IF_DMA_2 = DSReg(0x214, 10, 10, 1, 0, "readwrite", Regs_Arm7.data);
    IF_DMA_3 = DSReg(0x214, 11, 11, 1, 0, "readwrite", Regs_Arm7.data);
    IF_Keypad = DSReg(0x214, 12, 12, 1, 0, "readwrite", Regs_Arm7.data);
    IF_GBA_Slot_external_IRQ = DSReg(0x214, 13, 13, 1, 0, "readwrite", Regs_Arm7.data);
    IF_IPC_Sync = DSReg(0x214, 16, 16, 1, 0, "readwrite", Regs_Arm7.data);
    IF_IPC_Send_FIFO_Empty = DSReg(0x214, 17, 17, 1, 0, "readwrite", Regs_Arm7.data);
    IF_IPC_Recv_FIFO_Not_Empty = DSReg(0x214, 18, 18, 1, 0, "readwrite", Regs_Arm7.data);
    IF_NDS_Slot_Transfer_Complete = DSReg(0x214, 19, 19, 1, 0, "readwrite", Regs_Arm7.data);
    IF_NDS_Slot_IREQ_MC = DSReg(0x214, 20, 20, 1, 0, "readwrite", Regs_Arm7.data);
    IF_Screens_unfolding = DSReg(0x214, 22, 22, 1, 0, "writeonly", Regs_Arm7.data);
    IF_SPI_bus = DSReg(0x214, 23, 23, 1, 0, "writeonly", Regs_Arm7.data);
    IF_Wifi = DSReg(0x214, 24, 24, 1, 0, "writeonly", Regs_Arm7.data);
    RAMSTAT = DSReg(0x240, 9, 0, 1, 0, "readonly", Regs_Arm7.data);
    RAMSTAT_VRAMSTAT_C = DSReg(0x240, 0, 0, 1, 0, "readonly", Regs_Arm7.data);
    RAMSTAT_VRAMSTAT_D = DSReg(0x240, 1, 1, 1, 0, "readonly", Regs_Arm7.data);
    MemControl2_WRAM = DSReg(0x240, 9, 8, 1, 0, "readonly", Regs_Arm7.data);
    POSTFLG = DSReg(0x300, 15, 0, 1, 0, "writeonly", Regs_Arm7.data);
    POSTFLG_Flag = DSReg(0x300, 0, 0, 1, 1, "readonly", Regs_Arm7.data);
    POSTFLG_Power_Down_Mode = DSReg(0x300, 15, 14, 1, 0, "readwrite", Regs_Arm7.data);
    POWCNT2 = DSReg(0x304, 1, 0, 1, 0, "writeonly", Regs_Arm7.data);
    POWCNT2_Sound = DSReg(0x304, 0, 0, 1, 1, "readwrite", Regs_Arm7.data);
    POWCNT2_Wifi = DSReg(0x304, 1, 1, 1, 0, "readwrite", Regs_Arm7.data);
    BIOSPROT = DSReg(0x308, 15, 0, 1, 0x1205, "readonly", Regs_Arm7.data);
}

void REGS_Arm7::reset()
{
      // DISPSTAT at 0x004 = 0x0004;
      data[4] = 4 & 0xFF;
      // BG2RotScaleParDX at 0x020 = 256;
      data[32] = 256 & 0xFF;
      data[33] = (256 >> 8) & 0xFF;
      // BG2RotScaleParDMY at 0x024 = 256;
      data[36] = 16777216 & 0xFF;
      data[37] = (16777216 >> 8) & 0xFF;
      data[38] = (16777216 >> 16) & 0xFF;
      data[39] = (16777216 >> 24) & 0xFF;
      // BG3RotScaleParDX at 0x030 = 256;
      data[48] = 256 & 0xFF;
      data[49] = (256 >> 8) & 0xFF;
      // BG3RotScaleParDMY at 0x034 = 256;
      data[52] = 16777216 & 0xFF;
      data[53] = (16777216 >> 8) & 0xFF;
      data[54] = (16777216 >> 16) & 0xFF;
      data[55] = (16777216 >> 24) & 0xFF;
      // SOUNDBIAS at 0x088 = 0x0200;
      data[136] = 512 & 0xFF;
      data[137] = (512 >> 8) & 0xFF;
      // POSTFLG_Flag at 0x300 = 1;
      data[768] = 1 & 0xFF;
      // POWCNT2_Sound at 0x304 = 1;
      data[772] = 1 & 0xFF;
      // BIOSPROT at 0x308 = 0x1205;
      data[776] = 4613 & 0xFF;
      data[777] = (4613 >> 8) & 0xFF;

    // DISPCNT at 0x000 = 0xFFFFFFFF;
    rwmask[0] = (byte)(0xFFFFFFFF & 0xFF);
    rwmask[1] = (byte)((0xFFFFFFFF >> 8) & 0xFF);
    rwmask[2] = (byte)((0xFFFFFFFF >> 16) & 0xFF);
    rwmask[3] = (byte)((0xFFFFFFFF >> 24) & 0xFF);
    // DISPSTAT at 0x004 = 0xFFFFFFFF;
    rwmask[4] = (byte)(0xFFFFFFFF & 0xFF);
    rwmask[5] = (byte)((0xFFFFFFFF >> 8) & 0xFF);
    rwmask[6] = (byte)((0xFFFFFFFF >> 16) & 0xFF);
    rwmask[7] = (byte)((0xFFFFFFFF >> 24) & 0xFF);
    // BG0CNT at 0x008 = 0xDFFF;
    rwmask[8] = (byte)(0xDFFF & 0xFF);
    rwmask[9] = (byte)((0xDFFF >> 8) & 0xFF);
    rwmask[10] = (byte)((0xDFFF >> 16) & 0xFF);
    rwmask[11] = (byte)((0xDFFF >> 24) & 0xFF);
    // BG1CNT at 0x00A = 0xDFFF;
    rwmask[10] = (byte)(0xDFFF & 0xFF);
    rwmask[11] = (byte)((0xDFFF >> 8) & 0xFF);
    rwmask[12] = (byte)((0xDFFF >> 16) & 0xFF);
    rwmask[13] = (byte)((0xDFFF >> 24) & 0xFF);
    // BG2CNT at 0x00C = 0xFFFF;
    rwmask[12] = (byte)(0xFFFF & 0xFF);
    rwmask[13] = (byte)((0xFFFF >> 8) & 0xFF);
    rwmask[14] = (byte)((0xFFFF >> 16) & 0xFF);
    rwmask[15] = (byte)((0xFFFF >> 24) & 0xFF);
    // BG3CNT at 0x00E = 0xFFFF;
    rwmask[14] = (byte)(0xFFFF & 0xFF);
    rwmask[15] = (byte)((0xFFFF >> 8) & 0xFF);
    rwmask[16] = (byte)((0xFFFF >> 16) & 0xFF);
    rwmask[17] = (byte)((0xFFFF >> 24) & 0xFF);
    // BG0HOFS at 0x010 = 0x0;
    rwmask[16] = (byte)(0x0 & 0xFF);
    rwmask[17] = (byte)((0x0 >> 8) & 0xFF);
    rwmask[18] = (byte)((0x0 >> 16) & 0xFF);
    rwmask[19] = (byte)((0x0 >> 24) & 0xFF);
    // BG0VOFS at 0x012 = 0x0;
    rwmask[18] = (byte)(0x0 & 0xFF);
    rwmask[19] = (byte)((0x0 >> 8) & 0xFF);
    rwmask[20] = (byte)((0x0 >> 16) & 0xFF);
    rwmask[21] = (byte)((0x0 >> 24) & 0xFF);
    // BG1HOFS at 0x014 = 0x0;
    rwmask[20] = (byte)(0x0 & 0xFF);
    rwmask[21] = (byte)((0x0 >> 8) & 0xFF);
    rwmask[22] = (byte)((0x0 >> 16) & 0xFF);
    rwmask[23] = (byte)((0x0 >> 24) & 0xFF);
    // BG1VOFS at 0x016 = 0x0;
    rwmask[22] = (byte)(0x0 & 0xFF);
    rwmask[23] = (byte)((0x0 >> 8) & 0xFF);
    rwmask[24] = (byte)((0x0 >> 16) & 0xFF);
    rwmask[25] = (byte)((0x0 >> 24) & 0xFF);
    // BG2HOFS at 0x018 = 0x0;
    rwmask[24] = (byte)(0x0 & 0xFF);
    rwmask[25] = (byte)((0x0 >> 8) & 0xFF);
    rwmask[26] = (byte)((0x0 >> 16) & 0xFF);
    rwmask[27] = (byte)((0x0 >> 24) & 0xFF);
    // BG2VOFS at 0x01A = 0x0;
    rwmask[26] = (byte)(0x0 & 0xFF);
    rwmask[27] = (byte)((0x0 >> 8) & 0xFF);
    rwmask[28] = (byte)((0x0 >> 16) & 0xFF);
    rwmask[29] = (byte)((0x0 >> 24) & 0xFF);
    // BG3HOFS at 0x01C = 0x0;
    rwmask[28] = (byte)(0x0 & 0xFF);
    rwmask[29] = (byte)((0x0 >> 8) & 0xFF);
    rwmask[30] = (byte)((0x0 >> 16) & 0xFF);
    rwmask[31] = (byte)((0x0 >> 24) & 0xFF);
    // BG3VOFS at 0x01E = 0x0;
    rwmask[30] = (byte)(0x0 & 0xFF);
    rwmask[31] = (byte)((0x0 >> 8) & 0xFF);
    rwmask[32] = (byte)((0x0 >> 16) & 0xFF);
    rwmask[33] = (byte)((0x0 >> 24) & 0xFF);
    // BG2RotScaleParDX at 0x020 = 0x0;
    rwmask[32] = (byte)(0x0 & 0xFF);
    rwmask[33] = (byte)((0x0 >> 8) & 0xFF);
    rwmask[34] = (byte)((0x0 >> 16) & 0xFF);
    rwmask[35] = (byte)((0x0 >> 24) & 0xFF);
    // BG2RotScaleParDY at 0x024 = 0x0;
    rwmask[36] = (byte)(0x0 & 0xFF);
    rwmask[37] = (byte)((0x0 >> 8) & 0xFF);
    rwmask[38] = (byte)((0x0 >> 16) & 0xFF);
    rwmask[39] = (byte)((0x0 >> 24) & 0xFF);
    // BG2RefX at 0x028 = 0x0;
    rwmask[40] = (byte)(0x0 & 0xFF);
    rwmask[41] = (byte)((0x0 >> 8) & 0xFF);
    rwmask[42] = (byte)((0x0 >> 16) & 0xFF);
    rwmask[43] = (byte)((0x0 >> 24) & 0xFF);
    // BG2RefY at 0x02C = 0x0;
    rwmask[44] = (byte)(0x0 & 0xFF);
    rwmask[45] = (byte)((0x0 >> 8) & 0xFF);
    rwmask[46] = (byte)((0x0 >> 16) & 0xFF);
    rwmask[47] = (byte)((0x0 >> 24) & 0xFF);
    // BG3RotScaleParDX at 0x030 = 0x0;
    rwmask[48] = (byte)(0x0 & 0xFF);
    rwmask[49] = (byte)((0x0 >> 8) & 0xFF);
    rwmask[50] = (byte)((0x0 >> 16) & 0xFF);
    rwmask[51] = (byte)((0x0 >> 24) & 0xFF);
    // BG3RotScaleParDY at 0x034 = 0x0;
    rwmask[52] = (byte)(0x0 & 0xFF);
    rwmask[53] = (byte)((0x0 >> 8) & 0xFF);
    rwmask[54] = (byte)((0x0 >> 16) & 0xFF);
    rwmask[55] = (byte)((0x0 >> 24) & 0xFF);
    // BG3RefX at 0x038 = 0x0;
    rwmask[56] = (byte)(0x0 & 0xFF);
    rwmask[57] = (byte)((0x0 >> 8) & 0xFF);
    rwmask[58] = (byte)((0x0 >> 16) & 0xFF);
    rwmask[59] = (byte)((0x0 >> 24) & 0xFF);
    // BG3RefY at 0x03C = 0x0;
    rwmask[60] = (byte)(0x0 & 0xFF);
    rwmask[61] = (byte)((0x0 >> 8) & 0xFF);
    rwmask[62] = (byte)((0x0 >> 16) & 0xFF);
    rwmask[63] = (byte)((0x0 >> 24) & 0xFF);
    // WIN0H at 0x040 = 0x0;
    rwmask[64] = (byte)(0x0 & 0xFF);
    rwmask[65] = (byte)((0x0 >> 8) & 0xFF);
    rwmask[66] = (byte)((0x0 >> 16) & 0xFF);
    rwmask[67] = (byte)((0x0 >> 24) & 0xFF);
    // WIN0V at 0x044 = 0x0;
    rwmask[68] = (byte)(0x0 & 0xFF);
    rwmask[69] = (byte)((0x0 >> 8) & 0xFF);
    rwmask[70] = (byte)((0x0 >> 16) & 0xFF);
    rwmask[71] = (byte)((0x0 >> 24) & 0xFF);
    // WININ at 0x048 = 0x3F3F3F3F;
    rwmask[72] = (byte)(0x3F3F3F3F & 0xFF);
    rwmask[73] = (byte)((0x3F3F3F3F >> 8) & 0xFF);
    rwmask[74] = (byte)((0x3F3F3F3F >> 16) & 0xFF);
    rwmask[75] = (byte)((0x3F3F3F3F >> 24) & 0xFF);
    // MOSAIC at 0x04C = 0x0;
    rwmask[76] = (byte)(0x0 & 0xFF);
    rwmask[77] = (byte)((0x0 >> 8) & 0xFF);
    rwmask[78] = (byte)((0x0 >> 16) & 0xFF);
    rwmask[79] = (byte)((0x0 >> 24) & 0xFF);
    // BLDCNT at 0x050 = 0x1F1F3FFF;
    rwmask[80] = (byte)(0x1F1F3FFF & 0xFF);
    rwmask[81] = (byte)((0x1F1F3FFF >> 8) & 0xFF);
    rwmask[82] = (byte)((0x1F1F3FFF >> 16) & 0xFF);
    rwmask[83] = (byte)((0x1F1F3FFF >> 24) & 0xFF);
    // BLDY at 0x054 = 0x0;
    rwmask[84] = (byte)(0x0 & 0xFF);
    rwmask[85] = (byte)((0x0 >> 8) & 0xFF);
    rwmask[86] = (byte)((0x0 >> 16) & 0xFF);
    rwmask[87] = (byte)((0x0 >> 24) & 0xFF);
    // SOUND1CNT_L at 0x060 = 0xFFC0007F;
    rwmask[96] = (byte)(0xFFC0007F & 0xFF);
    rwmask[97] = (byte)((0xFFC0007F >> 8) & 0xFF);
    rwmask[98] = (byte)((0xFFC0007F >> 16) & 0xFF);
    rwmask[99] = (byte)((0xFFC0007F >> 24) & 0xFF);
    // SOUND1CNT_X at 0x064 = 0xFFFF4000;
    rwmask[100] = (byte)(0xFFFF4000 & 0xFF);
    rwmask[101] = (byte)((0xFFFF4000 >> 8) & 0xFF);
    rwmask[102] = (byte)((0xFFFF4000 >> 16) & 0xFF);
    rwmask[103] = (byte)((0xFFFF4000 >> 24) & 0xFF);
    // SOUND2CNT_L at 0x068 = 0xFFC0;
    rwmask[104] = (byte)(0xFFC0 & 0xFF);
    rwmask[105] = (byte)((0xFFC0 >> 8) & 0xFF);
    rwmask[106] = (byte)((0xFFC0 >> 16) & 0xFF);
    rwmask[107] = (byte)((0xFFC0 >> 24) & 0xFF);
    // SOUND2CNT_H at 0x06C = 0xFFFF4000;
    rwmask[108] = (byte)(0xFFFF4000 & 0xFF);
    rwmask[109] = (byte)((0xFFFF4000 >> 8) & 0xFF);
    rwmask[110] = (byte)((0xFFFF4000 >> 16) & 0xFF);
    rwmask[111] = (byte)((0xFFFF4000 >> 24) & 0xFF);
    // SOUND3CNT_L at 0x070 = 0xE00000E0;
    rwmask[112] = (byte)(0xE00000E0 & 0xFF);
    rwmask[113] = (byte)((0xE00000E0 >> 8) & 0xFF);
    rwmask[114] = (byte)((0xE00000E0 >> 16) & 0xFF);
    rwmask[115] = (byte)((0xE00000E0 >> 24) & 0xFF);
    // SOUND3CNT_X at 0x074 = 0xFFFF4000;
    rwmask[116] = (byte)(0xFFFF4000 & 0xFF);
    rwmask[117] = (byte)((0xFFFF4000 >> 8) & 0xFF);
    rwmask[118] = (byte)((0xFFFF4000 >> 16) & 0xFF);
    rwmask[119] = (byte)((0xFFFF4000 >> 24) & 0xFF);
    // SOUND4CNT_L at 0x078 = 0xFFFFFF00;
    rwmask[120] = (byte)(0xFFFFFF00 & 0xFF);
    rwmask[121] = (byte)((0xFFFFFF00 >> 8) & 0xFF);
    rwmask[122] = (byte)((0xFFFFFF00 >> 16) & 0xFF);
    rwmask[123] = (byte)((0xFFFFFF00 >> 24) & 0xFF);
    // SOUND4CNT_H at 0x07C = 0xFFFF40FF;
    rwmask[124] = (byte)(0xFFFF40FF & 0xFF);
    rwmask[125] = (byte)((0xFFFF40FF >> 8) & 0xFF);
    rwmask[126] = (byte)((0xFFFF40FF >> 16) & 0xFF);
    rwmask[127] = (byte)((0xFFFF40FF >> 24) & 0xFF);
    // SOUNDCNT_L at 0x080 = 0xFFFFFF77;
    rwmask[128] = (byte)(0xFFFFFF77 & 0xFF);
    rwmask[129] = (byte)((0xFFFFFF77 >> 8) & 0xFF);
    rwmask[130] = (byte)((0xFFFFFF77 >> 16) & 0xFF);
    rwmask[131] = (byte)((0xFFFFFF77 >> 24) & 0xFF);
    // SOUNDCNT_X at 0x084 = 0xFFFF00FF;
    rwmask[132] = (byte)(0xFFFF00FF & 0xFF);
    rwmask[133] = (byte)((0xFFFF00FF >> 8) & 0xFF);
    rwmask[134] = (byte)((0xFFFF00FF >> 16) & 0xFF);
    rwmask[135] = (byte)((0xFFFF00FF >> 24) & 0xFF);
    // SOUNDBIAS at 0x088 = 0xFFFFFFFF;
    rwmask[136] = (byte)(0xFFFFFFFF & 0xFF);
    rwmask[137] = (byte)((0xFFFFFFFF >> 8) & 0xFF);
    rwmask[138] = (byte)((0xFFFFFFFF >> 16) & 0xFF);
    rwmask[139] = (byte)((0xFFFFFFFF >> 24) & 0xFF);
    // WAVE_RAM at 0x090 = 0xFFFFFFFF;
    rwmask[144] = (byte)(0xFFFFFFFF & 0xFF);
    rwmask[145] = (byte)((0xFFFFFFFF >> 8) & 0xFF);
    rwmask[146] = (byte)((0xFFFFFFFF >> 16) & 0xFF);
    rwmask[147] = (byte)((0xFFFFFFFF >> 24) & 0xFF);
    // WAVE_RAM2 at 0x094 = 0xFFFFFFFF;
    rwmask[148] = (byte)(0xFFFFFFFF & 0xFF);
    rwmask[149] = (byte)((0xFFFFFFFF >> 8) & 0xFF);
    rwmask[150] = (byte)((0xFFFFFFFF >> 16) & 0xFF);
    rwmask[151] = (byte)((0xFFFFFFFF >> 24) & 0xFF);
    // WAVE_RAM3 at 0x098 = 0xFFFFFFFF;
    rwmask[152] = (byte)(0xFFFFFFFF & 0xFF);
    rwmask[153] = (byte)((0xFFFFFFFF >> 8) & 0xFF);
    rwmask[154] = (byte)((0xFFFFFFFF >> 16) & 0xFF);
    rwmask[155] = (byte)((0xFFFFFFFF >> 24) & 0xFF);
    // WAVE_RAM4 at 0x09C = 0xFFFFFFFF;
    rwmask[156] = (byte)(0xFFFFFFFF & 0xFF);
    rwmask[157] = (byte)((0xFFFFFFFF >> 8) & 0xFF);
    rwmask[158] = (byte)((0xFFFFFFFF >> 16) & 0xFF);
    rwmask[159] = (byte)((0xFFFFFFFF >> 24) & 0xFF);
    // FIFO_A at 0x0A0 = 0x0;
    rwmask[160] = (byte)(0x0 & 0xFF);
    rwmask[161] = (byte)((0x0 >> 8) & 0xFF);
    rwmask[162] = (byte)((0x0 >> 16) & 0xFF);
    rwmask[163] = (byte)((0x0 >> 24) & 0xFF);
    // FIFO_B at 0x0A4 = 0x0;
    rwmask[164] = (byte)(0x0 & 0xFF);
    rwmask[165] = (byte)((0x0 >> 8) & 0xFF);
    rwmask[166] = (byte)((0x0 >> 16) & 0xFF);
    rwmask[167] = (byte)((0x0 >> 24) & 0xFF);
    // DMA0SAD at 0xB0 = 0xFFFFFFFF;
    rwmask[176] = (byte)(0xFFFFFFFF & 0xFF);
    rwmask[177] = (byte)((0xFFFFFFFF >> 8) & 0xFF);
    rwmask[178] = (byte)((0xFFFFFFFF >> 16) & 0xFF);
    rwmask[179] = (byte)((0xFFFFFFFF >> 24) & 0xFF);
    // DMA0DAD at 0xB4 = 0xFFFFFFFF;
    rwmask[180] = (byte)(0xFFFFFFFF & 0xFF);
    rwmask[181] = (byte)((0xFFFFFFFF >> 8) & 0xFF);
    rwmask[182] = (byte)((0xFFFFFFFF >> 16) & 0xFF);
    rwmask[183] = (byte)((0xFFFFFFFF >> 24) & 0xFF);
    // DMA0CNT_L at 0xB8 = 0xFFFFFFFF;
    rwmask[184] = (byte)(0xFFFFFFFF & 0xFF);
    rwmask[185] = (byte)((0xFFFFFFFF >> 8) & 0xFF);
    rwmask[186] = (byte)((0xFFFFFFFF >> 16) & 0xFF);
    rwmask[187] = (byte)((0xFFFFFFFF >> 24) & 0xFF);
    // DMA1SAD at 0xBC = 0xFFFFFFFF;
    rwmask[188] = (byte)(0xFFFFFFFF & 0xFF);
    rwmask[189] = (byte)((0xFFFFFFFF >> 8) & 0xFF);
    rwmask[190] = (byte)((0xFFFFFFFF >> 16) & 0xFF);
    rwmask[191] = (byte)((0xFFFFFFFF >> 24) & 0xFF);
    // DMA1DAD at 0xC0 = 0xFFFFFFFF;
    rwmask[192] = (byte)(0xFFFFFFFF & 0xFF);
    rwmask[193] = (byte)((0xFFFFFFFF >> 8) & 0xFF);
    rwmask[194] = (byte)((0xFFFFFFFF >> 16) & 0xFF);
    rwmask[195] = (byte)((0xFFFFFFFF >> 24) & 0xFF);
    // DMA1CNT_L at 0xC4 = 0xFFFFFFFF;
    rwmask[196] = (byte)(0xFFFFFFFF & 0xFF);
    rwmask[197] = (byte)((0xFFFFFFFF >> 8) & 0xFF);
    rwmask[198] = (byte)((0xFFFFFFFF >> 16) & 0xFF);
    rwmask[199] = (byte)((0xFFFFFFFF >> 24) & 0xFF);
    // DMA2SAD at 0xC8 = 0xFFFFFFFF;
    rwmask[200] = (byte)(0xFFFFFFFF & 0xFF);
    rwmask[201] = (byte)((0xFFFFFFFF >> 8) & 0xFF);
    rwmask[202] = (byte)((0xFFFFFFFF >> 16) & 0xFF);
    rwmask[203] = (byte)((0xFFFFFFFF >> 24) & 0xFF);
    // DMA2DAD at 0xCC = 0xFFFFFFFF;
    rwmask[204] = (byte)(0xFFFFFFFF & 0xFF);
    rwmask[205] = (byte)((0xFFFFFFFF >> 8) & 0xFF);
    rwmask[206] = (byte)((0xFFFFFFFF >> 16) & 0xFF);
    rwmask[207] = (byte)((0xFFFFFFFF >> 24) & 0xFF);
    // DMA2CNT_L at 0xD0 = 0xFFFFFFFF;
    rwmask[208] = (byte)(0xFFFFFFFF & 0xFF);
    rwmask[209] = (byte)((0xFFFFFFFF >> 8) & 0xFF);
    rwmask[210] = (byte)((0xFFFFFFFF >> 16) & 0xFF);
    rwmask[211] = (byte)((0xFFFFFFFF >> 24) & 0xFF);
    // DMA3SAD at 0xD4 = 0xFFFFFFFF;
    rwmask[212] = (byte)(0xFFFFFFFF & 0xFF);
    rwmask[213] = (byte)((0xFFFFFFFF >> 8) & 0xFF);
    rwmask[214] = (byte)((0xFFFFFFFF >> 16) & 0xFF);
    rwmask[215] = (byte)((0xFFFFFFFF >> 24) & 0xFF);
    // DMA3DAD at 0xD8 = 0xFFFFFFFF;
    rwmask[216] = (byte)(0xFFFFFFFF & 0xFF);
    rwmask[217] = (byte)((0xFFFFFFFF >> 8) & 0xFF);
    rwmask[218] = (byte)((0xFFFFFFFF >> 16) & 0xFF);
    rwmask[219] = (byte)((0xFFFFFFFF >> 24) & 0xFF);
    // DMA3CNT_L at 0xDC = 0xFFFFFFFF;
    rwmask[220] = (byte)(0xFFFFFFFF & 0xFF);
    rwmask[221] = (byte)((0xFFFFFFFF >> 8) & 0xFF);
    rwmask[222] = (byte)((0xFFFFFFFF >> 16) & 0xFF);
    rwmask[223] = (byte)((0xFFFFFFFF >> 24) & 0xFF);
    // TM0CNT_L at 0x100 = 0xFFFFFFFF;
    rwmask[256] = (byte)(0xFFFFFFFF & 0xFF);
    rwmask[257] = (byte)((0xFFFFFFFF >> 8) & 0xFF);
    rwmask[258] = (byte)((0xFFFFFFFF >> 16) & 0xFF);
    rwmask[259] = (byte)((0xFFFFFFFF >> 24) & 0xFF);
    // TM1CNT_L at 0x104 = 0xFFFFFFFF;
    rwmask[260] = (byte)(0xFFFFFFFF & 0xFF);
    rwmask[261] = (byte)((0xFFFFFFFF >> 8) & 0xFF);
    rwmask[262] = (byte)((0xFFFFFFFF >> 16) & 0xFF);
    rwmask[263] = (byte)((0xFFFFFFFF >> 24) & 0xFF);
    // TM2CNT_L at 0x108 = 0xFFFFFFFF;
    rwmask[264] = (byte)(0xFFFFFFFF & 0xFF);
    rwmask[265] = (byte)((0xFFFFFFFF >> 8) & 0xFF);
    rwmask[266] = (byte)((0xFFFFFFFF >> 16) & 0xFF);
    rwmask[267] = (byte)((0xFFFFFFFF >> 24) & 0xFF);
    // TM3CNT_L at 0x10C = 0xFFFFFFFF;
    rwmask[268] = (byte)(0xFFFFFFFF & 0xFF);
    rwmask[269] = (byte)((0xFFFFFFFF >> 8) & 0xFF);
    rwmask[270] = (byte)((0xFFFFFFFF >> 16) & 0xFF);
    rwmask[271] = (byte)((0xFFFFFFFF >> 24) & 0xFF);
    // KEYINPUT at 0x130 = 0xFFFFFFFF;
    rwmask[304] = (byte)(0xFFFFFFFF & 0xFF);
    rwmask[305] = (byte)((0xFFFFFFFF >> 8) & 0xFF);
    rwmask[306] = (byte)((0xFFFFFFFF >> 16) & 0xFF);
    rwmask[307] = (byte)((0xFFFFFFFF >> 24) & 0xFF);
    // EXTKEYIN at 0x134 = 0xFF0000;
    rwmask[308] = (byte)(0xFF0000 & 0xFF);
    rwmask[309] = (byte)((0xFF0000 >> 8) & 0xFF);
    rwmask[310] = (byte)((0xFF0000 >> 16) & 0xFF);
    rwmask[311] = (byte)((0xFF0000 >> 24) & 0xFF);
    // RTC_reg at 0x138 = 0xFFFF;
    rwmask[312] = (byte)(0xFFFF & 0xFF);
    rwmask[313] = (byte)((0xFFFF >> 8) & 0xFF);
    rwmask[314] = (byte)((0xFFFF >> 16) & 0xFF);
    rwmask[315] = (byte)((0xFFFF >> 24) & 0xFF);
    // IPCSYNC at 0x180 = 0x6F0F;
    rwmask[384] = (byte)(0x6F0F & 0xFF);
    rwmask[385] = (byte)((0x6F0F >> 8) & 0xFF);
    rwmask[386] = (byte)((0x6F0F >> 16) & 0xFF);
    rwmask[387] = (byte)((0x6F0F >> 24) & 0xFF);
    // IPCFIFOCNT at 0x184 = 0xC707;
    rwmask[388] = (byte)(0xC707 & 0xFF);
    rwmask[389] = (byte)((0xC707 >> 8) & 0xFF);
    rwmask[390] = (byte)((0xC707 >> 16) & 0xFF);
    rwmask[391] = (byte)((0xC707 >> 24) & 0xFF);
    // IPCFIFOSEND at 0x188 = 0x0;
    rwmask[392] = (byte)(0x0 & 0xFF);
    rwmask[393] = (byte)((0x0 >> 8) & 0xFF);
    rwmask[394] = (byte)((0x0 >> 16) & 0xFF);
    rwmask[395] = (byte)((0x0 >> 24) & 0xFF);
    // AUXSPICNT at 0x1A0 = 0xFFE0C3;
    rwmask[416] = (byte)(0xFFE0C3 & 0xFF);
    rwmask[417] = (byte)((0xFFE0C3 >> 8) & 0xFF);
    rwmask[418] = (byte)((0xFFE0C3 >> 16) & 0xFF);
    rwmask[419] = (byte)((0xFFE0C3 >> 24) & 0xFF);
    // ROMCTRL at 0x1A4 = 0x7FFFFFFF;
    rwmask[420] = (byte)(0x7FFFFFFF & 0xFF);
    rwmask[421] = (byte)((0x7FFFFFFF >> 8) & 0xFF);
    rwmask[422] = (byte)((0x7FFFFFFF >> 16) & 0xFF);
    rwmask[423] = (byte)((0x7FFFFFFF >> 24) & 0xFF);
    // Gamecard_bus_Command_1 at 0x1A8 = 0x0;
    rwmask[424] = (byte)(0x0 & 0xFF);
    rwmask[425] = (byte)((0x0 >> 8) & 0xFF);
    rwmask[426] = (byte)((0x0 >> 16) & 0xFF);
    rwmask[427] = (byte)((0x0 >> 24) & 0xFF);
    // Gamecard_bus_Command_2 at 0x1AC = 0x0;
    rwmask[428] = (byte)(0x0 & 0xFF);
    rwmask[429] = (byte)((0x0 >> 8) & 0xFF);
    rwmask[430] = (byte)((0x0 >> 16) & 0xFF);
    rwmask[431] = (byte)((0x0 >> 24) & 0xFF);
    // Encryption_Seed_0_Lower at 0x1B0 = 0x0;
    rwmask[432] = (byte)(0x0 & 0xFF);
    rwmask[433] = (byte)((0x0 >> 8) & 0xFF);
    rwmask[434] = (byte)((0x0 >> 16) & 0xFF);
    rwmask[435] = (byte)((0x0 >> 24) & 0xFF);
    // Encryption_Seed_1_Lower at 0x1B4 = 0x0;
    rwmask[436] = (byte)(0x0 & 0xFF);
    rwmask[437] = (byte)((0x0 >> 8) & 0xFF);
    rwmask[438] = (byte)((0x0 >> 16) & 0xFF);
    rwmask[439] = (byte)((0x0 >> 24) & 0xFF);
    // Encryption_Seed_0_Upper at 0x1B8 = 0x0;
    rwmask[440] = (byte)(0x0 & 0xFF);
    rwmask[441] = (byte)((0x0 >> 8) & 0xFF);
    rwmask[442] = (byte)((0x0 >> 16) & 0xFF);
    rwmask[443] = (byte)((0x0 >> 24) & 0xFF);
    // SPICNT at 0x1C0 = 0xFFCF83;
    rwmask[448] = (byte)(0xFFCF83 & 0xFF);
    rwmask[449] = (byte)((0xFFCF83 >> 8) & 0xFF);
    rwmask[450] = (byte)((0xFFCF83 >> 16) & 0xFF);
    rwmask[451] = (byte)((0xFFCF83 >> 24) & 0xFF);
    // EXMEMSTAT at 0x204 = 0x3FFFFFFF;
    rwmask[516] = (byte)(0x3FFFFFFF & 0xFF);
    rwmask[517] = (byte)((0x3FFFFFFF >> 8) & 0xFF);
    rwmask[518] = (byte)((0x3FFFFFFF >> 16) & 0xFF);
    rwmask[519] = (byte)((0x3FFFFFFF >> 24) & 0xFF);
    // IME at 0x208 = 0xFFFFFFFF;
    rwmask[520] = (byte)(0xFFFFFFFF & 0xFF);
    rwmask[521] = (byte)((0xFFFFFFFF >> 8) & 0xFF);
    rwmask[522] = (byte)((0xFFFFFFFF >> 16) & 0xFF);
    rwmask[523] = (byte)((0xFFFFFFFF >> 24) & 0xFF);
    // IE at 0x210 = 0xFFDF3FFF;
    rwmask[528] = (byte)(0xFFDF3FFF & 0xFF);
    rwmask[529] = (byte)((0xFFDF3FFF >> 8) & 0xFF);
    rwmask[530] = (byte)((0xFFDF3FFF >> 16) & 0xFF);
    rwmask[531] = (byte)((0xFFDF3FFF >> 24) & 0xFF);
    // IF at 0x214 = 0x1F3FFF;
    rwmask[532] = (byte)(0x1F3FFF & 0xFF);
    rwmask[533] = (byte)((0x1F3FFF >> 8) & 0xFF);
    rwmask[534] = (byte)((0x1F3FFF >> 16) & 0xFF);
    rwmask[535] = (byte)((0x1F3FFF >> 24) & 0xFF);
    // RAMSTAT at 0x240 = 0x3FF;
    rwmask[576] = (byte)(0x3FF & 0xFF);
    rwmask[577] = (byte)((0x3FF >> 8) & 0xFF);
    rwmask[578] = (byte)((0x3FF >> 16) & 0xFF);
    rwmask[579] = (byte)((0x3FF >> 24) & 0xFF);
    // POSTFLG at 0x300 = 0xC001;
    rwmask[768] = (byte)(0xC001 & 0xFF);
    rwmask[769] = (byte)((0xC001 >> 8) & 0xFF);
    rwmask[770] = (byte)((0xC001 >> 16) & 0xFF);
    rwmask[771] = (byte)((0xC001 >> 24) & 0xFF);
    // POWCNT2 at 0x304 = 0x3;
    rwmask[772] = (byte)(0x3 & 0xFF);
    rwmask[773] = (byte)((0x3 >> 8) & 0xFF);
    rwmask[774] = (byte)((0x3 >> 16) & 0xFF);
    rwmask[775] = (byte)((0x3 >> 24) & 0xFF);
    // BIOSPROT at 0x308 = 0xFFFF;
    rwmask[776] = (byte)(0xFFFF & 0xFF);
    rwmask[777] = (byte)((0xFFFF >> 8) & 0xFF);
    rwmask[778] = (byte)((0xFFFF >> 16) & 0xFF);
    rwmask[779] = (byte)((0xFFFF >> 24) & 0xFF);
    // IPCFIFORECV at 0xFFF = 0xFFFFFFFF;
    rwmask[4095] = (byte)(0xFFFFFFFF & 0xFF);
    rwmask[4096] = (byte)((0xFFFFFFFF >> 8) & 0xFF);
    rwmask[4097] = (byte)((0xFFFFFFFF >> 16) & 0xFF);
    rwmask[4098] = (byte)((0xFFFFFFFF >> 24) & 0xFF);
}
